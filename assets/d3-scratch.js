!function(n){function t(n){delete installedChunks[n]}function e(n){var t=document.getElementsByTagName("head")[0],e=document.createElement("script");e.type="text/javascript",e.charset="utf-8",e.src=h.p+""+n+"."+g+".hot-update.js",t.appendChild(e)}function r(n){return n=n||1e4,new Promise(function(t,e){if("undefined"==typeof XMLHttpRequest)return e(new Error("No browser support"));try{var r=new XMLHttpRequest,o=h.p+""+g+".hot-update.json";r.open("GET",o,!0),r.timeout=n,r.send(null)}catch(n){return e(n)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)e(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)e(new Error("Manifest request to "+o+" failed."));else{try{var n=JSON.parse(r.responseText)}catch(n){return void e(n)}t(n)}}})}function o(n){var t=S[n];if(!t)return h;var e=function(e){return t.hot.active?(S[e]?S[e].parents.indexOf(n)<0&&S[e].parents.push(n):(O=[n],_=e),t.children.indexOf(e)<0&&t.children.push(e)):(console.warn("[HMR] unexpected require("+e+") from disposed module "+n),O=[]),h(e)};for(var r in h)Object.prototype.hasOwnProperty.call(h,r)&&"e"!==r&&Object.defineProperty(e,r,function(n){return{configurable:!0,enumerable:!0,get:function(){return h[n]},set:function(t){h[n]=t}}}(r));return e.e=function(n){function t(){E--,"prepare"===k&&(N[n]||d(n),0===E&&0===T&&l())}return"ready"===k&&s("prepare"),E++,h.e(n).then(t,function(n){throw t(),n})},e}function i(n){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:_!==n,active:!0,accept:function(n,e){if(void 0===n)t._selfAccepted=!0;else if("function"==typeof n)t._selfAccepted=n;else if("object"==typeof n)for(var r=0;r<n.length;r++)t._acceptedDependencies[n[r]]=e||function(){};else t._acceptedDependencies[n]=e||function(){}},decline:function(n){if(void 0===n)t._selfDeclined=!0;else if("object"==typeof n)for(var e=0;e<n.length;e++)t._declinedDependencies[n[e]]=!0;else t._declinedDependencies[n]=!0},dispose:function(n){t._disposeHandlers.push(n)},addDisposeHandler:function(n){t._disposeHandlers.push(n)},removeDisposeHandler:function(n){var e=t._disposeHandlers.indexOf(n);e>=0&&t._disposeHandlers.splice(e,1)},check:c,apply:f,status:function(n){if(!n)return k;M.push(n)},addStatusHandler:function(n){M.push(n)},removeStatusHandler:function(n){var t=M.indexOf(n);t>=0&&M.splice(t,1)},data:x[n]};return _=void 0,t}function s(n){k=n;for(var t=0;t<M.length;t++)M[t].call(null,n)}function u(n){return+n+""===n?+n:n}function c(n){if("idle"!==k)throw new Error("check() is only allowed in idle status");return b=n,s("check"),r(y).then(function(n){if(!n)return s("idle"),null;A={},N={},C=n.c,v=n.h,s("prepare");var t=new Promise(function(n,t){p={resolve:n,reject:t}});j={};return d(0),"prepare"===k&&0===E&&0===T&&l(),t})}function a(n,t){if(C[n]&&A[n]){A[n]=!1;for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(j[e]=t[e]);0==--T&&0===E&&l()}}function d(n){C[n]?(A[n]=!0,T++,e(n)):N[n]=!0}function l(){s("ready");var n=p;if(p=null,n)if(b)Promise.resolve().then(function(){return f(b)}).then(function(t){n.resolve(t)},function(t){n.reject(t)});else{var t=[];for(var e in j)Object.prototype.hasOwnProperty.call(j,e)&&t.push(u(e));n.resolve(t)}}function f(e){function r(n,t){for(var e=0;e<t.length;e++){var r=t[e];n.indexOf(r)<0&&n.push(r)}}if("ready"!==k)throw new Error("apply() is only allowed in ready status");e=e||{};var o,i,c,a,d,l={},f=[],m={},_=function(){console.warn("[HMR] unexpected require("+b.moduleId+") to disposed module")};for(var p in j)if(Object.prototype.hasOwnProperty.call(j,p)){d=u(p);var b;b=j[p]?function(n){for(var t=[n],e={},o=t.slice().map(function(n){return{chain:[n],id:n}});o.length>0;){var i=o.pop(),s=i.id,u=i.chain;if((a=S[s])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:u,moduleId:s};if(a.hot._main)return{type:"unaccepted",chain:u,moduleId:s};for(var c=0;c<a.parents.length;c++){var d=a.parents[c],l=S[d];if(l){if(l.hot._declinedDependencies[s])return{type:"declined",chain:u.concat([d]),moduleId:s,parentId:d};t.indexOf(d)>=0||(l.hot._acceptedDependencies[s]?(e[d]||(e[d]=[]),r(e[d],[s])):(delete e[d],t.push(d),o.push({chain:u.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:n,outdatedModules:t,outdatedDependencies:e}}(d):{type:"disposed",moduleId:p};var y=!1,w=!1,M=!1,T="";switch(b.chain&&(T="\nUpdate propagation: "+b.chain.join(" -> ")),b.type){case"self-declined":e.onDeclined&&e.onDeclined(b),e.ignoreDeclined||(y=new Error("Aborted because of self decline: "+b.moduleId+T));break;case"declined":e.onDeclined&&e.onDeclined(b),e.ignoreDeclined||(y=new Error("Aborted because of declined dependency: "+b.moduleId+" in "+b.parentId+T));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(b),e.ignoreUnaccepted||(y=new Error("Aborted because "+d+" is not accepted"+T));break;case"accepted":e.onAccepted&&e.onAccepted(b),w=!0;break;case"disposed":e.onDisposed&&e.onDisposed(b),M=!0;break;default:throw new Error("Unexception type "+b.type)}if(y)return s("abort"),Promise.reject(y);if(w){m[d]=j[d],r(f,b.outdatedModules);for(d in b.outdatedDependencies)Object.prototype.hasOwnProperty.call(b.outdatedDependencies,d)&&(l[d]||(l[d]=[]),r(l[d],b.outdatedDependencies[d]))}M&&(r(f,[b.moduleId]),m[d]=_)}var E=[];for(i=0;i<f.length;i++)d=f[i],S[d]&&S[d].hot._selfAccepted&&E.push({module:d,errorHandler:S[d].hot._selfAccepted});s("dispose"),Object.keys(C).forEach(function(n){!1===C[n]&&t(n)});for(var N,A=f.slice();A.length>0;)if(d=A.pop(),a=S[d]){var q={},z=a.hot._disposeHandlers;for(c=0;c<z.length;c++)(o=z[c])(q);for(x[d]=q,a.hot.active=!1,delete S[d],delete l[d],c=0;c<a.children.length;c++){var P=S[a.children[c]];P&&((N=P.parents.indexOf(d))>=0&&P.parents.splice(N,1))}}var R,D;for(d in l)if(Object.prototype.hasOwnProperty.call(l,d)&&(a=S[d]))for(D=l[d],c=0;c<D.length;c++)R=D[c],(N=a.children.indexOf(R))>=0&&a.children.splice(N,1);s("apply"),g=v;for(d in m)Object.prototype.hasOwnProperty.call(m,d)&&(n[d]=m[d]);var I=null;for(d in l)if(Object.prototype.hasOwnProperty.call(l,d)&&(a=S[d])){D=l[d];var L=[];for(i=0;i<D.length;i++)if(R=D[i],o=a.hot._acceptedDependencies[R]){if(L.indexOf(o)>=0)continue;L.push(o)}for(i=0;i<L.length;i++){o=L[i];try{o(D)}catch(n){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:d,dependencyId:D[i],error:n}),e.ignoreErrored||I||(I=n)}}}for(i=0;i<E.length;i++){var H=E[i];d=H.module,O=[d];try{h(d)}catch(n){if("function"==typeof H.errorHandler)try{H.errorHandler(n)}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:t,orginalError:n,originalError:n}),e.ignoreErrored||I||(I=t),I||(I=n)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:d,error:n}),e.ignoreErrored||I||(I=n)}}return I?(s("fail"),Promise.reject(I)):(s("idle"),new Promise(function(n){n(f)}))}function h(t){if(S[t])return S[t].exports;var e=S[t]={i:t,l:!1,exports:{},hot:i(t),parents:(w=O,O=[],w),children:[]};return n[t].call(e.exports,e,e.exports,o(t)),e.l=!0,e.exports}var m=this.webpackHotUpdate;this.webpackHotUpdate=function(n,t){a(n,t),m&&m(n,t)};var _,p,j,v,b=!0,g="24cac4eacccbafc07c53",y=1e4,x={},O=[],w=[],M=[],k="idle",T=0,E=0,N={},A={},C={},S={};h.m=n,h.c=S,h.d=function(n,t,e){h.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:e})},h.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return h.d(t,"a",t),t},h.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},h.p="",h.h=function(){return g},o("./src/index.js")(h.s="./src/index.js")}({"./node_modules/d3-array/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/bisect.js");e.d(t,"b",function(){return r.c}),e.d(t,"d",function(){return r.b}),e.d(t,"c",function(){return r.a});var o=e("./node_modules/d3-array/src/ascending.js");e.d(t,"a",function(){return o.a});var i=e("./node_modules/d3-array/src/bisector.js");e.d(t,"e",function(){return i.a});var s=e("./node_modules/d3-array/src/cross.js");e.d(t,"f",function(){return s.a});var u=e("./node_modules/d3-array/src/descending.js");e.d(t,"g",function(){return u.a});var c=e("./node_modules/d3-array/src/deviation.js");e.d(t,"h",function(){return c.a});var a=e("./node_modules/d3-array/src/extent.js");e.d(t,"i",function(){return a.a});var d=e("./node_modules/d3-array/src/histogram.js");e.d(t,"j",function(){return d.a});var l=e("./node_modules/d3-array/src/threshold/freedmanDiaconis.js");e.d(t,"w",function(){return l.a});var f=e("./node_modules/d3-array/src/threshold/scott.js");e.d(t,"x",function(){return f.a});var h=e("./node_modules/d3-array/src/threshold/sturges.js");e.d(t,"y",function(){return h.a});var m=e("./node_modules/d3-array/src/max.js");e.d(t,"k",function(){return m.a});var _=e("./node_modules/d3-array/src/mean.js");e.d(t,"l",function(){return _.a});var p=e("./node_modules/d3-array/src/median.js");e.d(t,"m",function(){return p.a});var j=e("./node_modules/d3-array/src/merge.js");e.d(t,"n",function(){return j.a});var v=e("./node_modules/d3-array/src/min.js");e.d(t,"o",function(){return v.a});var b=e("./node_modules/d3-array/src/pairs.js");e.d(t,"p",function(){return b.a});var g=e("./node_modules/d3-array/src/permute.js");e.d(t,"q",function(){return g.a});var y=e("./node_modules/d3-array/src/quantile.js");e.d(t,"r",function(){return y.a});var x=e("./node_modules/d3-array/src/range.js");e.d(t,"s",function(){return x.a});var O=e("./node_modules/d3-array/src/scan.js");e.d(t,"t",function(){return O.a});var w=e("./node_modules/d3-array/src/shuffle.js");e.d(t,"u",function(){return w.a});var M=e("./node_modules/d3-array/src/sum.js");e.d(t,"v",function(){return M.a});var k=e("./node_modules/d3-array/src/ticks.js");e.d(t,"B",function(){return k.a}),e.d(t,"z",function(){return k.b}),e.d(t,"A",function(){return k.c});var T=e("./node_modules/d3-array/src/transpose.js");e.d(t,"C",function(){return T.a});var E=e("./node_modules/d3-array/src/variance.js");e.d(t,"D",function(){return E.a});var N=e("./node_modules/d3-array/src/zip.js");e.d(t,"E",function(){return N.a})},"./node_modules/d3-array/src/array.js":function(n,t,e){"use strict";e.d(t,"b",function(){return o}),e.d(t,"a",function(){return i});var r=Array.prototype,o=r.slice,i=r.map},"./node_modules/d3-array/src/ascending.js":function(n,t,e){"use strict";t.a=function(n,t){return n<t?-1:n>t?1:n>=t?0:NaN}},"./node_modules/d3-array/src/bisect.js":function(n,t,e){"use strict";e.d(t,"b",function(){return s}),e.d(t,"a",function(){return u});var r=e("./node_modules/d3-array/src/ascending.js"),o=e("./node_modules/d3-array/src/bisector.js"),i=Object(o.a)(r.a),s=i.right,u=i.left;t.c=s},"./node_modules/d3-array/src/bisector.js":function(n,t,e){"use strict";function r(n){return function(t,e){return Object(o.a)(n(t),e)}}var o=e("./node_modules/d3-array/src/ascending.js");t.a=function(n){return 1===n.length&&(n=r(n)),{left:function(t,e,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var i=r+o>>>1;n(t[i],e)<0?r=i+1:o=i}return r},right:function(t,e,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){var i=r+o>>>1;n(t[i],e)>0?o=i:r=i+1}return r}}}},"./node_modules/d3-array/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-array/src/cross.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/pairs.js");t.a=function(n,t,e){var o,i,s,u,c=n.length,a=t.length,d=new Array(c*a);for(null==e&&(e=r.b),o=s=0;o<c;++o)for(u=n[o],i=0;i<a;++i,++s)d[s]=e(u,t[i]);return d}},"./node_modules/d3-array/src/descending.js":function(n,t,e){"use strict";t.a=function(n,t){return t<n?-1:t>n?1:t>=n?0:NaN}},"./node_modules/d3-array/src/deviation.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/variance.js");t.a=function(n,t){var e=Object(r.a)(n,t);return e?Math.sqrt(e):e}},"./node_modules/d3-array/src/extent.js":function(n,t,e){"use strict";t.a=function(n,t){var e,r,o,i=n.length,s=-1;if(null==t){for(;++s<i;)if(null!=(e=n[s])&&e>=e)for(r=o=e;++s<i;)null!=(e=n[s])&&(r>e&&(r=e),o<e&&(o=e))}else for(;++s<i;)if(null!=(e=t(n[s],s,n))&&e>=e)for(r=o=e;++s<i;)null!=(e=t(n[s],s,n))&&(r>e&&(r=e),o<e&&(o=e));return[r,o]}},"./node_modules/d3-array/src/histogram.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/array.js"),o=e("./node_modules/d3-array/src/bisect.js"),i=e("./node_modules/d3-array/src/constant.js"),s=e("./node_modules/d3-array/src/extent.js"),u=e("./node_modules/d3-array/src/identity.js"),c=e("./node_modules/d3-array/src/range.js"),a=e("./node_modules/d3-array/src/ticks.js"),d=e("./node_modules/d3-array/src/threshold/sturges.js");t.a=function(){function n(n){var r,i,s=n.length,u=new Array(s);for(r=0;r<s;++r)u[r]=t(n[r],r,n);var d=e(u),f=d[0],h=d[1],m=l(u,f,h);Array.isArray(m)||(m=Object(a.c)(f,h,m),m=Object(c.a)(Math.ceil(f/m)*m,Math.floor(h/m)*m,m));for(var _=m.length;m[0]<=f;)m.shift(),--_;for(;m[_-1]>h;)m.pop(),--_;var p,j=new Array(_+1);for(r=0;r<=_;++r)p=j[r]=[],p.x0=r>0?m[r-1]:f,p.x1=r<_?m[r]:h;for(r=0;r<s;++r)i=u[r],f<=i&&i<=h&&j[Object(o.c)(m,i,0,_)].push(n[r]);return j}var t=u.a,e=s.a,l=d.a;return n.value=function(e){return arguments.length?(t="function"==typeof e?e:Object(i.a)(e),n):t},n.domain=function(t){return arguments.length?(e="function"==typeof t?t:Object(i.a)([t[0],t[1]]),n):e},n.thresholds=function(t){return arguments.length?(l="function"==typeof t?t:Array.isArray(t)?Object(i.a)(r.b.call(t)):Object(i.a)(t),n):l},n}},"./node_modules/d3-array/src/identity.js":function(n,t,e){"use strict";t.a=function(n){return n}},"./node_modules/d3-array/src/max.js":function(n,t,e){"use strict";t.a=function(n,t){var e,r,o=n.length,i=-1;if(null==t){for(;++i<o;)if(null!=(e=n[i])&&e>=e)for(r=e;++i<o;)null!=(e=n[i])&&e>r&&(r=e)}else for(;++i<o;)if(null!=(e=t(n[i],i,n))&&e>=e)for(r=e;++i<o;)null!=(e=t(n[i],i,n))&&e>r&&(r=e);return r}},"./node_modules/d3-array/src/mean.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/number.js");t.a=function(n,t){var e,o=n.length,i=o,s=-1,u=0;if(null==t)for(;++s<o;)isNaN(e=Object(r.a)(n[s]))?--i:u+=e;else for(;++s<o;)isNaN(e=Object(r.a)(t(n[s],s,n)))?--i:u+=e;if(i)return u/i}},"./node_modules/d3-array/src/median.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/ascending.js"),o=e("./node_modules/d3-array/src/number.js"),i=e("./node_modules/d3-array/src/quantile.js");t.a=function(n,t){var e,s=n.length,u=-1,c=[];if(null==t)for(;++u<s;)isNaN(e=Object(o.a)(n[u]))||c.push(e);else for(;++u<s;)isNaN(e=Object(o.a)(t(n[u],u,n)))||c.push(e);return Object(i.a)(c.sort(r.a),.5)}},"./node_modules/d3-array/src/merge.js":function(n,t,e){"use strict";t.a=function(n){for(var t,e,r,o=n.length,i=-1,s=0;++i<o;)s+=n[i].length;for(e=new Array(s);--o>=0;)for(r=n[o],t=r.length;--t>=0;)e[--s]=r[t];return e}},"./node_modules/d3-array/src/min.js":function(n,t,e){"use strict";t.a=function(n,t){var e,r,o=n.length,i=-1;if(null==t){for(;++i<o;)if(null!=(e=n[i])&&e>=e)for(r=e;++i<o;)null!=(e=n[i])&&r>e&&(r=e)}else for(;++i<o;)if(null!=(e=t(n[i],i,n))&&e>=e)for(r=e;++i<o;)null!=(e=t(n[i],i,n))&&r>e&&(r=e);return r}},"./node_modules/d3-array/src/number.js":function(n,t,e){"use strict";t.a=function(n){return null===n?NaN:+n}},"./node_modules/d3-array/src/pairs.js":function(n,t,e){"use strict";function r(n,t){return[n,t]}t.b=r,t.a=function(n,t){null==t&&(t=r);for(var e=0,o=n.length-1,i=n[0],s=new Array(o<0?0:o);e<o;)s[e]=t(i,i=n[++e]);return s}},"./node_modules/d3-array/src/permute.js":function(n,t,e){"use strict";t.a=function(n,t){for(var e=t.length,r=new Array(e);e--;)r[e]=n[t[e]];return r}},"./node_modules/d3-array/src/quantile.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/number.js");t.a=function(n,t,e){if(null==e&&(e=r.a),o=n.length){if((t=+t)<=0||o<2)return+e(n[0],0,n);if(t>=1)return+e(n[o-1],o-1,n);var o,i=(o-1)*t,s=Math.floor(i),u=+e(n[s],s,n);return u+(+e(n[s+1],s+1,n)-u)*(i-s)}}},"./node_modules/d3-array/src/range.js":function(n,t,e){"use strict";t.a=function(n,t,e){n=+n,t=+t,e=(o=arguments.length)<2?(t=n,n=0,1):o<3?1:+e;for(var r=-1,o=0|Math.max(0,Math.ceil((t-n)/e)),i=new Array(o);++r<o;)i[r]=n+r*e;return i}},"./node_modules/d3-array/src/scan.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/ascending.js");t.a=function(n,t){if(e=n.length){var e,o,i=0,s=0,u=n[s];for(null==t&&(t=r.a);++i<e;)(t(o=n[i],u)<0||0!==t(u,u))&&(u=o,s=i);return 0===t(u,u)?s:void 0}}},"./node_modules/d3-array/src/shuffle.js":function(n,t,e){"use strict";t.a=function(n,t,e){for(var r,o,i=(null==e?n.length:e)-(t=null==t?0:+t);i;)o=Math.random()*i--|0,r=n[i+t],n[i+t]=n[o+t],n[o+t]=r;return n}},"./node_modules/d3-array/src/sum.js":function(n,t,e){"use strict";t.a=function(n,t){var e,r=n.length,o=-1,i=0;if(null==t)for(;++o<r;)(e=+n[o])&&(i+=e);else for(;++o<r;)(e=+t(n[o],o,n))&&(i+=e);return i}},"./node_modules/d3-array/src/threshold/freedmanDiaconis.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/array.js"),o=e("./node_modules/d3-array/src/ascending.js"),i=e("./node_modules/d3-array/src/number.js"),s=e("./node_modules/d3-array/src/quantile.js");t.a=function(n,t,e){return n=r.a.call(n,i.a).sort(o.a),Math.ceil((e-t)/(2*(Object(s.a)(n,.75)-Object(s.a)(n,.25))*Math.pow(n.length,-1/3)))}},"./node_modules/d3-array/src/threshold/scott.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/deviation.js");t.a=function(n,t,e){return Math.ceil((e-t)/(3.5*Object(r.a)(n)*Math.pow(n.length,-1/3)))}},"./node_modules/d3-array/src/threshold/sturges.js":function(n,t,e){"use strict";t.a=function(n){return Math.ceil(Math.log(n.length)/Math.LN2)+1}},"./node_modules/d3-array/src/ticks.js":function(n,t,e){"use strict";function r(n,t,e){var r=(t-n)/Math.max(0,e),o=Math.floor(Math.log(r)/Math.LN10),c=r/Math.pow(10,o);return o>=0?(c>=i?10:c>=s?5:c>=u?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(c>=i?10:c>=s?5:c>=u?2:1)}function o(n,t,e){var r=Math.abs(t-n)/Math.max(0,e),o=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),c=r/o;return c>=i?o*=10:c>=s?o*=5:c>=u&&(o*=2),t<n?-o:o}t.b=r,t.c=o;var i=Math.sqrt(50),s=Math.sqrt(10),u=Math.sqrt(2);t.a=function(n,t,e){var o,i,s,u,c=-1;if(t=+t,n=+n,e=+e,n===t&&e>0)return[n];if((o=t<n)&&(i=n,n=t,t=i),0===(u=r(n,t,e))||!isFinite(u))return[];if(u>0)for(n=Math.ceil(n/u),t=Math.floor(t/u),s=new Array(i=Math.ceil(t-n+1));++c<i;)s[c]=(n+c)*u;else for(n=Math.floor(n*u),t=Math.ceil(t*u),s=new Array(i=Math.ceil(n-t+1));++c<i;)s[c]=(n-c)/u;return o&&s.reverse(),s}},"./node_modules/d3-array/src/transpose.js":function(n,t,e){"use strict";function r(n){return n.length}var o=e("./node_modules/d3-array/src/min.js");t.a=function(n){if(!(s=n.length))return[];for(var t=-1,e=Object(o.a)(n,r),i=new Array(e);++t<e;)for(var s,u=-1,c=i[t]=new Array(s);++u<s;)c[u]=n[u][t];return i}},"./node_modules/d3-array/src/variance.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/number.js");t.a=function(n,t){var e,o,i=n.length,s=0,u=-1,c=0,a=0;if(null==t)for(;++u<i;)isNaN(e=Object(r.a)(n[u]))||(o=e-c,c+=o/++s,a+=o*(e-c));else for(;++u<i;)isNaN(e=Object(r.a)(t(n[u],u,n)))||(o=e-c,c+=o/++s,a+=o*(e-c));if(s>1)return a/(s-1)}},"./node_modules/d3-array/src/zip.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/src/transpose.js");t.a=function(){return Object(r.a)(arguments)}},"./node_modules/d3-axis/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-axis/src/axis.js");e.d(t,"d",function(){return r.d}),e.d(t,"c",function(){return r.c}),e.d(t,"a",function(){return r.a}),e.d(t,"b",function(){return r.b})},"./node_modules/d3-axis/src/array.js":function(n,t,e){"use strict";e.d(t,"a",function(){return r});var r=Array.prototype.slice},"./node_modules/d3-axis/src/axis.js":function(n,t,e){"use strict";function r(n){return"translate("+(n+.5)+",0)"}function o(n){return"translate(0,"+(n+.5)+")"}function i(n){return function(t){return+n(t)}}function s(n){var t=Math.max(0,n.bandwidth()-1)/2;return n.round()&&(t=Math.round(t)),function(e){return+n(e)+t}}function u(){return!this.__axis}function c(n,t){function e(e){var r=null==a?t.ticks?t.ticks.apply(t,c):t.domain():a,o=null==d?t.tickFormat?t.tickFormat.apply(t,c):m.a:d,h=Math.max(l,0)+g,w=t.range(),M=+w[0]+.5,k=+w[w.length-1]+.5,T=(t.bandwidth?s:i)(t.copy()),E=e.selection?e.selection():e,N=E.selectAll(".domain").data([null]),A=E.selectAll(".tick").data(r,t).order(),C=A.exit(),S=A.enter().append("g").attr("class","tick"),q=A.select("line"),z=A.select("text");N=N.merge(N.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),A=A.merge(S),q=q.merge(S.append("line").attr("stroke","#000").attr(x+"2",y*l)),z=z.merge(S.append("text").attr("fill","#000").attr(x,y*h).attr("dy",n===_?"0em":n===j?"0.71em":"0.32em")),e!==E&&(N=N.transition(e),A=A.transition(e),q=q.transition(e),z=z.transition(e),C=C.transition(e).attr("opacity",b).attr("transform",function(n){return isFinite(n=T(n))?O(n):this.getAttribute("transform")}),S.attr("opacity",b).attr("transform",function(n){var t=this.parentNode.__axis;return O(t&&isFinite(t=t(n))?t:T(n))})),C.remove(),N.attr("d",n===v||n==p?"M"+y*f+","+M+"H0.5V"+k+"H"+y*f:"M"+M+","+y*f+"V0.5H"+k+"V"+y*f),A.attr("opacity",1).attr("transform",function(n){return O(T(n))}),q.attr(x+"2",y*l),z.attr(x,y*h).text(o),E.filter(u).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",n===p?"start":n===v?"end":"middle"),E.each(function(){this.__axis=T})}var c=[],a=null,d=null,l=6,f=6,g=3,y=n===_||n===v?-1:1,x=n===v||n===p?"x":"y",O=n===_||n===j?r:o;return e.scale=function(n){return arguments.length?(t=n,e):t},e.ticks=function(){return c=h.a.call(arguments),e},e.tickArguments=function(n){return arguments.length?(c=null==n?[]:h.a.call(n),e):c.slice()},e.tickValues=function(n){return arguments.length?(a=null==n?null:h.a.call(n),e):a&&a.slice()},e.tickFormat=function(n){return arguments.length?(d=n,e):d},e.tickSize=function(n){return arguments.length?(l=f=+n,e):l},e.tickSizeInner=function(n){return arguments.length?(l=+n,e):l},e.tickSizeOuter=function(n){return arguments.length?(f=+n,e):f},e.tickPadding=function(n){return arguments.length?(g=+n,e):g},e}function a(n){return c(_,n)}function d(n){return c(p,n)}function l(n){return c(j,n)}function f(n){return c(v,n)}t.d=a,t.c=d,t.a=l,t.b=f;var h=e("./node_modules/d3-axis/src/array.js"),m=e("./node_modules/d3-axis/src/identity.js"),_=1,p=2,j=3,v=4,b=1e-6},"./node_modules/d3-axis/src/identity.js":function(n,t,e){"use strict";t.a=function(n){return n}},"./node_modules/d3-brush/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-brush/src/brush.js");e.d(t,"a",function(){return r.d}),e.d(t,"c",function(){return r.b}),e.d(t,"d",function(){return r.c}),e.d(t,"b",function(){return r.a})},"./node_modules/d3-brush/src/brush.js":function(n,t,e){"use strict";function r(n){return{type:n}}function o(){return!_.d.button}function i(){var n=this.ownerSVGElement||this;return[[0,0],[n.width.baseVal.value,n.height.baseVal.value]]}function s(n){for(;!n.__brush;)if(!(n=n.parentNode))return;return n.__brush}function u(n){return n[0][0]===n[1][0]||n[0][1]===n[1][1]}function c(n){var t=n.__brush;return t?t.dim.output(t.selection):null}function a(){return l(w)}function d(){return l(M)}function l(n){function t(t){var o=t.property("__brush",l).selectAll(".overlay").data([r("overlay")]);o.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",T.overlay).merge(o).each(function(){var n=s(this).extent;Object(_.j)(this).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1])}),t.selectAll(".selection").data([r("selection")]).enter().append("rect").attr("class","selection").attr("cursor",T.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var i=t.selectAll(".handle").data(n.handles,function(n){return n.type});i.exit().remove(),i.enter().append("rect").attr("class",function(n){return"handle handle--"+n.type}).attr("cursor",function(n){return T[n.type]}),t.each(e).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",d)}function e(){var n=Object(_.j)(this),t=s(this).selection;t?(n.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),n.selectAll(".handle").style("display",null).attr("x",function(n){return"e"===n.type[n.type.length-1]?t[1][0]-P/2:t[0][0]-P/2}).attr("y",function(n){return"s"===n.type[0]?t[1][1]-P/2:t[0][1]-P/2}).attr("width",function(n){return"n"===n.type||"s"===n.type?t[1][0]-t[0][0]+P:P}).attr("height",function(n){return"e"===n.type||"w"===n.type?t[1][1]-t[0][1]+P:P})):n.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(n,t){return n.__brush.emitter||new a(n,t)}function a(n,t){this.that=n,this.args=t,this.state=n.__brush,this.active=0}function d(){function t(){var n=Object(_.g)(H);!$||I||L||(Math.abs(n[0]-nn[0])>Math.abs(n[1]-nn[1])?L=!0:I=!0),nn=n,D=!0,Object(b.a)(),r()}function r(){var n;switch(P=nn[0]-K[0],R=nn[1]-K[1],F){case y:case g:B&&(P=Math.max(G-d,Math.min(J-j,P)),l=d+P,v=j+P),Y&&(R=Math.max(Z-f,Math.min(Q-S,R)),m=f+R,z=S+R);break;case x:B<0?(P=Math.max(G-d,Math.min(J-d,P)),l=d+P,v=j):B>0&&(P=Math.max(G-j,Math.min(J-j,P)),l=d,v=j+P),Y<0?(R=Math.max(Z-f,Math.min(Q-f,R)),m=f+R,z=S):Y>0&&(R=Math.max(Z-S,Math.min(Q-S,R)),m=f,z=S+R);break;case O:B&&(l=Math.max(G,Math.min(J,d-P*B)),v=Math.max(G,Math.min(J,j+P*B))),Y&&(m=Math.max(Z,Math.min(Q,f-R*Y)),z=Math.max(Z,Math.min(Q,S+R*Y)))}v<l&&(B*=-1,n=d,d=j,j=n,n=l,l=v,v=n,U in E&&rn.attr("cursor",T[U=E[U]])),z<m&&(Y*=-1,n=f,f=S,S=n,n=m,m=z,z=n,U in N&&rn.attr("cursor",T[U=N[U]])),X.selection&&(V=X.selection),I&&(l=V[0][0],v=V[1][0]),L&&(m=V[0][1],z=V[1][1]),V[0][0]===l&&V[0][1]===m&&V[1][0]===v&&V[1][1]===z||(X.selection=[[l,m],[v,z]],e.call(H),tn.brush())}function o(){if(Object(b.b)(),_.d.touches){if(_.d.touches.length)return;k&&clearTimeout(k),k=setTimeout(function(){k=null},500),en.on("touchmove.brush touchend.brush touchcancel.brush",null)}else Object(h.c)(_.d.view,D),on.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);en.attr("pointer-events","all"),rn.attr("cursor",T.overlay),X.selection&&(V=X.selection),u(V)&&(X.selection=null,e.call(H)),tn.end()}function i(){switch(_.d.keyCode){case 16:$=B&&Y;break;case 18:F===x&&(B&&(j=v-P*B,d=l+P*B),Y&&(S=z-R*Y,f=m+R*Y),F=O,r());break;case 32:F!==x&&F!==O||(B<0?j=v-P:B>0&&(d=l-P),Y<0?S=z-R:Y>0&&(f=m-R),F=y,rn.attr("cursor",T.selection),r());break;default:return}Object(b.a)()}function a(){switch(_.d.keyCode){case 16:$&&(I=L=$=!1,r());break;case 18:F===O&&(B<0?j=v:B>0&&(d=l),Y<0?S=z:Y>0&&(f=m),F=x,r());break;case 32:F===y&&(_.d.altKey?(B&&(j=v-P*B,d=l+P*B),Y&&(S=z-R*Y,f=m+R*Y),F=O):(B<0?j=v:B>0&&(d=l),Y<0?S=z:Y>0&&(f=m),F=x),rn.attr("cursor",T[U]),r());break;default:return}Object(b.a)()}if(_.d.touches){if(_.d.changedTouches.length<_.d.touches.length)return Object(b.a)()}else if(k)return;if(q.apply(this,arguments)){var d,l,f,m,j,v,S,z,P,R,D,I,L,H=this,U=_.d.target.__data__.type,F="selection"===(_.d.metaKey?U="overlay":U)?g:_.d.altKey?O:x,B=n===M?null:A[U],Y=n===w?null:C[U],X=s(H),W=X.extent,V=X.selection,G=W[0][0],Z=W[0][1],J=W[1][0],Q=W[1][1],$=B&&Y&&_.d.shiftKey,K=Object(_.g)(H),nn=K,tn=c(H,arguments).beforestart();"overlay"===U?X.selection=V=[[d=n===M?G:K[0],f=n===w?Z:K[1]],[j=n===M?J:d,S=n===w?Q:f]]:(d=V[0][0],f=V[0][1],j=V[1][0],S=V[1][1]),l=d,m=f,v=j,z=S;var en=Object(_.j)(H).attr("pointer-events","none"),rn=en.selectAll(".overlay").attr("cursor",T[U]);if(_.d.touches)en.on("touchmove.brush",t,!0).on("touchend.brush touchcancel.brush",o,!0);else{var on=Object(_.j)(_.d.view).on("keydown.brush",i,!0).on("keyup.brush",a,!0).on("mousemove.brush",t,!0).on("mouseup.brush",o,!0);Object(h.b)(_.d.view)}Object(b.b)(),Object(p.b)(H),e.call(H),tn.start()}}function l(){var t=this.__brush||{selection:null};return t.extent=S.apply(this,arguments),t.dim=n,t}var k,S=i,q=o,z=Object(f.a)(t,"start","brush","end"),P=6;return t.move=function(t,r){t.selection?t.on("start.brush",function(){c(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){c(this,arguments).end()}).tween("brush",function(){function t(n){i.selection=1===n&&u(d)?null:l(n),e.call(o),s.brush()}var o=this,i=o.__brush,s=c(o,arguments),a=i.selection,d=n.input("function"==typeof r?r.apply(this,arguments):r,i.extent),l=Object(m.a)(a,d);return a&&d?t:t(1)}):t.each(function(){var t=this,o=arguments,i=t.__brush,s=n.input("function"==typeof r?r.apply(t,o):r,i.extent),a=c(t,o).beforestart();Object(p.b)(t),i.selection=null==s||u(s)?null:s,e.call(t),a.start().brush().end()})},a.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){Object(_.c)(new v.a(t,e,n.output(this.state.selection)),z.apply,z,[e,this.that,this.args])}},t.extent=function(n){return arguments.length?(S="function"==typeof n?n:Object(j.a)([[+n[0][0],+n[0][1]],[+n[1][0],+n[1][1]]]),t):S},t.filter=function(n){return arguments.length?(q="function"==typeof n?n:Object(j.a)(!!n),t):q},t.handleSize=function(n){return arguments.length?(P=+n,t):P},t.on=function(){var n=z.on.apply(z,arguments);return n===z?t:n},t}t.a=c,t.b=a,t.c=d;var f=e("./node_modules/d3-dispatch/index.js"),h=e("./node_modules/d3-drag/index.js"),m=e("./node_modules/d3-interpolate/index.js"),_=e("./node_modules/d3-selection/index.js"),p=e("./node_modules/d3-transition/index.js"),j=e("./node_modules/d3-brush/src/constant.js"),v=e("./node_modules/d3-brush/src/event.js"),b=e("./node_modules/d3-brush/src/noevent.js"),g={name:"drag"},y={name:"space"},x={name:"handle"},O={name:"center"},w={name:"x",handles:["e","w"].map(r),input:function(n,t){return n&&[[n[0],t[0][1]],[n[1],t[1][1]]]},output:function(n){return n&&[n[0][0],n[1][0]]}},M={name:"y",handles:["n","s"].map(r),input:function(n,t){return n&&[[t[0][0],n[0]],[t[1][0],n[1]]]},output:function(n){return n&&[n[0][1],n[1][1]]}},k={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(r),input:function(n){return n},output:function(n){return n}},T={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},E={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},N={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},A={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},C={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};t.d=function(){return l(k)}},"./node_modules/d3-brush/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-brush/src/event.js":function(n,t,e){"use strict";t.a=function(n,t,e){this.target=n,this.type=t,this.selection=e}},"./node_modules/d3-brush/src/noevent.js":function(n,t,e){"use strict";function r(){o.d.stopImmediatePropagation()}t.b=r;var o=e("./node_modules/d3-selection/index.js");t.a=function(){o.d.preventDefault(),o.d.stopImmediatePropagation()}},"./node_modules/d3-chord/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-chord/src/chord.js");e.d(t,"a",function(){return r.a});var o=e("./node_modules/d3-chord/src/ribbon.js");e.d(t,"b",function(){return o.a})},"./node_modules/d3-chord/src/array.js":function(n,t,e){"use strict";e.d(t,"a",function(){return r});var r=Array.prototype.slice},"./node_modules/d3-chord/src/chord.js":function(n,t,e){"use strict";function r(n){return function(t,e){return n(t.source.value+t.target.value,e.source.value+e.target.value)}}var o=e("./node_modules/d3-array/index.js"),i=e("./node_modules/d3-chord/src/math.js");t.a=function(){function n(n){var r,c,a,d,l,f,h=n.length,m=[],_=Object(o.s)(h),p=[],j=[],v=j.groups=new Array(h),b=new Array(h*h);for(r=0,l=-1;++l<h;){for(c=0,f=-1;++f<h;)c+=n[l][f];m.push(c),p.push(Object(o.s)(h)),r+=c}for(e&&_.sort(function(n,t){return e(m[n],m[t])}),s&&p.forEach(function(t,e){t.sort(function(t,r){return s(n[e][t],n[e][r])})}),r=Object(i.c)(0,i.e-t*h)/r,d=r?t:i.e/h,c=0,l=-1;++l<h;){for(a=c,f=-1;++f<h;){var g=_[l],y=p[g][f],x=n[g][y],O=c,w=c+=x*r;b[y*h+g]={index:g,subindex:y,startAngle:O,endAngle:w,value:x}}v[g]={index:g,startAngle:a,endAngle:c,value:m[g]},c+=d}for(l=-1;++l<h;)for(f=l-1;++f<h;){var M=b[f*h+l],k=b[l*h+f];(M.value||k.value)&&j.push(M.value<k.value?{source:k,target:M}:{source:M,target:k})}return u?j.sort(u):j}var t=0,e=null,s=null,u=null;return n.padAngle=function(e){return arguments.length?(t=Object(i.c)(0,e),n):t},n.sortGroups=function(t){return arguments.length?(e=t,n):e},n.sortSubgroups=function(t){return arguments.length?(s=t,n):s},n.sortChords=function(t){return arguments.length?(null==t?u=null:(u=r(t))._=t,n):u&&u._},n}},"./node_modules/d3-chord/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-chord/src/math.js":function(n,t,e){"use strict";e.d(t,"a",function(){return r}),e.d(t,"d",function(){return o}),e.d(t,"b",function(){return s}),e.d(t,"e",function(){return u}),e.d(t,"c",function(){return c});var r=Math.cos,o=Math.sin,i=Math.PI,s=i/2,u=2*i,c=Math.max},"./node_modules/d3-chord/src/ribbon.js":function(n,t,e){"use strict";function r(n){return n.source}function o(n){return n.target}function i(n){return n.radius}function s(n){return n.startAngle}function u(n){return n.endAngle}var c=e("./node_modules/d3-chord/src/array.js"),a=e("./node_modules/d3-chord/src/constant.js"),d=e("./node_modules/d3-chord/src/math.js"),l=e("./node_modules/d3-path/index.js");t.a=function(){function n(){var n,r=c.a.call(arguments),o=t.apply(this,r),i=e.apply(this,r),s=+f.apply(this,(r[0]=o,r)),u=h.apply(this,r)-d.b,a=m.apply(this,r)-d.b,p=s*Object(d.a)(u),j=s*Object(d.d)(u),v=+f.apply(this,(r[0]=i,r)),b=h.apply(this,r)-d.b,g=m.apply(this,r)-d.b;if(_||(_=n=Object(l.a)()),_.moveTo(p,j),_.arc(0,0,s,u,a),u===b&&a===g||(_.quadraticCurveTo(0,0,v*Object(d.a)(b),v*Object(d.d)(b)),_.arc(0,0,v,b,g)),_.quadraticCurveTo(0,0,p,j),_.closePath(),n)return _=null,n+""||null}var t=r,e=o,f=i,h=s,m=u,_=null;return n.radius=function(t){return arguments.length?(f="function"==typeof t?t:Object(a.a)(+t),n):f},n.startAngle=function(t){return arguments.length?(h="function"==typeof t?t:Object(a.a)(+t),n):h},n.endAngle=function(t){return arguments.length?(m="function"==typeof t?t:Object(a.a)(+t),n):m},n.source=function(e){return arguments.length?(t=e,n):t},n.target=function(t){return arguments.length?(e=t,n):e},n.context=function(t){return arguments.length?(_=null==t?null:t,n):_},n}},"./node_modules/d3-collection/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-collection/src/nest.js");e.d(t,"d",function(){return r.a});var o=e("./node_modules/d3-collection/src/set.js");e.d(t,"e",function(){return o.a});var i=e("./node_modules/d3-collection/src/map.js");e.d(t,"c",function(){return i.a});var s=e("./node_modules/d3-collection/src/keys.js");e.d(t,"b",function(){return s.a});var u=e("./node_modules/d3-collection/src/values.js");e.d(t,"f",function(){return u.a});var c=e("./node_modules/d3-collection/src/entries.js");e.d(t,"a",function(){return c.a})},"./node_modules/d3-collection/src/entries.js":function(n,t,e){"use strict";t.a=function(n){var t=[];for(var e in n)t.push({key:e,value:n[e]});return t}},"./node_modules/d3-collection/src/keys.js":function(n,t,e){"use strict";t.a=function(n){var t=[];for(var e in n)t.push(e);return t}},"./node_modules/d3-collection/src/map.js":function(n,t,e){"use strict";function r(){}function o(n,t){var e=new r;if(n instanceof r)n.each(function(n,t){e.set(t,n)});else if(Array.isArray(n)){var o,i=-1,s=n.length;if(null==t)for(;++i<s;)e.set(i,n[i]);else for(;++i<s;)e.set(t(o=n[i],i,n),o)}else if(n)for(var u in n)e.set(u,n[u]);return e}e.d(t,"b",function(){return i});var i="$";r.prototype=o.prototype={constructor:r,has:function(n){return i+n in this},get:function(n){return this[i+n]},set:function(n,t){return this[i+n]=t,this},remove:function(n){var t=i+n;return t in this&&delete this[t]},clear:function(){for(var n in this)n[0]===i&&delete this[n]},keys:function(){var n=[];for(var t in this)t[0]===i&&n.push(t.slice(1));return n},values:function(){var n=[];for(var t in this)t[0]===i&&n.push(this[t]);return n},entries:function(){var n=[];for(var t in this)t[0]===i&&n.push({key:t.slice(1),value:this[t]});return n},size:function(){var n=0;for(var t in this)t[0]===i&&++n;return n},empty:function(){for(var n in this)if(n[0]===i)return!1;return!0},each:function(n){for(var t in this)t[0]===i&&n(this[t],t.slice(1),this)}},t.a=o},"./node_modules/d3-collection/src/nest.js":function(n,t,e){"use strict";function r(){return{}}function o(n,t,e){n[t]=e}function i(){return Object(u.a)()}function s(n,t,e){n.set(t,e)}var u=e("./node_modules/d3-collection/src/map.js");t.a=function(){function n(t,r,o,i){if(r>=d.length)return null!=e&&t.sort(e),null!=c?c(t):t;for(var s,a,l,f=-1,h=t.length,m=d[r++],_=Object(u.a)(),p=o();++f<h;)(l=_.get(s=m(a=t[f])+""))?l.push(a):_.set(s,[a]);return _.each(function(t,e){i(p,e,n(t,r,o,i))}),p}function t(n,e){if(++e>d.length)return n;var r,o=l[e-1];return null!=c&&e>=d.length?r=n.entries():(r=[],n.each(function(n,o){r.push({key:o,values:t(n,e)})})),null!=o?r.sort(function(n,t){return o(n.key,t.key)}):r}var e,c,a,d=[],l=[];return a={object:function(t){return n(t,0,r,o)},map:function(t){return n(t,0,i,s)},entries:function(e){return t(n(e,0,i,s),0)},key:function(n){return d.push(n),a},sortKeys:function(n){return l[d.length-1]=n,a},sortValues:function(n){return e=n,a},rollup:function(n){return c=n,a}}}},"./node_modules/d3-collection/src/set.js":function(n,t,e){"use strict";function r(){}function o(n,t){var e=new r;if(n instanceof r)n.each(function(n){e.add(n)});else if(n){var o=-1,i=n.length;if(null==t)for(;++o<i;)e.add(n[o]);else for(;++o<i;)e.add(t(n[o],o,n))}return e}var i=e("./node_modules/d3-collection/src/map.js"),s=i.a.prototype;r.prototype=o.prototype={constructor:r,has:s.has,add:function(n){return n+="",this[i.b+n]=n,this},remove:s.remove,clear:s.clear,values:s.keys,size:s.size,empty:s.empty,each:s.each},t.a=o},"./node_modules/d3-collection/src/values.js":function(n,t,e){"use strict";t.a=function(n){var t=[];for(var e in n)t.push(n[e]);return t}},"./node_modules/d3-color/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-color/src/color.js");e.d(t,"a",function(){return r.e}),e.d(t,"f",function(){return r.g}),e.d(t,"d",function(){return r.f});var o=e("./node_modules/d3-color/src/lab.js");e.d(t,"e",function(){return o.a}),e.d(t,"c",function(){return o.b});var i=e("./node_modules/d3-color/src/cubehelix.js");e.d(t,"b",function(){return i.a})},"./node_modules/d3-color/src/color.js":function(n,t,e){"use strict";function r(){}function o(n){var t;return n=(n+"").trim().toLowerCase(),(t=y.exec(n))?(t=parseInt(t[1],16),new a(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1)):(t=x.exec(n))?i(parseInt(t[1],16)):(t=O.exec(n))?new a(t[1],t[2],t[3],1):(t=w.exec(n))?new a(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=M.exec(n))?s(t[1],t[2],t[3],t[4]):(t=k.exec(n))?s(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=T.exec(n))?d(t[1],t[2]/100,t[3]/100,1):(t=E.exec(n))?d(t[1],t[2]/100,t[3]/100,t[4]):N.hasOwnProperty(n)?i(N[n]):"transparent"===n?new a(NaN,NaN,NaN,0):null}function i(n){return new a(n>>16&255,n>>8&255,255&n,1)}function s(n,t,e,r){return r<=0&&(n=t=e=NaN),new a(n,t,e,r)}function u(n){return n instanceof r||(n=o(n)),n?(n=n.rgb(),new a(n.r,n.g,n.b,n.opacity)):new a}function c(n,t,e,r){return 1===arguments.length?u(n):new a(n,t,e,null==r?1:r)}function a(n,t,e,r){this.r=+n,this.g=+t,this.b=+e,this.opacity=+r}function d(n,t,e,r){return r<=0?n=t=e=NaN:e<=0||e>=1?n=t=NaN:t<=0&&(n=NaN),new h(n,t,e,r)}function l(n){if(n instanceof h)return new h(n.h,n.s,n.l,n.opacity);if(n instanceof r||(n=o(n)),!n)return new h;if(n instanceof h)return n;n=n.rgb();var t=n.r/255,e=n.g/255,i=n.b/255,s=Math.min(t,e,i),u=Math.max(t,e,i),c=NaN,a=u-s,d=(u+s)/2;return a?(c=t===u?(e-i)/a+6*(e<i):e===u?(i-t)/a+2:(t-e)/a+4,a/=d<.5?u+s:2-u-s,c*=60):a=d>0&&d<1?0:c,new h(c,a,d,n.opacity)}function f(n,t,e,r){return 1===arguments.length?l(n):new h(n,t,e,null==r?1:r)}function h(n,t,e,r){this.h=+n,this.s=+t,this.l=+e,this.opacity=+r}function m(n,t,e){return 255*(n<60?t+(e-t)*n/60:n<180?e:n<240?t+(e-t)*(240-n)/60:t)}t.a=r,e.d(t,"d",function(){return p}),e.d(t,"c",function(){return j}),t.e=o,t.h=u,t.g=c,t.b=a,t.f=f;var _=e("./node_modules/d3-color/src/define.js"),p=.7,j=1/p,v="\\s*([+-]?\\d+)\\s*",b="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",g="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",y=/^#([0-9a-f]{3})$/,x=/^#([0-9a-f]{6})$/,O=new RegExp("^rgb\\("+[v,v,v]+"\\)$"),w=new RegExp("^rgb\\("+[g,g,g]+"\\)$"),M=new RegExp("^rgba\\("+[v,v,v,b]+"\\)$"),k=new RegExp("^rgba\\("+[g,g,g,b]+"\\)$"),T=new RegExp("^hsl\\("+[b,g,g]+"\\)$"),E=new RegExp("^hsla\\("+[b,g,g,b]+"\\)$"),N={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Object(_.a)(r,o,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),Object(_.a)(a,c,Object(_.b)(r,{brighter:function(n){return n=null==n?j:Math.pow(j,n),new a(this.r*n,this.g*n,this.b*n,this.opacity)},darker:function(n){return n=null==n?p:Math.pow(p,n),new a(this.r*n,this.g*n,this.b*n,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var n=this.opacity;return n=isNaN(n)?1:Math.max(0,Math.min(1,n)),(1===n?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===n?")":", "+n+")")}})),Object(_.a)(h,f,Object(_.b)(r,{brighter:function(n){return n=null==n?j:Math.pow(j,n),new h(this.h,this.s,this.l*n,this.opacity)},darker:function(n){return n=null==n?p:Math.pow(p,n),new h(this.h,this.s,this.l*n,this.opacity)},rgb:function(){var n=this.h%360+360*(this.h<0),t=isNaN(n)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*t,o=2*e-r;return new a(m(n>=240?n-240:n+120,o,r),m(n,o,r),m(n<120?n+240:n-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}))},"./node_modules/d3-color/src/cubehelix.js":function(n,t,e){"use strict";function r(n){if(n instanceof i)return new i(n.h,n.s,n.l,n.opacity);n instanceof u.b||(n=Object(u.h)(n));var t=n.r/255,e=n.g/255,r=n.b/255,o=(p*r+m*t-_*e)/(p+m-_),s=r-o,a=(h*(e-o)-l*s)/f,d=Math.sqrt(a*a+s*s)/(h*o*(1-o)),j=d?Math.atan2(a,s)*c.b-120:NaN;return new i(j<0?j+360:j,d,o,n.opacity)}function o(n,t,e,o){return 1===arguments.length?r(n):new i(n,t,e,null==o?1:o)}function i(n,t,e,r){this.h=+n,this.s=+t,this.l=+e,this.opacity=+r}t.a=o;var s=e("./node_modules/d3-color/src/define.js"),u=e("./node_modules/d3-color/src/color.js"),c=e("./node_modules/d3-color/src/math.js"),a=-.14861,d=1.78277,l=-.29227,f=-.90649,h=1.97294,m=h*f,_=h*d,p=d*l-f*a;Object(s.a)(i,o,Object(s.b)(u.a,{brighter:function(n){return n=null==n?u.c:Math.pow(u.c,n),new i(this.h,this.s,this.l*n,this.opacity)},darker:function(n){return n=null==n?u.d:Math.pow(u.d,n),new i(this.h,this.s,this.l*n,this.opacity)},rgb:function(){var n=isNaN(this.h)?0:(this.h+120)*c.a,t=+this.l,e=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(n),o=Math.sin(n);return new u.b(255*(t+e*(a*r+d*o)),255*(t+e*(l*r+f*o)),255*(t+e*(h*r)),this.opacity)}}))},"./node_modules/d3-color/src/define.js":function(n,t,e){"use strict";function r(n,t){var e=Object.create(n.prototype);for(var r in t)e[r]=t[r];return e}t.b=r,t.a=function(n,t,e){n.prototype=t.prototype=e,e.constructor=n}},"./node_modules/d3-color/src/lab.js":function(n,t,e){"use strict";function r(n){if(n instanceof i)return new i(n.l,n.a,n.b,n.opacity);if(n instanceof f){var t=n.h*_.a;return new i(n.l,Math.cos(t)*n.c,Math.sin(t)*n.c,n.opacity)}n instanceof m.b||(n=Object(m.h)(n));var e=a(n.r),r=a(n.g),o=a(n.b),u=s((.4124564*e+.3575761*r+.1804375*o)/p),c=s((.2126729*e+.7151522*r+.072175*o)/j);return new i(116*c-16,500*(u-c),200*(c-s((.0193339*e+.119192*r+.9503041*o)/v)),n.opacity)}function o(n,t,e,o){return 1===arguments.length?r(n):new i(n,t,e,null==o?1:o)}function i(n,t,e,r){this.l=+n,this.a=+t,this.b=+e,this.opacity=+r}function s(n){return n>x?Math.pow(n,1/3):n/y+b}function u(n){return n>g?n*n*n:y*(n-b)}function c(n){return 255*(n<=.0031308?12.92*n:1.055*Math.pow(n,1/2.4)-.055)}function a(n){return(n/=255)<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function d(n){if(n instanceof f)return new f(n.h,n.c,n.l,n.opacity);n instanceof i||(n=r(n));var t=Math.atan2(n.b,n.a)*_.b;return new f(t<0?t+360:t,Math.sqrt(n.a*n.a+n.b*n.b),n.l,n.opacity)}function l(n,t,e,r){return 1===arguments.length?d(n):new f(n,t,e,null==r?1:r)}function f(n,t,e,r){this.h=+n,this.c=+t,this.l=+e,this.opacity=+r}t.a=o,t.b=l;var h=e("./node_modules/d3-color/src/define.js"),m=e("./node_modules/d3-color/src/color.js"),_=e("./node_modules/d3-color/src/math.js"),p=.95047,j=1,v=1.08883,b=4/29,g=6/29,y=3*g*g,x=g*g*g;Object(h.a)(i,o,Object(h.b)(m.a,{brighter:function(n){return new i(this.l+18*(null==n?1:n),this.a,this.b,this.opacity)},darker:function(n){return new i(this.l-18*(null==n?1:n),this.a,this.b,this.opacity)},rgb:function(){var n=(this.l+16)/116,t=isNaN(this.a)?n:n+this.a/500,e=isNaN(this.b)?n:n-this.b/200;return n=j*u(n),t=p*u(t),e=v*u(e),new m.b(c(3.2404542*t-1.5371385*n-.4985314*e),c(-.969266*t+1.8760108*n+.041556*e),c(.0556434*t-.2040259*n+1.0572252*e),this.opacity)}})),Object(h.a)(f,l,Object(h.b)(m.a,{brighter:function(n){return new f(this.h,this.c,this.l+18*(null==n?1:n),this.opacity)},darker:function(n){return new f(this.h,this.c,this.l-18*(null==n?1:n),this.opacity)},rgb:function(){return r(this).rgb()}}))},"./node_modules/d3-color/src/math.js":function(n,t,e){"use strict";e.d(t,"a",function(){return r}),e.d(t,"b",function(){return o});var r=Math.PI/180,o=180/Math.PI},"./node_modules/d3-dispatch/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-dispatch/src/dispatch.js");e.d(t,"a",function(){return r.a})},"./node_modules/d3-dispatch/src/dispatch.js":function(n,t,e){"use strict";function r(){for(var n,t=0,e=arguments.length,r={};t<e;++t){if(!(n=arguments[t]+"")||n in r)throw new Error("illegal type: "+n);r[n]=[]}return new o(r)}function o(n){this._=n}function i(n,t){return n.trim().split(/^|\s+/).map(function(n){var e="",r=n.indexOf(".");if(r>=0&&(e=n.slice(r+1),n=n.slice(0,r)),n&&!t.hasOwnProperty(n))throw new Error("unknown type: "+n);return{type:n,name:e}})}function s(n,t){for(var e,r=0,o=n.length;r<o;++r)if((e=n[r]).name===t)return e.value}function u(n,t,e){for(var r=0,o=n.length;r<o;++r)if(n[r].name===t){n[r]=c,n=n.slice(0,r).concat(n.slice(r+1));break}return null!=e&&n.push({name:t,value:e}),n}var c={value:function(){}};o.prototype=r.prototype={constructor:o,on:function(n,t){var e,r=this._,o=i(n+"",r),c=-1,a=o.length;{if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++c<a;)if(e=(n=o[c]).type)r[e]=u(r[e],n.name,t);else if(null==t)for(e in r)r[e]=u(r[e],n.name,null);return this}for(;++c<a;)if((e=(n=o[c]).type)&&(e=s(r[e],n.name)))return e}},copy:function(){var n={},t=this._;for(var e in t)n[e]=t[e].slice();return new o(n)},call:function(n,t){if((e=arguments.length-2)>0)for(var e,r,o=new Array(e),i=0;i<e;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(n))throw new Error("unknown type: "+n);for(r=this._[n],i=0,e=r.length;i<e;++i)r[i].value.apply(t,o)},apply:function(n,t,e){if(!this._.hasOwnProperty(n))throw new Error("unknown type: "+n);for(var r=this._[n],o=0,i=r.length;o<i;++o)r[o].value.apply(t,e)}},t.a=r},"./node_modules/d3-drag/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-drag/src/drag.js");e.d(t,"a",function(){return r.a});var o=e("./node_modules/d3-drag/src/nodrag.js");e.d(t,"b",function(){return o.a}),e.d(t,"c",function(){return o.b})},"./node_modules/d3-drag/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-drag/src/drag.js":function(n,t,e){"use strict";function r(){return!c.d.button}function o(){return this.parentNode}function i(n){return null==n?{x:c.d.x,y:c.d.y}:n}function s(){return"ontouchstart"in this}var u=e("./node_modules/d3-dispatch/index.js"),c=e("./node_modules/d3-selection/index.js"),a=e("./node_modules/d3-drag/src/nodrag.js"),d=e("./node_modules/d3-drag/src/noevent.js"),l=e("./node_modules/d3-drag/src/constant.js"),f=e("./node_modules/d3-drag/src/event.js");t.a=function(){function n(n){n.on("mousedown.drag",t).filter(M).on("touchstart.drag",m).on("touchmove.drag",_).on("touchend.drag touchcancel.drag",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function t(){if(!y&&x.apply(this,arguments)){var n=j("mouse",O.apply(this,arguments),c.g,this,arguments);n&&(Object(c.j)(c.d.view).on("mousemove.drag",e,!0).on("mouseup.drag",h,!0),Object(a.a)(c.d.view),Object(d.b)(),g=!1,v=c.d.clientX,b=c.d.clientY,n("start"))}}function e(){if(Object(d.a)(),!g){var n=c.d.clientX-v,t=c.d.clientY-b;g=n*n+t*t>N}k.mouse("drag")}function h(){Object(c.j)(c.d.view).on("mousemove.drag mouseup.drag",null),Object(a.b)(c.d.view,g),Object(d.a)(),k.mouse("end")}function m(){if(x.apply(this,arguments)){var n,t,e=c.d.changedTouches,r=O.apply(this,arguments),o=e.length;for(n=0;n<o;++n)(t=j(e[n].identifier,r,c.p,this,arguments))&&(Object(d.b)(),t("start"))}}function _(){var n,t,e=c.d.changedTouches,r=e.length;for(n=0;n<r;++n)(t=k[e[n].identifier])&&(Object(d.a)(),t("drag"))}function p(){var n,t,e=c.d.changedTouches,r=e.length;for(y&&clearTimeout(y),y=setTimeout(function(){y=null},500),n=0;n<r;++n)(t=k[e[n].identifier])&&(Object(d.b)(),t("end"))}function j(t,e,r,o,i){var s,u,a,d=r(e,t),l=T.copy();if(Object(c.c)(new f.a(n,"beforestart",s,t,E,d[0],d[1],0,0,l),function(){return null!=(c.d.subject=s=w.apply(o,i))&&(u=s.x-d[0]||0,a=s.y-d[1]||0,!0)}))return function h(m){var _,p=d;switch(m){case"start":k[t]=h,_=E++;break;case"end":delete k[t],--E;case"drag":d=r(e,t),_=E}Object(c.c)(new f.a(n,m,s,t,_,d[0]+u,d[1]+a,d[0]-p[0],d[1]-p[1],l),l.apply,l,[m,o,i])}}var v,b,g,y,x=r,O=o,w=i,M=s,k={},T=Object(u.a)("start","drag","end"),E=0,N=0;return n.filter=function(t){return arguments.length?(x="function"==typeof t?t:Object(l.a)(!!t),n):x},n.container=function(t){return arguments.length?(O="function"==typeof t?t:Object(l.a)(t),n):O},n.subject=function(t){return arguments.length?(w="function"==typeof t?t:Object(l.a)(t),n):w},n.touchable=function(t){return arguments.length?(M="function"==typeof t?t:Object(l.a)(!!t),n):M},n.on=function(){var t=T.on.apply(T,arguments);return t===T?n:t},n.clickDistance=function(t){return arguments.length?(N=(t=+t)*t,n):Math.sqrt(N)},n}},"./node_modules/d3-drag/src/event.js":function(n,t,e){"use strict";function r(n,t,e,r,o,i,s,u,c,a){this.target=n,this.type=t,this.subject=e,this.identifier=r,this.active=o,this.x=i,this.y=s,this.dx=u,this.dy=c,this._=a}t.a=r,r.prototype.on=function(){var n=this._.on.apply(this._,arguments);return n===this._?this:n}},"./node_modules/d3-drag/src/nodrag.js":function(n,t,e){"use strict";function r(n,t){var e=n.document.documentElement,r=Object(o.j)(n).on("dragstart.drag",null);t&&(r.on("click.drag",i.a,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}t.b=r;var o=e("./node_modules/d3-selection/index.js"),i=e("./node_modules/d3-drag/src/noevent.js");t.a=function(n){var t=n.document.documentElement,e=Object(o.j)(n).on("dragstart.drag",i.a,!0);"onselectstart"in t?e.on("selectstart.drag",i.a,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")}},"./node_modules/d3-drag/src/noevent.js":function(n,t,e){"use strict";function r(){o.d.stopImmediatePropagation()}t.b=r;var o=e("./node_modules/d3-selection/index.js");t.a=function(){o.d.preventDefault(),o.d.stopImmediatePropagation()}},"./node_modules/d3-dsv/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-dsv/src/dsv.js");e.d(t,"e",function(){return r.a});var o=e("./node_modules/d3-dsv/src/csv.js");e.d(t,"c",function(){return o.c}),e.d(t,"d",function(){return o.d}),e.d(t,"a",function(){return o.a}),e.d(t,"b",function(){return o.b});var i=e("./node_modules/d3-dsv/src/tsv.js");e.d(t,"h",function(){return i.c}),e.d(t,"i",function(){return i.d}),e.d(t,"f",function(){return i.a}),e.d(t,"g",function(){return i.b})},"./node_modules/d3-dsv/src/csv.js":function(n,t,e){"use strict";e.d(t,"c",function(){return i}),e.d(t,"d",function(){return s}),e.d(t,"a",function(){return u}),e.d(t,"b",function(){return c});var r=e("./node_modules/d3-dsv/src/dsv.js"),o=Object(r.a)(","),i=o.parse,s=o.parseRows,u=o.format,c=o.formatRows},"./node_modules/d3-dsv/src/dsv.js":function(n,t,e){"use strict";function r(n){return new Function("d","return {"+n.map(function(n,t){return JSON.stringify(n)+": d["+t+"]"}).join(",")+"}")}function o(n,t){var e=r(n);return function(r,o){return t(e(r),o,n)}}function i(n){var t=Object.create(null),e=[];return n.forEach(function(n){for(var r in n)r in t||e.push(t[r]=r)}),e}var s={},u={},c=34,a=10,d=13;t.a=function(n){function t(n,t){var i,s,u=e(n,function(n,e){if(i)return i(n,e-1);s=n,i=t?o(n,t):r(n)});return u.columns=s||[],u}function e(n,t){function e(){if(h)return u;if(m)return m=!1,s;var t,e,r=l;if(n.charCodeAt(r)===c){for(;l++<i&&n.charCodeAt(l)!==c||n.charCodeAt(++l)===c;);return(t=l)>=i?h=!0:(e=n.charCodeAt(l++))===a?m=!0:e===d&&(m=!0,n.charCodeAt(l)===a&&++l),n.slice(r+1,t-1).replace(/""/g,'"')}for(;l<i;){if((e=n.charCodeAt(t=l++))===a)m=!0;else if(e===d)m=!0,n.charCodeAt(l)===a&&++l;else if(e!==p)continue;return n.slice(r,t)}return h=!0,n.slice(r,i)}var r,o=[],i=n.length,l=0,f=0,h=i<=0,m=!1;for(n.charCodeAt(i-1)===a&&--i,n.charCodeAt(i-1)===d&&--i;(r=e())!==u;){for(var _=[];r!==s&&r!==u;)_.push(r),r=e();t&&null==(_=t(_,f++))||o.push(_)}return o}function l(t,e){return null==e&&(e=i(t)),[e.map(m).join(n)].concat(t.map(function(t){return e.map(function(n){return m(t[n])}).join(n)})).join("\n")}function f(n){return n.map(h).join("\n")}function h(t){return t.map(m).join(n)}function m(n){return null==n?"":_.test(n+="")?'"'+n.replace(/"/g,'""')+'"':n}var _=new RegExp('["'+n+"\n\r]"),p=n.charCodeAt(0);return{parse:t,parseRows:e,format:l,formatRows:f}}},"./node_modules/d3-dsv/src/tsv.js":function(n,t,e){"use strict";e.d(t,"c",function(){return i}),e.d(t,"d",function(){return s}),e.d(t,"a",function(){return u}),e.d(t,"b",function(){return c});var r=e("./node_modules/d3-dsv/src/dsv.js"),o=Object(r.a)("\t"),i=o.parse,s=o.parseRows,u=o.format,c=o.formatRows},"./node_modules/d3-ease/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-ease/src/linear.js");e.d(t,"y",function(){return r.a});var o=e("./node_modules/d3-ease/src/quad.js");e.d(t,"D",function(){return o.b}),e.d(t,"E",function(){return o.a}),e.d(t,"G",function(){return o.c}),e.d(t,"F",function(){return o.b});var i=e("./node_modules/d3-ease/src/cubic.js");e.d(t,"m",function(){return i.b}),e.d(t,"n",function(){return i.a}),e.d(t,"p",function(){return i.c}),e.d(t,"o",function(){return i.b});var s=e("./node_modules/d3-ease/src/poly.js");e.d(t,"z",function(){return s.b}),e.d(t,"A",function(){return s.a}),e.d(t,"C",function(){return s.c}),e.d(t,"B",function(){return s.b});var u=e("./node_modules/d3-ease/src/sin.js");e.d(t,"H",function(){return u.b}),e.d(t,"I",function(){return u.a}),e.d(t,"K",function(){return u.c}),e.d(t,"J",function(){return u.b});var c=e("./node_modules/d3-ease/src/exp.js");e.d(t,"u",function(){return c.b}),e.d(t,"v",function(){return c.a}),e.d(t,"x",function(){return c.c}),e.d(t,"w",function(){return c.b});var a=e("./node_modules/d3-ease/src/circle.js");e.d(t,"i",function(){return a.b}),e.d(t,"j",function(){return a.a}),e.d(t,"l",function(){return a.c}),e.d(t,"k",function(){return a.b});var d=e("./node_modules/d3-ease/src/bounce.js");e.d(t,"e",function(){return d.c}),e.d(t,"f",function(){return d.a}),e.d(t,"h",function(){return d.c}),e.d(t,"g",function(){return d.b});var l=e("./node_modules/d3-ease/src/back.js");e.d(t,"a",function(){return l.b}),e.d(t,"b",function(){return l.a}),e.d(t,"d",function(){return l.c}),e.d(t,"c",function(){return l.b});var f=e("./node_modules/d3-ease/src/elastic.js");e.d(t,"q",function(){return f.c}),e.d(t,"r",function(){return f.a}),e.d(t,"t",function(){return f.c}),e.d(t,"s",function(){return f.b})},"./node_modules/d3-ease/src/back.js":function(n,t,e){"use strict";e.d(t,"a",function(){return r}),e.d(t,"c",function(){return o}),e.d(t,"b",function(){return i});var r=function n(t){function e(n){return n*n*((t+1)*n-t)}return t=+t,e.overshoot=n,e}(1.70158),o=function n(t){function e(n){return--n*n*((t+1)*n+t)+1}return t=+t,e.overshoot=n,e}(1.70158),i=function n(t){function e(n){return((n*=2)<1?n*n*((t+1)*n-t):(n-=2)*n*((t+1)*n+t)+2)/2}return t=+t,e.overshoot=n,e}(1.70158)},"./node_modules/d3-ease/src/bounce.js":function(n,t,e){"use strict";function r(n){return 1-o(1-n)}function o(n){return(n=+n)<s?_*n*n:n<c?_*(n-=u)*n+a:n<l?_*(n-=d)*n+f:_*(n-=h)*n+m}function i(n){return((n*=2)<=1?1-o(1-n):o(n-1)+1)/2}t.a=r,t.c=o,t.b=i;var s=4/11,u=6/11,c=8/11,a=.75,d=9/11,l=10/11,f=.9375,h=21/22,m=63/64,_=1/s/s},"./node_modules/d3-ease/src/circle.js":function(n,t,e){"use strict";function r(n){return 1-Math.sqrt(1-n*n)}function o(n){return Math.sqrt(1- --n*n)}function i(n){return((n*=2)<=1?1-Math.sqrt(1-n*n):Math.sqrt(1-(n-=2)*n)+1)/2}t.a=r,t.c=o,t.b=i},"./node_modules/d3-ease/src/cubic.js":function(n,t,e){"use strict";function r(n){return n*n*n}function o(n){return--n*n*n+1}function i(n){return((n*=2)<=1?n*n*n:(n-=2)*n*n+2)/2}t.a=r,t.c=o,t.b=i},"./node_modules/d3-ease/src/elastic.js":function(n,t,e){"use strict";e.d(t,"a",function(){return o}),e.d(t,"c",function(){return i}),e.d(t,"b",function(){return s});var r=2*Math.PI,o=function n(t,e){function o(n){return t*Math.pow(2,10*--n)*Math.sin((i-n)/e)}var i=Math.asin(1/(t=Math.max(1,t)))*(e/=r);return o.amplitude=function(t){return n(t,e*r)},o.period=function(e){return n(t,e)},o}(1,.3),i=function n(t,e){function o(n){return 1-t*Math.pow(2,-10*(n=+n))*Math.sin((n+i)/e)}var i=Math.asin(1/(t=Math.max(1,t)))*(e/=r);return o.amplitude=function(t){return n(t,e*r)},o.period=function(e){return n(t,e)},o}(1,.3),s=function n(t,e){function o(n){return((n=2*n-1)<0?t*Math.pow(2,10*n)*Math.sin((i-n)/e):2-t*Math.pow(2,-10*n)*Math.sin((i+n)/e))/2}var i=Math.asin(1/(t=Math.max(1,t)))*(e/=r);return o.amplitude=function(t){return n(t,e*r)},o.period=function(e){return n(t,e)},o}(1,.3)},"./node_modules/d3-ease/src/exp.js":function(n,t,e){"use strict";function r(n){return Math.pow(2,10*n-10)}function o(n){return 1-Math.pow(2,-10*n)}function i(n){return((n*=2)<=1?Math.pow(2,10*n-10):2-Math.pow(2,10-10*n))/2}t.a=r,t.c=o,t.b=i},"./node_modules/d3-ease/src/linear.js":function(n,t,e){"use strict";function r(n){return+n}t.a=r},"./node_modules/d3-ease/src/poly.js":function(n,t,e){"use strict";e.d(t,"a",function(){return r}),e.d(t,"c",function(){return o}),e.d(t,"b",function(){return i});var r=function n(t){function e(n){return Math.pow(n,t)}return t=+t,e.exponent=n,e}(3),o=function n(t){function e(n){return 1-Math.pow(1-n,t)}return t=+t,e.exponent=n,e}(3),i=function n(t){function e(n){return((n*=2)<=1?Math.pow(n,t):2-Math.pow(2-n,t))/2}return t=+t,e.exponent=n,e}(3)},"./node_modules/d3-ease/src/quad.js":function(n,t,e){"use strict";function r(n){return n*n}function o(n){return n*(2-n)}function i(n){return((n*=2)<=1?n*n:--n*(2-n)+1)/2}t.a=r,t.c=o,t.b=i},"./node_modules/d3-ease/src/sin.js":function(n,t,e){"use strict";function r(n){return 1-Math.cos(n*u)}function o(n){return Math.sin(n*u)}function i(n){return(1-Math.cos(s*n))/2}t.a=r,t.c=o,t.b=i;var s=Math.PI,u=s/2},"./node_modules/d3-force/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-force/src/center.js");e.d(t,"a",function(){return r.a});var o=e("./node_modules/d3-force/src/collide.js");e.d(t,"b",function(){return o.a});var i=e("./node_modules/d3-force/src/link.js");e.d(t,"c",function(){return i.a});var s=e("./node_modules/d3-force/src/manyBody.js");e.d(t,"d",function(){return s.a});var u=e("./node_modules/d3-force/src/radial.js");e.d(t,"e",function(){return u.a});var c=e("./node_modules/d3-force/src/simulation.js");e.d(t,"f",function(){return c.a});var a=e("./node_modules/d3-force/src/x.js");e.d(t,"g",function(){return a.a});var d=e("./node_modules/d3-force/src/y.js");e.d(t,"h",function(){return d.a})},"./node_modules/d3-force/src/center.js":function(n,t,e){"use strict";t.a=function(n,t){function e(){var e,o,i=r.length,s=0,u=0;for(e=0;e<i;++e)o=r[e],s+=o.x,u+=o.y;for(s=s/i-n,u=u/i-t,e=0;e<i;++e)o=r[e],o.x-=s,o.y-=u}var r;return null==n&&(n=0),null==t&&(t=0),e.initialize=function(n){r=n},e.x=function(t){return arguments.length?(n=+t,e):n},e.y=function(n){return arguments.length?(t=+n,e):t},e}},"./node_modules/d3-force/src/collide.js":function(n,t,e){"use strict";function r(n){return n.x+n.vx}function o(n){return n.y+n.vy}var i=e("./node_modules/d3-force/src/constant.js"),s=e("./node_modules/d3-force/src/jiggle.js"),u=e("./node_modules/d3-quadtree/index.js");t.a=function(n){function t(){function n(n,t,e,r,o){var i=n.data,u=n.r,a=_+u;{if(!i)return t>h+a||r<h-a||e>m+a||o<m-a;if(i.index>c.index){var d=h-i.x-i.vx,f=m-i.y-i.vy,j=d*d+f*f;j<a*a&&(0===d&&(d=Object(s.a)(),j+=d*d),0===f&&(f=Object(s.a)(),j+=f*f),j=(a-(j=Math.sqrt(j)))/j*l,c.vx+=(d*=j)*(a=(u*=u)/(p+u)),c.vy+=(f*=j)*a,i.vx-=d*(a=1-a),i.vy-=f*a)}}}for(var t,i,c,h,m,_,p,j=a.length,v=0;v<f;++v)for(i=Object(u.a)(a,r,o).visitAfter(e),t=0;t<j;++t)c=a[t],_=d[c.index],p=_*_,h=c.x+c.vx,m=c.y+c.vy,i.visit(n)}function e(n){if(n.data)return n.r=d[n.data.index];for(var t=n.r=0;t<4;++t)n[t]&&n[t].r>n.r&&(n.r=n[t].r)}function c(){if(a){var t,e,r=a.length;for(d=new Array(r),t=0;t<r;++t)e=a[t],d[e.index]=+n(e,t,a)}}var a,d,l=1,f=1;return"function"!=typeof n&&(n=Object(i.a)(null==n?1:+n)),t.initialize=function(n){a=n,c()},t.iterations=function(n){return arguments.length?(f=+n,t):f},t.strength=function(n){return arguments.length?(l=+n,t):l},t.radius=function(e){return arguments.length?(n="function"==typeof e?e:Object(i.a)(+e),c(),t):n},t}},"./node_modules/d3-force/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-force/src/jiggle.js":function(n,t,e){"use strict";t.a=function(){return 1e-6*(Math.random()-.5)}},"./node_modules/d3-force/src/link.js":function(n,t,e){"use strict";function r(n){return n.index}function o(n,t){var e=n.get(t);if(!e)throw new Error("missing: "+t);return e}var i=e("./node_modules/d3-force/src/constant.js"),s=e("./node_modules/d3-force/src/jiggle.js"),u=e("./node_modules/d3-collection/index.js");t.a=function(n){function t(n){return 1/Math.min(m[n.source.index],m[n.target.index])}function e(t){for(var e=0,r=n.length;e<b;++e)for(var o,i,u,c,a,d,h,m=0;m<r;++m)o=n[m],i=o.source,u=o.target,c=u.x+u.vx-i.x-i.vx||Object(s.a)(),a=u.y+u.vy-i.y-i.vy||Object(s.a)(),d=Math.sqrt(c*c+a*a),d=(d-f[m])/d*t*l[m],c*=d,a*=d,u.vx-=c*(h=_[m]),u.vy-=a*h,i.vx+=c*(h=1-h),i.vy+=a*h}function c(){if(h){var t,e,r=h.length,i=n.length,s=Object(u.c)(h,p);for(t=0,m=new Array(r);t<i;++t)e=n[t],e.index=t,"object"!=typeof e.source&&(e.source=o(s,e.source)),"object"!=typeof e.target&&(e.target=o(s,e.target)),m[e.source.index]=(m[e.source.index]||0)+1,m[e.target.index]=(m[e.target.index]||0)+1;for(t=0,_=new Array(i);t<i;++t)e=n[t],_[t]=m[e.source.index]/(m[e.source.index]+m[e.target.index]);l=new Array(i),a(),f=new Array(i),d()}}function a(){if(h)for(var t=0,e=n.length;t<e;++t)l[t]=+j(n[t],t,n)}function d(){if(h)for(var t=0,e=n.length;t<e;++t)f[t]=+v(n[t],t,n)}var l,f,h,m,_,p=r,j=t,v=Object(i.a)(30),b=1;return null==n&&(n=[]),e.initialize=function(n){h=n,c()},e.links=function(t){return arguments.length?(n=t,c(),e):n},e.id=function(n){return arguments.length?(p=n,e):p},e.iterations=function(n){return arguments.length?(b=+n,e):b},e.strength=function(n){return arguments.length?(j="function"==typeof n?n:Object(i.a)(+n),a(),e):j},e.distance=function(n){return arguments.length?(v="function"==typeof n?n:Object(i.a)(+n),d(),e):v},e}},"./node_modules/d3-force/src/manyBody.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-force/src/constant.js"),o=e("./node_modules/d3-force/src/jiggle.js"),i=e("./node_modules/d3-quadtree/index.js"),s=e("./node_modules/d3-force/src/simulation.js");t.a=function(){function n(n){var t,r=c.length,o=Object(i.a)(c,s.b,s.c).visitAfter(e);for(d=n,t=0;t<r;++t)a=c[t],o.visit(u)}function t(){if(c){var n,t,e=c.length;for(l=new Array(e),n=0;n<e;++n)t=c[n],l[t.index]=+f(t,n,c)}}function e(n){var t,e,r,o,i,s=0,u=0;if(n.length){for(r=o=i=0;i<4;++i)(t=n[i])&&(e=Math.abs(t.value))&&(s+=t.value,u+=e,r+=e*t.x,o+=e*t.y);n.x=r/u,n.y=o/u}else{t=n,t.x=t.data.x,t.y=t.data.y;do{s+=l[t.data.index]}while(t=t.next)}n.value=s}function u(n,t,e,r){if(!n.value)return!0;var i=n.x-a.x,s=n.y-a.y,u=r-t,c=i*i+s*s;if(u*u/_<c)return c<m&&(0===i&&(i=Object(o.a)(),c+=i*i),0===s&&(s=Object(o.a)(),c+=s*s),c<h&&(c=Math.sqrt(h*c)),a.vx+=i*n.value*d/c,a.vy+=s*n.value*d/c),!0;if(!(n.length||c>=m)){(n.data!==a||n.next)&&(0===i&&(i=Object(o.a)(),c+=i*i),0===s&&(s=Object(o.a)(),c+=s*s),c<h&&(c=Math.sqrt(h*c)));do{n.data!==a&&(u=l[n.data.index]*d/c,a.vx+=i*u,a.vy+=s*u)}while(n=n.next)}}var c,a,d,l,f=Object(r.a)(-30),h=1,m=1/0,_=.81;return n.initialize=function(n){c=n,t()},n.strength=function(e){return arguments.length?(f="function"==typeof e?e:Object(r.a)(+e),t(),n):f},n.distanceMin=function(t){return arguments.length?(h=t*t,n):Math.sqrt(h)},n.distanceMax=function(t){return arguments.length?(m=t*t,n):Math.sqrt(m)},n.theta=function(t){return arguments.length?(_=t*t,n):Math.sqrt(_)},n}},"./node_modules/d3-force/src/radial.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-force/src/constant.js");t.a=function(n,t,e){function o(n){for(var r=0,o=s.length;r<o;++r){var i=s[r],a=i.x-t||1e-6,d=i.y-e||1e-6,l=Math.sqrt(a*a+d*d),f=(c[r]-l)*u[r]*n/l;i.vx+=a*f,i.vy+=d*f}}function i(){if(s){var t,e=s.length;for(u=new Array(e),c=new Array(e),t=0;t<e;++t)c[t]=+n(s[t],t,s),u[t]=isNaN(c[t])?0:+a(s[t],t,s)}}var s,u,c,a=Object(r.a)(.1);return"function"!=typeof n&&(n=Object(r.a)(+n)),null==t&&(t=0),null==e&&(e=0),o.initialize=function(n){s=n,i()},o.strength=function(n){return arguments.length?(a="function"==typeof n?n:Object(r.a)(+n),i(),o):a},o.radius=function(t){return arguments.length?(n="function"==typeof t?t:Object(r.a)(+t),i(),o):n},o.x=function(n){return arguments.length?(t=+n,o):t},o.y=function(n){return arguments.length?(e=+n,o):e},o}},"./node_modules/d3-force/src/simulation.js":function(n,t,e){"use strict";function r(n){return n.x}function o(n){return n.y}t.b=r,t.c=o;var i=e("./node_modules/d3-dispatch/index.js"),s=e("./node_modules/d3-collection/index.js"),u=e("./node_modules/d3-timer/index.js"),c=Math.PI*(3-Math.sqrt(5));t.a=function(n){function t(){e(),j.call("tick",a),d<l&&(p.stop(),j.call("end",a))}function e(){var t,e,r=n.length;for(d+=(h-d)*f,_.each(function(n){n(d)}),t=0;t<r;++t)e=n[t],null==e.fx?e.x+=e.vx*=m:(e.x=e.fx,e.vx=0),null==e.fy?e.y+=e.vy*=m:(e.y=e.fy,e.vy=0)}function r(){for(var t,e=0,r=n.length;e<r;++e){if(t=n[e],t.index=e,isNaN(t.x)||isNaN(t.y)){var o=10*Math.sqrt(e),i=e*c;t.x=o*Math.cos(i),t.y=o*Math.sin(i)}(isNaN(t.vx)||isNaN(t.vy))&&(t.vx=t.vy=0)}}function o(t){return t.initialize&&t.initialize(n),t}var a,d=1,l=.001,f=1-Math.pow(l,1/300),h=0,m=.6,_=Object(s.c)(),p=Object(u.d)(t),j=Object(i.a)("tick","end");return null==n&&(n=[]),r(),a={tick:e,restart:function(){return p.restart(t),a},stop:function(){return p.stop(),a},nodes:function(t){return arguments.length?(n=t,r(),_.each(o),a):n},alpha:function(n){return arguments.length?(d=+n,a):d},alphaMin:function(n){return arguments.length?(l=+n,a):l},alphaDecay:function(n){return arguments.length?(f=+n,a):+f},alphaTarget:function(n){return arguments.length?(h=+n,a):h},velocityDecay:function(n){return arguments.length?(m=1-n,a):1-m},force:function(n,t){return arguments.length>1?(null==t?_.remove(n):_.set(n,o(t)),a):_.get(n)},find:function(t,e,r){var o,i,s,u,c,a=0,d=n.length;for(null==r?r=1/0:r*=r,a=0;a<d;++a)u=n[a],o=t-u.x,i=e-u.y,(s=o*o+i*i)<r&&(c=u,r=s);return c},on:function(n,t){return arguments.length>1?(j.on(n,t),a):j.on(n)}}}},"./node_modules/d3-force/src/x.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-force/src/constant.js");t.a=function(n){function t(n){for(var t,e=0,r=o.length;e<r;++e)t=o[e],t.vx+=(s[e]-t.x)*i[e]*n}function e(){if(o){var t,e=o.length;for(i=new Array(e),s=new Array(e),t=0;t<e;++t)i[t]=isNaN(s[t]=+n(o[t],t,o))?0:+u(o[t],t,o)}}var o,i,s,u=Object(r.a)(.1);return"function"!=typeof n&&(n=Object(r.a)(null==n?0:+n)),t.initialize=function(n){o=n,e()},t.strength=function(n){return arguments.length?(u="function"==typeof n?n:Object(r.a)(+n),e(),t):u},t.x=function(o){return arguments.length?(n="function"==typeof o?o:Object(r.a)(+o),e(),t):n},t}},"./node_modules/d3-force/src/y.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-force/src/constant.js");t.a=function(n){function t(n){for(var t,e=0,r=o.length;e<r;++e)t=o[e],t.vy+=(s[e]-t.y)*i[e]*n}function e(){if(o){var t,e=o.length;for(i=new Array(e),s=new Array(e),t=0;t<e;++t)i[t]=isNaN(s[t]=+n(o[t],t,o))?0:+u(o[t],t,o)}}var o,i,s,u=Object(r.a)(.1);return"function"!=typeof n&&(n=Object(r.a)(null==n?0:+n)),t.initialize=function(n){o=n,e()},t.strength=function(n){return arguments.length?(u="function"==typeof n?n:Object(r.a)(+n),e(),t):u},t.y=function(o){return arguments.length?(n="function"==typeof o?o:Object(r.a)(+o),e(),t):n},t}},"./node_modules/d3-format/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-format/src/defaultLocale.js");e.d(t,"b",function(){return r.a}),e.d(t,"a",function(){return r.b}),e.d(t,"d",function(){return r.c});var o=e("./node_modules/d3-format/src/locale.js");e.d(t,"c",function(){return o.a});var i=e("./node_modules/d3-format/src/formatSpecifier.js");e.d(t,"e",function(){return i.a});var s=e("./node_modules/d3-format/src/precisionFixed.js");e.d(t,"f",function(){return s.a});var u=e("./node_modules/d3-format/src/precisionPrefix.js");e.d(t,"g",function(){return u.a});var c=e("./node_modules/d3-format/src/precisionRound.js");e.d(t,"h",function(){return c.a})},"./node_modules/d3-format/src/defaultLocale.js":function(n,t,e){"use strict";function r(n){return o=Object(u.a)(n),i=o.format,s=o.formatPrefix,o}e.d(t,"b",function(){return i}),e.d(t,"c",function(){return s}),t.a=r;var o,i,s,u=e("./node_modules/d3-format/src/locale.js");r({decimal:".",thousands:",",grouping:[3],currency:["$",""]})},"./node_modules/d3-format/src/exponent.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-format/src/formatDecimal.js");t.a=function(n){return n=Object(r.a)(Math.abs(n)),n?n[1]:NaN}},"./node_modules/d3-format/src/formatDecimal.js":function(n,t,e){"use strict";t.a=function(n,t){if((e=(n=t?n.toExponential(t-1):n.toExponential()).indexOf("e"))<0)return null;var e,r=n.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+n.slice(e+1)]}},"./node_modules/d3-format/src/formatDefault.js":function(n,t,e){"use strict";t.a=function(n,t){n=n.toPrecision(t);n:for(var e,r=n.length,o=1,i=-1;o<r;++o)switch(n[o]){case".":i=e=o;break;case"0":0===i&&(i=o),e=o;break;case"e":break n;default:i>0&&(i=0)}return i>0?n.slice(0,i)+n.slice(e+1):n}},"./node_modules/d3-format/src/formatGroup.js":function(n,t,e){"use strict";t.a=function(n,t){return function(e,r){for(var o=e.length,i=[],s=0,u=n[0],c=0;o>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),i.push(e.substring(o-=u,o+u)),!((c+=u+1)>r));)u=n[s=(s+1)%n.length];return i.reverse().join(t)}}},"./node_modules/d3-format/src/formatNumerals.js":function(n,t,e){"use strict";t.a=function(n){return function(t){return t.replace(/[0-9]/g,function(t){return n[+t]})}}},"./node_modules/d3-format/src/formatPrefixAuto.js":function(n,t,e){"use strict";e.d(t,"b",function(){return r});var r,o=e("./node_modules/d3-format/src/formatDecimal.js");t.a=function(n,t){var e=Object(o.a)(n,t);if(!e)return n+"";var i=e[0],s=e[1],u=s-(r=3*Math.max(-8,Math.min(8,Math.floor(s/3))))+1,c=i.length;return u===c?i:u>c?i+new Array(u-c+1).join("0"):u>0?i.slice(0,u)+"."+i.slice(u):"0."+new Array(1-u).join("0")+Object(o.a)(n,Math.max(0,t+u-1))[0]}},"./node_modules/d3-format/src/formatRounded.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-format/src/formatDecimal.js");t.a=function(n,t){var e=Object(r.a)(n,t);if(!e)return n+"";var o=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+o:o.length>i+1?o.slice(0,i+1)+"."+o.slice(i+1):o+new Array(i-o.length+2).join("0")}},"./node_modules/d3-format/src/formatSpecifier.js":function(n,t,e){"use strict";function r(n){return new o(n)}function o(n){if(!(t=s.exec(n)))throw new Error("invalid format: "+n);var t,e=t[1]||" ",r=t[2]||">",o=t[3]||"-",u=t[4]||"",c=!!t[5],a=t[6]&&+t[6],d=!!t[7],l=t[8]&&+t[8].slice(1),f=t[9]||"";"n"===f?(d=!0,f="g"):i.a[f]||(f=""),(c||"0"===e&&"="===r)&&(c=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=o,this.symbol=u,this.zero=c,this.width=a,this.comma=d,this.precision=l,this.type=f}t.a=r;var i=e("./node_modules/d3-format/src/formatTypes.js"),s=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;r.prototype=o.prototype,o.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type}},"./node_modules/d3-format/src/formatTypes.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-format/src/formatDefault.js"),o=e("./node_modules/d3-format/src/formatPrefixAuto.js"),i=e("./node_modules/d3-format/src/formatRounded.js");t.a={"":r.a,"%":function(n,t){return(100*n).toFixed(t)},b:function(n){return Math.round(n).toString(2)},c:function(n){return n+""},d:function(n){return Math.round(n).toString(10)},e:function(n,t){return n.toExponential(t)},f:function(n,t){return n.toFixed(t)},g:function(n,t){return n.toPrecision(t)},o:function(n){return Math.round(n).toString(8)},p:function(n,t){return Object(i.a)(100*n,t)},r:i.a,s:o.a,X:function(n){return Math.round(n).toString(16).toUpperCase()},x:function(n){return Math.round(n).toString(16)}}},"./node_modules/d3-format/src/identity.js":function(n,t,e){"use strict";t.a=function(n){return n}},"./node_modules/d3-format/src/locale.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-format/src/exponent.js"),o=e("./node_modules/d3-format/src/formatGroup.js"),i=e("./node_modules/d3-format/src/formatNumerals.js"),s=e("./node_modules/d3-format/src/formatSpecifier.js"),u=e("./node_modules/d3-format/src/formatTypes.js"),c=e("./node_modules/d3-format/src/formatPrefixAuto.js"),a=e("./node_modules/d3-format/src/identity.js"),d=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];t.a=function(n){function t(n){function t(n){var t,i,s,u=g,f=y;if("c"===b)f=x(n)+f,n="";else{n=+n;var _=n<0;if(n=x(Math.abs(n),v),_&&0==+n&&(_=!1),u=(_?"("===o?o:"-":"-"===o||"("===o?"":o)+u,f=f+("s"===b?d[8+c.b/3]:"")+(_&&"("===o?")":""),O)for(t=-1,i=n.length;++t<i;)if(48>(s=n.charCodeAt(t))||s>57){f=(46===s?h+n.slice(t+1):n.slice(t))+f,n=n.slice(0,t);break}}j&&!a&&(n=l(n,1/0));var w=u.length+n.length+f.length,M=w<p?new Array(p-w+1).join(e):"";switch(j&&a&&(n=l(M+n,M.length?p-f.length:1/0),M=""),r){case"<":n=u+n+f+M;break;case"=":n=u+M+n+f;break;case"^":n=M.slice(0,w=M.length>>1)+u+n+f+M.slice(w);break;default:n=M+u+n+f}return m(n)}n=Object(s.a)(n);var e=n.fill,r=n.align,o=n.sign,i=n.symbol,a=n.zero,p=n.width,j=n.comma,v=n.precision,b=n.type,g="$"===i?f[0]:"#"===i&&/[boxX]/.test(b)?"0"+b.toLowerCase():"",y="$"===i?f[1]:/[%p]/.test(b)?_:"",x=u.a[b],O=!b||/[defgprs%]/.test(b);return v=null==v?b?6:12:/[gprs]/.test(b)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),t.toString=function(){return n+""},t}function e(n,e){var o=t((n=Object(s.a)(n),n.type="f",n)),i=3*Math.max(-8,Math.min(8,Math.floor(Object(r.a)(e)/3))),u=Math.pow(10,-i),c=d[8+i/3];return function(n){return o(u*n)+c}}var l=n.grouping&&n.thousands?Object(o.a)(n.grouping,n.thousands):a.a,f=n.currency,h=n.decimal,m=n.numerals?Object(i.a)(n.numerals):a.a,_=n.percent||"%";return{format:t,formatPrefix:e}}},"./node_modules/d3-format/src/precisionFixed.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-format/src/exponent.js");t.a=function(n){return Math.max(0,-Object(r.a)(Math.abs(n)))}},"./node_modules/d3-format/src/precisionPrefix.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-format/src/exponent.js");t.a=function(n,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Object(r.a)(t)/3)))-Object(r.a)(Math.abs(n)))}},"./node_modules/d3-format/src/precisionRound.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-format/src/exponent.js");t.a=function(n,t){return n=Math.abs(n),t=Math.abs(t)-n,Math.max(0,Object(r.a)(t)-Object(r.a)(n))+1}},"./node_modules/d3-geo/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-geo/src/area.js");e.d(t,"c",function(){return r.c});var o=e("./node_modules/d3-geo/src/bounds.js");e.d(t,"h",function(){return o.a});var i=e("./node_modules/d3-geo/src/centroid.js");e.d(t,"i",function(){return i.a});var s=e("./node_modules/d3-geo/src/circle.js");e.d(t,"j",function(){return s.b});var u=e("./node_modules/d3-geo/src/clip/antimeridian.js");e.d(t,"k",function(){return u.a});var c=e("./node_modules/d3-geo/src/clip/circle.js");e.d(t,"l",function(){return c.a});var a=e("./node_modules/d3-geo/src/clip/extent.js");e.d(t,"m",function(){return a.a});var d=e("./node_modules/d3-geo/src/clip/rectangle.js");e.d(t,"n",function(){return d.a});var l=e("./node_modules/d3-geo/src/contains.js");e.d(t,"u",function(){return l.a});var f=e("./node_modules/d3-geo/src/distance.js");e.d(t,"v",function(){return f.a});var h=e("./node_modules/d3-geo/src/graticule.js");e.d(t,"A",function(){return h.a}),e.d(t,"B",function(){return h.b});var m=e("./node_modules/d3-geo/src/interpolate.js");e.d(t,"D",function(){return m.a});var _=e("./node_modules/d3-geo/src/length.js");e.d(t,"E",function(){return _.a});var p=e("./node_modules/d3-geo/src/path/index.js");e.d(t,"L",function(){return p.a});var j=e("./node_modules/d3-geo/src/projection/albers.js");e.d(t,"a",function(){return j.a});var v=e("./node_modules/d3-geo/src/projection/albersUsa.js");e.d(t,"b",function(){return v.a});var b=e("./node_modules/d3-geo/src/projection/azimuthalEqualArea.js");e.d(t,"d",function(){return b.b}),e.d(t,"e",function(){return b.a});var g=e("./node_modules/d3-geo/src/projection/azimuthalEquidistant.js");e.d(t,"f",function(){return g.b}),e.d(t,"g",function(){return g.a});var y=e("./node_modules/d3-geo/src/projection/conicConformal.js");e.d(t,"o",function(){return y.b}),e.d(t,"p",function(){return y.a});var x=e("./node_modules/d3-geo/src/projection/conicEqualArea.js");e.d(t,"q",function(){return x.b}),e.d(t,"r",function(){return x.a});var O=e("./node_modules/d3-geo/src/projection/conicEquidistant.js");e.d(t,"s",function(){return O.b}),e.d(t,"t",function(){return O.a});var w=e("./node_modules/d3-geo/src/projection/equirectangular.js");e.d(t,"w",function(){return w.a}),e.d(t,"x",function(){return w.b});var M=e("./node_modules/d3-geo/src/projection/gnomonic.js");e.d(t,"y",function(){return M.a}),e.d(t,"z",function(){return M.b});var k=e("./node_modules/d3-geo/src/projection/identity.js");e.d(t,"C",function(){return k.a});var T=e("./node_modules/d3-geo/src/projection/index.js");e.d(t,"M",function(){return T.a}),e.d(t,"N",function(){return T.b});var E=e("./node_modules/d3-geo/src/projection/mercator.js");e.d(t,"F",function(){return E.a}),e.d(t,"G",function(){return E.c});var N=e("./node_modules/d3-geo/src/projection/naturalEarth1.js");e.d(t,"H",function(){return N.a}),e.d(t,"I",function(){return N.b});var A=e("./node_modules/d3-geo/src/projection/orthographic.js");e.d(t,"J",function(){return A.a}),e.d(t,"K",function(){return A.b});var C=e("./node_modules/d3-geo/src/projection/stereographic.js");e.d(t,"P",function(){return C.a}),e.d(t,"Q",function(){return C.b});var S=e("./node_modules/d3-geo/src/projection/transverseMercator.js");e.d(t,"T",function(){return S.a}),e.d(t,"U",function(){return S.b});var q=e("./node_modules/d3-geo/src/rotation.js");e.d(t,"O",function(){return q.a});var z=e("./node_modules/d3-geo/src/stream.js");e.d(t,"R",function(){return z.a});var P=e("./node_modules/d3-geo/src/transform.js");e.d(t,"S",function(){return P.a})},"./node_modules/d3-geo/src/adder.js":function(n,t,e){"use strict";function r(){this.reset()}function o(n,t,e){var r=n.s=t+e,o=r-t,i=r-o;n.t=t-i+(e-o)}t.a=function(){return new r},r.prototype={constructor:r,reset:function(){this.s=this.t=0},add:function(n){o(i,n,this.t),o(this,i.s,this.s),this.s?this.t+=i.t:this.s=i.t},valueOf:function(){return this.s}};var i=new r},"./node_modules/d3-geo/src/area.js":function(n,t,e){"use strict";function r(){v.point=i}function o(){s(u,c)}function i(n,t){v.point=s,u=n,c=t,n*=h.r,t*=h.r,a=n,d=Object(h.g)(t=t/2+h.q),l=Object(h.t)(t)}function s(n,t){n*=h.r,t*=h.r,t=t/2+h.q;var e=n-a,r=e>=0?1:-1,o=r*e,i=Object(h.g)(t),s=Object(h.t)(t),u=l*s,c=d*i+u*Object(h.g)(o),f=u*r*Object(h.t)(o);p.add(Object(h.e)(f,c)),a=n,d=i,l=s}e.d(t,"a",function(){return p}),e.d(t,"b",function(){return v});var u,c,a,d,l,f=e("./node_modules/d3-geo/src/adder.js"),h=e("./node_modules/d3-geo/src/math.js"),m=e("./node_modules/d3-geo/src/noop.js"),_=e("./node_modules/d3-geo/src/stream.js"),p=Object(f.a)(),j=Object(f.a)(),v={point:m.a,lineStart:m.a,lineEnd:m.a,polygonStart:function(){p.reset(),v.lineStart=r,v.lineEnd=o},polygonEnd:function(){var n=+p;j.add(n<0?h.w+n:n),this.lineStart=this.lineEnd=this.point=m.a},sphere:function(){j.add(h.w)}};t.c=function(n){return j.reset(),Object(_.a)(n,v),2*j}},"./node_modules/d3-geo/src/bounds.js":function(n,t,e){"use strict";function r(n,t){y.push(x=[h=n,_=n]),t<m&&(m=t),t>p&&(p=t)}function o(n,t){var e=Object(M.a)([n*k.r,t*k.r]);if(g){var r=Object(M.c)(g,e),o=[r[1],-r[0],0],i=Object(M.c)(o,r);Object(M.e)(i),i=Object(M.g)(i);var s,u=n-j,c=u>0?1:-1,a=i[0]*k.h*c,l=Object(k.a)(u)>180;l^(c*j<a&&a<c*n)?(s=i[1]*k.h)>p&&(p=s):(a=(a+360)%360-180,l^(c*j<a&&a<c*n)?(s=-i[1]*k.h)<m&&(m=s):(t<m&&(m=t),t>p&&(p=t))),l?n<j?d(h,n)>d(h,_)&&(_=n):d(n,_)>d(h,_)&&(h=n):_>=h?(n<h&&(h=n),n>_&&(_=n)):n>j?d(h,n)>d(h,_)&&(_=n):d(n,_)>d(h,_)&&(h=n)}else y.push(x=[h=n,_=n]);t<m&&(m=t),t>p&&(p=t),g=e,j=n}function i(){N.point=o}function s(){x[0]=h,x[1]=_,N.point=r,g=null}function u(n,t){if(g){var e=n-j;E.add(Object(k.a)(e)>180?e+(e>0?360:-360):e)}else v=n,b=t;w.b.point(n,t),o(n,t)}function c(){w.b.lineStart()}function a(){u(v,b),w.b.lineEnd(),Object(k.a)(E)>k.i&&(h=-(_=180)),x[0]=h,x[1]=_,g=null}function d(n,t){return(t-=n)<0?t+360:t}function l(n,t){return n[0]-t[0]}function f(n,t){return n[0]<=n[1]?n[0]<=t&&t<=n[1]:t<n[0]||n[1]<t}var h,m,_,p,j,v,b,g,y,x,O=e("./node_modules/d3-geo/src/adder.js"),w=e("./node_modules/d3-geo/src/area.js"),M=e("./node_modules/d3-geo/src/cartesian.js"),k=e("./node_modules/d3-geo/src/math.js"),T=e("./node_modules/d3-geo/src/stream.js"),E=Object(O.a)(),N={point:r,lineStart:i,lineEnd:s,polygonStart:function(){N.point=u,N.lineStart=c,N.lineEnd=a,E.reset(),w.b.polygonStart()},polygonEnd:function(){w.b.polygonEnd(),N.point=r,N.lineStart=i,N.lineEnd=s,w.a<0?(h=-(_=180),m=-(p=90)):E>k.i?p=90:E<-k.i&&(m=-90),x[0]=h,x[1]=_}};t.a=function(n){var t,e,r,o,i,s,u;if(p=_=-(h=m=1/0),y=[],Object(T.a)(n,N),e=y.length){for(y.sort(l),t=1,r=y[0],i=[r];t<e;++t)o=y[t],f(r,o[0])||f(r,o[1])?(d(r[0],o[1])>d(r[0],r[1])&&(r[1]=o[1]),d(o[0],r[1])>d(r[0],r[1])&&(r[0]=o[0])):i.push(r=o);for(s=-1/0,e=i.length-1,t=0,r=i[e];t<=e;r=o,++t)o=i[t],(u=d(r[1],o[0]))>s&&(s=u,h=o[0],_=r[1])}return y=x=null,h===1/0||m===1/0?[[NaN,NaN],[NaN,NaN]]:[[h,m],[_,p]]}},"./node_modules/d3-geo/src/cartesian.js":function(n,t,e){"use strict";function r(n){return[Object(d.e)(n[1],n[0]),Object(d.c)(n[2])]}function o(n){var t=n[0],e=n[1],r=Object(d.g)(e);return[r*Object(d.g)(t),r*Object(d.t)(t),Object(d.t)(e)]}function i(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function s(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function u(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function c(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function a(n){var t=Object(d.u)(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}t.g=r,t.a=o,t.d=i,t.c=s,t.b=u,t.f=c,t.e=a;var d=e("./node_modules/d3-geo/src/math.js")},"./node_modules/d3-geo/src/centroid.js":function(n,t,e){"use strict";function r(n,t){n*=N.r,t*=N.r;var e=Object(N.g)(t);o(e*Object(N.g)(n),e*Object(N.t)(n),Object(N.t)(t))}function o(n,t,e){++h,_+=(n-_)/h,p+=(t-p)/h,j+=(e-j)/h}function i(){S.point=s}function s(n,t){n*=N.r,t*=N.r;var e=Object(N.g)(t);k=e*Object(N.g)(n),T=e*Object(N.t)(n),E=Object(N.t)(t),S.point=u,o(k,T,E)}function u(n,t){n*=N.r,t*=N.r;var e=Object(N.g)(t),r=e*Object(N.g)(n),i=e*Object(N.t)(n),s=Object(N.t)(t),u=Object(N.e)(Object(N.u)((u=T*s-E*i)*u+(u=E*r-k*s)*u+(u=k*i-T*r)*u),k*r+T*i+E*s);m+=u,v+=u*(k+(k=r)),b+=u*(T+(T=i)),g+=u*(E+(E=s)),o(k,T,E)}function c(){S.point=r}function a(){S.point=l}function d(){f(w,M),S.point=r}function l(n,t){w=n,M=t,n*=N.r,t*=N.r,S.point=f;var e=Object(N.g)(t);k=e*Object(N.g)(n),T=e*Object(N.t)(n),E=Object(N.t)(t),o(k,T,E)}function f(n,t){n*=N.r,t*=N.r;var e=Object(N.g)(t),r=e*Object(N.g)(n),i=e*Object(N.t)(n),s=Object(N.t)(t),u=T*s-E*i,c=E*r-k*s,a=k*i-T*r,d=Object(N.u)(u*u+c*c+a*a),l=Object(N.c)(d),f=d&&-l/d;y+=f*u,x+=f*c,O+=f*a,m+=l,v+=l*(k+(k=r)),b+=l*(T+(T=i)),g+=l*(E+(E=s)),o(k,T,E)}var h,m,_,p,j,v,b,g,y,x,O,w,M,k,T,E,N=e("./node_modules/d3-geo/src/math.js"),A=e("./node_modules/d3-geo/src/noop.js"),C=e("./node_modules/d3-geo/src/stream.js"),S={sphere:A.a,point:r,lineStart:i,lineEnd:c,polygonStart:function(){S.lineStart=a,S.lineEnd=d},polygonEnd:function(){S.lineStart=i,S.lineEnd=c}};t.a=function(n){h=m=_=p=j=v=b=g=y=x=O=0,Object(C.a)(n,S);var t=y,e=x,r=O,o=t*t+e*e+r*r;return o<N.j&&(t=v,e=b,r=g,m<N.i&&(t=_,e=p,r=j),(o=t*t+e*e+r*r)<N.j)?[NaN,NaN]:[Object(N.e)(e,t)*N.h,Object(N.c)(r/Object(N.u)(o))*N.h]}},"./node_modules/d3-geo/src/circle.js":function(n,t,e){"use strict";function r(n,t,e,r,s,c){if(e){var a=Object(u.g)(t),d=Object(u.t)(t),l=r*e;null==s?(s=t+r*u.w,c=t-l/2):(s=o(a,s),c=o(a,c),(r>0?s<c:s>c)&&(s+=r*u.w));for(var f,h=s;r>0?h>c:h<c;h-=l)f=Object(i.g)([a,-d*Object(u.g)(h),-d*Object(u.t)(h)]),n.point(f[0],f[1])}}function o(n,t){t=Object(i.a)(t),t[0]-=n,Object(i.e)(t);var e=Object(u.b)(-t[1]);return((-t[2]<0?-e:e)+u.w-u.i)%u.w}t.a=r;var i=e("./node_modules/d3-geo/src/cartesian.js"),s=e("./node_modules/d3-geo/src/constant.js"),u=e("./node_modules/d3-geo/src/math.js"),c=e("./node_modules/d3-geo/src/rotation.js");t.b=function(){function n(n,t){e.push(n=o(n,t)),n[0]*=u.h,n[1]*=u.h}function t(){var n=i.apply(this,arguments),t=a.apply(this,arguments)*u.r,s=d.apply(this,arguments)*u.r;return e=[],o=Object(c.b)(-n[0]*u.r,-n[1]*u.r,0).invert,r(l,t,s,1),n={type:"Polygon",coordinates:[e]},e=o=null,n}var e,o,i=Object(s.a)([0,0]),a=Object(s.a)(90),d=Object(s.a)(6),l={point:n};return t.center=function(n){return arguments.length?(i="function"==typeof n?n:Object(s.a)([+n[0],+n[1]]),t):i},t.radius=function(n){return arguments.length?(a="function"==typeof n?n:Object(s.a)(+n),t):a},t.precision=function(n){return arguments.length?(d="function"==typeof n?n:Object(s.a)(+n),t):d},t}},"./node_modules/d3-geo/src/clip/antimeridian.js":function(n,t,e){"use strict";function r(n){var t,e=NaN,r=NaN,i=NaN;return{lineStart:function(){n.lineStart(),t=1},point:function(s,c){var a=s>0?u.o:-u.o,d=Object(u.a)(s-e);Object(u.a)(d-u.o)<u.i?(n.point(e,r=(r+c)/2>0?u.l:-u.l),n.point(i,r),n.lineEnd(),n.lineStart(),n.point(a,r),n.point(s,r),t=0):i!==a&&d>=u.o&&(Object(u.a)(e-i)<u.i&&(e-=i*u.i),Object(u.a)(s-a)<u.i&&(s-=a*u.i),r=o(e,r,s,c),n.point(i,r),n.lineEnd(),n.lineStart(),n.point(a,r),t=0),n.point(e=s,r=c),i=a},lineEnd:function(){n.lineEnd(),e=r=NaN},clean:function(){return 2-t}}}function o(n,t,e,r){var o,i,s=Object(u.t)(n-e);return Object(u.a)(s)>u.i?Object(u.d)((Object(u.t)(t)*(i=Object(u.g)(r))*Object(u.t)(e)-Object(u.t)(r)*(o=Object(u.g)(t))*Object(u.t)(n))/(o*i*s)):(t+r)/2}function i(n,t,e,r){var o;if(null==n)o=e*u.l,r.point(-u.o,o),r.point(0,o),r.point(u.o,o),r.point(u.o,0),r.point(u.o,-o),r.point(0,-o),r.point(-u.o,-o),r.point(-u.o,0),r.point(-u.o,o);else if(Object(u.a)(n[0]-t[0])>u.i){var i=n[0]<t[0]?u.o:-u.o;o=e*i/2,r.point(-i,o),r.point(0,o),r.point(i,o)}else r.point(t[0],t[1])}var s=e("./node_modules/d3-geo/src/clip/index.js"),u=e("./node_modules/d3-geo/src/math.js");t.a=Object(s.a)(function(){return!0},r,i,[-u.o,-u.l])},"./node_modules/d3-geo/src/clip/buffer.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-geo/src/noop.js");t.a=function(){var n,t=[];return{point:function(t,e){n.push([t,e])},lineStart:function(){t.push(n=[])},lineEnd:r.a,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var e=t;return t=[],n=null,e}}}},"./node_modules/d3-geo/src/clip/circle.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-geo/src/cartesian.js"),o=e("./node_modules/d3-geo/src/circle.js"),i=e("./node_modules/d3-geo/src/math.js"),s=e("./node_modules/d3-geo/src/pointEqual.js"),u=e("./node_modules/d3-geo/src/clip/index.js");t.a=function(n){function t(t,e,r,i){Object(o.a)(i,n,f,r,t,e)}function e(n,t){return Object(i.g)(n)*Object(i.g)(t)>l}function c(n){var t,r,o,u,c;return{lineStart:function(){u=o=!1,c=1},point:function(l,f){var _,p=[l,f],j=e(l,f),v=h?j?0:d(l,f):j?d(l+(l<0?i.o:-i.o),f):0;if(!t&&(u=o=j)&&n.lineStart(),j!==o&&(!(_=a(t,p))||Object(s.a)(t,_)||Object(s.a)(p,_))&&(p[0]+=i.i,p[1]+=i.i,j=e(p[0],p[1])),j!==o)c=0,j?(n.lineStart(),_=a(p,t),n.point(_[0],_[1])):(_=a(t,p),n.point(_[0],_[1]),n.lineEnd()),t=_;else if(m&&t&&h^j){var b;v&r||!(b=a(p,t,!0))||(c=0,h?(n.lineStart(),n.point(b[0][0],b[0][1]),n.point(b[1][0],b[1][1]),n.lineEnd()):(n.point(b[1][0],b[1][1]),n.lineEnd(),n.lineStart(),n.point(b[0][0],b[0][1])))}!j||t&&Object(s.a)(t,p)||n.point(p[0],p[1]),t=p,o=j,r=v},lineEnd:function(){o&&n.lineEnd(),t=null},clean:function(){return c|(u&&o)<<1}}}function a(n,t,e){var o=Object(r.a)(n),s=Object(r.a)(t),u=[1,0,0],c=Object(r.c)(o,s),a=Object(r.d)(c,c),d=c[0],f=a-d*d;if(!f)return!e&&n;var h=l*a/f,m=-l*d/f,_=Object(r.c)(u,c),p=Object(r.f)(u,h),j=Object(r.f)(c,m);Object(r.b)(p,j);var v=_,b=Object(r.d)(p,v),g=Object(r.d)(v,v),y=b*b-g*(Object(r.d)(p,p)-1);if(!(y<0)){var x=Object(i.u)(y),O=Object(r.f)(v,(-b-x)/g);if(Object(r.b)(O,p),O=Object(r.g)(O),!e)return O;var w,M=n[0],k=t[0],T=n[1],E=t[1];k<M&&(w=M,M=k,k=w);var N=k-M,A=Object(i.a)(N-i.o)<i.i,C=A||N<i.i;if(!A&&E<T&&(w=T,T=E,E=w),C?A?T+E>0^O[1]<(Object(i.a)(O[0]-M)<i.i?T:E):T<=O[1]&&O[1]<=E:N>i.o^(M<=O[0]&&O[0]<=k)){var S=Object(r.f)(v,(-b+x)/g);return Object(r.b)(S,p),[O,Object(r.g)(S)]}}}function d(t,e){var r=h?n:i.o-n,o=0;return t<-r?o|=1:t>r&&(o|=2),e<-r?o|=4:e>r&&(o|=8),o}var l=Object(i.g)(n),f=6*i.r,h=l>0,m=Object(i.a)(l)>i.i;return Object(u.a)(e,c,t,h?[0,-n]:[-i.o,n-i.o])}},"./node_modules/d3-geo/src/clip/extent.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-geo/src/clip/rectangle.js");t.a=function(){var n,t,e,o=0,i=0,s=960,u=500;return e={stream:function(e){return n&&t===e?n:n=Object(r.a)(o,i,s,u)(t=e)},extent:function(r){return arguments.length?(o=+r[0][0],i=+r[0][1],s=+r[1][0],u=+r[1][1],n=t=null,e):[[o,i],[s,u]]}}}},"./node_modules/d3-geo/src/clip/index.js":function(n,t,e){"use strict";function r(n){return n.length>1}function o(n,t){return((n=n.x)[0]<0?n[1]-u.l-u.i:u.l-n[1])-((t=t.x)[0]<0?t[1]-u.l-u.i:u.l-t[1])}var i=e("./node_modules/d3-geo/src/clip/buffer.js"),s=e("./node_modules/d3-geo/src/clip/rejoin.js"),u=e("./node_modules/d3-geo/src/math.js"),c=e("./node_modules/d3-geo/src/polygonContains.js"),a=e("./node_modules/d3-array/index.js");t.a=function(n,t,e,u){return function(d){function l(t,e){n(t,e)&&d.point(t,e)}function f(n,t){y.point(n,t)}function h(){M.point=f,y.lineStart()}function m(){M.point=l,y.lineEnd()}function _(n,t){g.push([n,t]),O.point(n,t)}function p(){O.lineStart(),g=[]}function j(){_(g[0][0],g[0][1]),O.lineEnd();var n,t,e,o,i=O.clean(),s=x.result(),u=s.length;if(g.pop(),v.push(g),g=null,u)if(1&i){if(e=s[0],(t=e.length-1)>0){for(w||(d.polygonStart(),w=!0),d.lineStart(),n=0;n<t;++n)d.point((o=e[n])[0],o[1]);d.lineEnd()}}else u>1&&2&i&&s.push(s.pop().concat(s.shift())),b.push(s.filter(r))}var v,b,g,y=t(d),x=Object(i.a)(),O=t(x),w=!1,M={point:l,lineStart:h,lineEnd:m,polygonStart:function(){M.point=_,M.lineStart=p,M.lineEnd=j,b=[],v=[]},polygonEnd:function(){M.point=l,M.lineStart=h,M.lineEnd=m,b=Object(a.n)(b);var n=Object(c.a)(v,u);b.length?(w||(d.polygonStart(),w=!0),Object(s.a)(b,o,n,e,d)):n&&(w||(d.polygonStart(),w=!0),d.lineStart(),e(null,null,1,d),d.lineEnd()),w&&(d.polygonEnd(),w=!1),b=v=null},sphere:function(){d.polygonStart(),d.lineStart(),e(null,null,1,d),d.lineEnd(),d.polygonEnd()}};return M}}},"./node_modules/d3-geo/src/clip/line.js":function(n,t,e){"use strict";t.a=function(n,t,e,r,o,i){var s,u=n[0],c=n[1],a=t[0],d=t[1],l=0,f=1,h=a-u,m=d-c;if(s=e-u,h||!(s>0)){if(s/=h,h<0){if(s<l)return;s<f&&(f=s)}else if(h>0){if(s>f)return;s>l&&(l=s)}if(s=o-u,h||!(s<0)){if(s/=h,h<0){if(s>f)return;s>l&&(l=s)}else if(h>0){if(s<l)return;s<f&&(f=s)}if(s=r-c,m||!(s>0)){if(s/=m,m<0){if(s<l)return;s<f&&(f=s)}else if(m>0){if(s>f)return;s>l&&(l=s)}if(s=i-c,m||!(s<0)){if(s/=m,m<0){if(s>f)return;s>l&&(l=s)}else if(m>0){if(s<l)return;s<f&&(f=s)}return l>0&&(n[0]=u+l*h,n[1]=c+l*m),f<1&&(t[0]=u+f*h,t[1]=c+f*m),!0}}}}}},"./node_modules/d3-geo/src/clip/rectangle.js":function(n,t,e){"use strict";function r(n,t,e,r){function l(o,i){return n<=o&&o<=e&&t<=i&&i<=r}function f(o,i,s,u){var c=0,a=0;if(null==o||(c=h(o,s))!==(a=h(i,s))||_(o,i)<0^s>0)do{u.point(0===c||3===c?n:e,c>1?r:t)}while((c=(c+s+4)%4)!==a);else u.point(i[0],i[1])}function h(r,i){return Object(o.a)(r[0]-n)<o.i?i>0?0:3:Object(o.a)(r[0]-e)<o.i?i>0?2:1:Object(o.a)(r[1]-t)<o.i?i>0?1:0:i>0?3:2}function m(n,t){return _(n.x,t.x)}function _(n,t){var e=h(n,1),r=h(t,1);return e!==r?e-r:0===e?t[1]-n[1]:1===e?n[0]-t[0]:2===e?n[1]-t[1]:t[0]-n[0]}return function(o){function h(n,t){l(n,t)&&S.point(n,t)}function _(){for(var t=0,e=0,o=x.length;e<o;++e)for(var i,s,u=x[e],c=1,a=u.length,d=u[0],l=d[0],f=d[1];c<a;++c)i=l,s=f,d=u[c],l=d[0],f=d[1],s<=r?f>r&&(l-i)*(r-s)>(f-s)*(n-i)&&++t:f<=r&&(l-i)*(r-s)<(f-s)*(n-i)&&--t;return t}function p(){S=q,y=[],x=[],C=!0}function j(){var n=_(),t=C&&n,e=(y=Object(c.n)(y)).length;(t||e)&&(o.polygonStart(),t&&(o.lineStart(),f(null,null,1,o),o.lineEnd()),e&&Object(u.a)(y,m,n,f,o),o.polygonEnd()),S=o,y=x=O=null}function v(){z.point=g,x&&x.push(O=[]),A=!0,N=!1,T=E=NaN}function b(){y&&(g(w,M),k&&N&&q.rejoin(),y.push(q.result())),z.point=h,N&&S.lineEnd()}function g(o,i){var u=l(o,i);if(x&&O.push([o,i]),A)w=o,M=i,k=u,A=!1,u&&(S.lineStart(),S.point(o,i));else if(u&&N)S.point(o,i);else{var c=[T=Math.max(d,Math.min(a,T)),E=Math.max(d,Math.min(a,E))],f=[o=Math.max(d,Math.min(a,o)),i=Math.max(d,Math.min(a,i))];Object(s.a)(c,f,n,t,e,r)?(N||(S.lineStart(),S.point(c[0],c[1])),S.point(f[0],f[1]),u||S.lineEnd(),C=!1):u&&(S.lineStart(),S.point(o,i),C=!1)}T=o,E=i,N=u}var y,x,O,w,M,k,T,E,N,A,C,S=o,q=Object(i.a)(),z={point:h,lineStart:v,lineEnd:b,polygonStart:p,polygonEnd:j};return z}}t.a=r;var o=e("./node_modules/d3-geo/src/math.js"),i=e("./node_modules/d3-geo/src/clip/buffer.js"),s=e("./node_modules/d3-geo/src/clip/line.js"),u=e("./node_modules/d3-geo/src/clip/rejoin.js"),c=e("./node_modules/d3-array/index.js"),a=1e9,d=-a},"./node_modules/d3-geo/src/clip/rejoin.js":function(n,t,e){"use strict";function r(n,t,e,r){this.x=n,this.z=t,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function o(n){if(t=n.length){for(var t,e,r=0,o=n[0];++r<t;)o.n=e=n[r],e.p=o,o=e;o.n=e=n[0],e.p=o}}var i=e("./node_modules/d3-geo/src/pointEqual.js");t.a=function(n,t,e,s,u){var c,a,d=[],l=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,e,o=n[0],s=n[t];if(Object(i.a)(o,s)){for(u.lineStart(),c=0;c<t;++c)u.point((o=n[c])[0],o[1]);return void u.lineEnd()}d.push(e=new r(o,n,null,!0)),l.push(e.o=new r(o,null,e,!1)),d.push(e=new r(s,n,null,!1)),l.push(e.o=new r(s,null,e,!0))}}),d.length){for(l.sort(t),o(d),o(l),c=0,a=l.length;c<a;++c)l[c].e=e=!e;for(var f,h,m=d[0];;){for(var _=m,p=!0;_.v;)if((_=_.n)===m)return;f=_.z,u.lineStart();do{if(_.v=_.o.v=!0,_.e){if(p)for(c=0,a=f.length;c<a;++c)u.point((h=f[c])[0],h[1]);else s(_.x,_.n.x,1,u);_=_.n}else{if(p)for(f=_.p.z,c=f.length-1;c>=0;--c)u.point((h=f[c])[0],h[1]);else s(_.x,_.p.x,-1,u);_=_.p}_=_.o,f=_.z,p=!p}while(!_.v);u.lineEnd()}}}},"./node_modules/d3-geo/src/compose.js":function(n,t,e){"use strict";t.a=function(n,t){function e(e,r){return e=n(e,r),t(e[0],e[1])}return n.invert&&t.invert&&(e.invert=function(e,r){return(e=t.invert(e,r))&&n.invert(e[0],e[1])}),e}},"./node_modules/d3-geo/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-geo/src/contains.js":function(n,t,e){"use strict";function r(n,t){return!(!n||!h.hasOwnProperty(n.type))&&h[n.type](n,t)}function o(n,t){return 0===Object(d.a)(n,t)}function i(n,t){var e=Object(d.a)(n[0],n[1]);return Object(d.a)(n[0],t)+Object(d.a)(t,n[1])<=e+l.i}function s(n,t){return!!Object(a.a)(n.map(u),c(t))}function u(n){return n=n.map(c),n.pop(),n}function c(n){return[n[0]*l.r,n[1]*l.r]}var a=e("./node_modules/d3-geo/src/polygonContains.js"),d=e("./node_modules/d3-geo/src/distance.js"),l=e("./node_modules/d3-geo/src/math.js"),f={Feature:function(n,t){return r(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,o=-1,i=e.length;++o<i;)if(r(e[o].geometry,t))return!0;return!1}},h={Sphere:function(){return!0},Point:function(n,t){return o(n.coordinates,t)},MultiPoint:function(n,t){for(var e=n.coordinates,r=-1,i=e.length;++r<i;)if(o(e[r],t))return!0;return!1},LineString:function(n,t){return i(n.coordinates,t)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,o=e.length;++r<o;)if(i(e[r],t))return!0;return!1},Polygon:function(n,t){return s(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,o=e.length;++r<o;)if(s(e[r],t))return!0;return!1},GeometryCollection:function(n,t){for(var e=n.geometries,o=-1,i=e.length;++o<i;)if(r(e[o],t))return!0;return!1}};t.a=function(n,t){return(n&&f.hasOwnProperty(n.type)?f[n.type]:r)(n,t)}},"./node_modules/d3-geo/src/distance.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-geo/src/length.js"),o=[null,null],i={type:"LineString",coordinates:o};t.a=function(n,t){return o[0]=n,o[1]=t,Object(r.a)(i)}},"./node_modules/d3-geo/src/graticule.js":function(n,t,e){"use strict";function r(n,t,e){var r=Object(u.s)(n,t-c.i,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function o(n,t,e){var r=Object(u.s)(n,t-c.i,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function i(){function n(){return{type:"MultiLineString",coordinates:t()}}function t(){return Object(u.s)(Object(c.f)(a/g)*g,s,g).map(p).concat(Object(u.s)(Object(c.f)(h/y)*y,f,y).map(j)).concat(Object(u.s)(Object(c.f)(i/v)*v,e,v).filter(function(n){return Object(c.a)(n%g)>c.i}).map(m)).concat(Object(u.s)(Object(c.f)(l/b)*b,d,b).filter(function(n){return Object(c.a)(n%y)>c.i}).map(_))}var e,i,s,a,d,l,f,h,m,_,p,j,v=10,b=v,g=90,y=360,x=2.5;return n.lines=function(){return t().map(function(n){return{type:"LineString",coordinates:n}})},n.outline=function(){return{type:"Polygon",coordinates:[p(a).concat(j(f).slice(1),p(s).reverse().slice(1),j(h).reverse().slice(1))]}},n.extent=function(t){return arguments.length?n.extentMajor(t).extentMinor(t):n.extentMinor()},n.extentMajor=function(t){return arguments.length?(a=+t[0][0],s=+t[1][0],h=+t[0][1],f=+t[1][1],a>s&&(t=a,a=s,s=t),h>f&&(t=h,h=f,f=t),n.precision(x)):[[a,h],[s,f]]},n.extentMinor=function(t){return arguments.length?(i=+t[0][0],e=+t[1][0],l=+t[0][1],d=+t[1][1],i>e&&(t=i,i=e,e=t),l>d&&(t=l,l=d,d=t),n.precision(x)):[[i,l],[e,d]]},n.step=function(t){return arguments.length?n.stepMajor(t).stepMinor(t):n.stepMinor()},n.stepMajor=function(t){return arguments.length?(g=+t[0],y=+t[1],n):[g,y]},n.stepMinor=function(t){return arguments.length?(v=+t[0],b=+t[1],n):[v,b]},n.precision=function(t){return arguments.length?(x=+t,m=r(l,d,90),_=o(i,e,x),p=r(h,f,90),j=o(a,s,x),n):x},n.extentMajor([[-180,-90+c.i],[180,90-c.i]]).extentMinor([[-180,-80-c.i],[180,80+c.i]])}function s(){return i()()}t.a=i,t.b=s;var u=e("./node_modules/d3-array/index.js"),c=e("./node_modules/d3-geo/src/math.js")},"./node_modules/d3-geo/src/identity.js":function(n,t,e){"use strict";t.a=function(n){return n}},"./node_modules/d3-geo/src/interpolate.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-geo/src/math.js");t.a=function(n,t){var e=n[0]*r.r,o=n[1]*r.r,i=t[0]*r.r,s=t[1]*r.r,u=Object(r.g)(o),c=Object(r.t)(o),a=Object(r.g)(s),d=Object(r.t)(s),l=u*Object(r.g)(e),f=u*Object(r.t)(e),h=a*Object(r.g)(i),m=a*Object(r.t)(i),_=2*Object(r.c)(Object(r.u)(Object(r.m)(s-o)+u*a*Object(r.m)(i-e))),p=Object(r.t)(_),j=_?function(n){var t=Object(r.t)(n*=_)/p,e=Object(r.t)(_-n)/p,o=e*l+t*h,i=e*f+t*m,s=e*c+t*d;return[Object(r.e)(i,o)*r.h,Object(r.e)(s,Object(r.u)(o*o+i*i))*r.h]}:function(){return[e*r.h,o*r.h]};return j.distance=_,j}},"./node_modules/d3-geo/src/length.js":function(n,t,e){"use strict";function r(){_.point=i,_.lineEnd=o}function o(){_.point=_.lineEnd=f.a}function i(n,t){n*=l.r,t*=l.r,u=n,c=Object(l.t)(t),a=Object(l.g)(t),_.point=s}function s(n,t){n*=l.r,t*=l.r;var e=Object(l.t)(t),r=Object(l.g)(t),o=Object(l.a)(n-u),i=Object(l.g)(o),s=Object(l.t)(o),d=r*s,f=a*e-c*r*i,h=c*e+a*r*i;m.add(Object(l.e)(Object(l.u)(d*d+f*f),h)),u=n,c=e,a=r}var u,c,a,d=e("./node_modules/d3-geo/src/adder.js"),l=e("./node_modules/d3-geo/src/math.js"),f=e("./node_modules/d3-geo/src/noop.js"),h=e("./node_modules/d3-geo/src/stream.js"),m=Object(d.a)(),_={sphere:f.a,point:f.a,lineStart:r,lineEnd:f.a,polygonStart:f.a,polygonEnd:f.a};t.a=function(n){return m.reset(),Object(h.a)(n,_),+m}},"./node_modules/d3-geo/src/math.js":function(n,t,e){"use strict";function r(n){return n>1?0:n<-1?c:Math.acos(n)}function o(n){return n>1?a:n<-1?-a:Math.asin(n)}function i(n){return(n=x(n/2))*n}e.d(t,"i",function(){return s}),e.d(t,"j",function(){return u}),e.d(t,"o",function(){return c}),e.d(t,"l",function(){return a}),e.d(t,"q",function(){return d}),e.d(t,"w",function(){return l}),e.d(t,"h",function(){return f}),e.d(t,"r",function(){return h}),e.d(t,"a",function(){return m}),e.d(t,"d",function(){return _}),e.d(t,"e",function(){return p}),e.d(t,"g",function(){return j}),e.d(t,"f",function(){return v}),e.d(t,"k",function(){return b}),e.d(t,"n",function(){return g}),e.d(t,"p",function(){return y}),e.d(t,"t",function(){return x}),e.d(t,"s",function(){return O}),e.d(t,"u",function(){return w}),e.d(t,"v",function(){return M}),t.b=r,t.c=o,t.m=i;var s=1e-6,u=1e-12,c=Math.PI,a=c/2,d=c/4,l=2*c,f=180/c,h=c/180,m=Math.abs,_=Math.atan,p=Math.atan2,j=Math.cos,v=Math.ceil,b=Math.exp,g=(Math.floor,Math.log),y=Math.pow,x=Math.sin,O=Math.sign||function(n){return n>0?1:n<0?-1:0},w=Math.sqrt,M=Math.tan},"./node_modules/d3-geo/src/noop.js":function(n,t,e){"use strict";function r(){}t.a=r},"./node_modules/d3-geo/src/path/area.js":function(n,t,e){"use strict";function r(){p.point=o}function o(n,t){p.point=i,u=a=n,c=d=t}function i(n,t){_.add(d*n-a*t),a=n,d=t}function s(){i(u,c)}var u,c,a,d,l=e("./node_modules/d3-geo/src/adder.js"),f=e("./node_modules/d3-geo/src/math.js"),h=e("./node_modules/d3-geo/src/noop.js"),m=Object(l.a)(),_=Object(l.a)(),p={point:h.a,lineStart:h.a,lineEnd:h.a,polygonStart:function(){p.lineStart=r,p.lineEnd=s},polygonEnd:function(){p.lineStart=p.lineEnd=p.point=h.a,m.add(Object(f.a)(_)),_.reset()},result:function(){var n=m/2;return m.reset(),n}};t.a=p},"./node_modules/d3-geo/src/path/bounds.js":function(n,t,e){"use strict";function r(n,t){n<i&&(i=n),n>u&&(u=n),t<s&&(s=t),t>c&&(c=t)}var o=e("./node_modules/d3-geo/src/noop.js"),i=1/0,s=i,u=-i,c=u,a={point:r,lineStart:o.a,lineEnd:o.a,polygonStart:o.a,polygonEnd:o.a,result:function(){var n=[[i,s],[u,c]];return u=c=-(s=i=1/0),n}};t.a=a},"./node_modules/d3-geo/src/path/centroid.js":function(n,t,e){"use strict";function r(n,t){j+=n,v+=t,++b}function o(){k.point=i}function i(n,t){k.point=s,r(m=n,_=t)}function s(n,t){var e=n-m,o=t-_,i=Object(p.u)(e*e+o*o);g+=i*(m+n)/2,y+=i*(_+t)/2,x+=i,r(m=n,_=t)}function u(){k.point=r}function c(){k.point=d}function a(){l(f,h)}function d(n,t){k.point=l,r(f=m=n,h=_=t)}function l(n,t){var e=n-m,o=t-_,i=Object(p.u)(e*e+o*o);g+=i*(m+n)/2,y+=i*(_+t)/2,x+=i,i=_*n-m*t,O+=i*(m+n),w+=i*(_+t),M+=3*i,r(m=n,_=t)}var f,h,m,_,p=e("./node_modules/d3-geo/src/math.js"),j=0,v=0,b=0,g=0,y=0,x=0,O=0,w=0,M=0,k={point:r,lineStart:o,lineEnd:u,polygonStart:function(){k.lineStart=c,k.lineEnd=a},polygonEnd:function(){k.point=r,k.lineStart=o,k.lineEnd=u},result:function(){var n=M?[O/M,w/M]:x?[g/x,y/x]:b?[j/b,v/b]:[NaN,NaN];return j=v=b=g=y=x=O=w=M=0,n}};t.a=k},"./node_modules/d3-geo/src/path/context.js":function(n,t,e){"use strict";function r(n){this._context=n}t.a=r;var o=e("./node_modules/d3-geo/src/math.js"),i=e("./node_modules/d3-geo/src/noop.js");r.prototype={_radius:4.5,pointRadius:function(n){return this._radius=n,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(n,t){switch(this._point){case 0:this._context.moveTo(n,t),this._point=1;break;case 1:this._context.lineTo(n,t);break;default:this._context.moveTo(n+this._radius,t),this._context.arc(n,t,this._radius,0,o.w)}},result:i.a}},"./node_modules/d3-geo/src/path/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-geo/src/identity.js"),o=e("./node_modules/d3-geo/src/stream.js"),i=e("./node_modules/d3-geo/src/path/area.js"),s=e("./node_modules/d3-geo/src/path/bounds.js"),u=e("./node_modules/d3-geo/src/path/centroid.js"),c=e("./node_modules/d3-geo/src/path/context.js"),a=e("./node_modules/d3-geo/src/path/measure.js"),d=e("./node_modules/d3-geo/src/path/string.js");t.a=function(n,t){function e(n){return n&&("function"==typeof h&&f.pointRadius(+h.apply(this,arguments)),Object(o.a)(n,l(f))),f.result()}var l,f,h=4.5;return e.area=function(n){return Object(o.a)(n,l(i.a)),i.a.result()},e.measure=function(n){return Object(o.a)(n,l(a.a)),a.a.result()},e.bounds=function(n){return Object(o.a)(n,l(s.a)),s.a.result()},e.centroid=function(n){return Object(o.a)(n,l(u.a)),u.a.result()},e.projection=function(t){return arguments.length?(l=null==t?(n=null,r.a):(n=t).stream,e):n},e.context=function(n){return arguments.length?(f=null==n?(t=null,new d.a):new c.a(t=n),"function"!=typeof h&&f.pointRadius(h),e):t},e.pointRadius=function(n){return arguments.length?(h="function"==typeof n?n:(f.pointRadius(+n),+n),e):h},e.projection(n).context(t)}},"./node_modules/d3-geo/src/path/measure.js":function(n,t,e){"use strict";function r(n,t){m.point=o,s=c=n,u=a=t}function o(n,t){c-=n,a-=t,h.add(Object(l.u)(c*c+a*a)),c=n,a=t}var i,s,u,c,a,d=e("./node_modules/d3-geo/src/adder.js"),l=e("./node_modules/d3-geo/src/math.js"),f=e("./node_modules/d3-geo/src/noop.js"),h=Object(d.a)(),m={point:f.a,lineStart:function(){m.point=r},lineEnd:function(){i&&o(s,u),m.point=f.a},polygonStart:function(){i=!0},polygonEnd:function(){i=null},result:function(){var n=+h;return h.reset(),n}};t.a=m},"./node_modules/d3-geo/src/path/string.js":function(n,t,e){"use strict";function r(){this._string=[]}function o(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}t.a=r,r.prototype={_radius:4.5,_circle:o(4.5),pointRadius:function(n){return(n=+n)!==this._radius&&(this._radius=n,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(n,t){switch(this._point){case 0:this._string.push("M",n,",",t),this._point=1;break;case 1:this._string.push("L",n,",",t);break;default:null==this._circle&&(this._circle=o(this._radius)),this._string.push("M",n,",",t,this._circle)}},result:function(){if(this._string.length){var n=this._string.join("");return this._string=[],n}return null}}},"./node_modules/d3-geo/src/pointEqual.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-geo/src/math.js");t.a=function(n,t){return Object(r.a)(n[0]-t[0])<r.i&&Object(r.a)(n[1]-t[1])<r.i}},"./node_modules/d3-geo/src/polygonContains.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-geo/src/adder.js"),o=e("./node_modules/d3-geo/src/cartesian.js"),i=e("./node_modules/d3-geo/src/math.js"),s=Object(r.a)();t.a=function(n,t){var e=t[0],r=t[1],u=[Object(i.t)(e),-Object(i.g)(e),0],c=0,a=0;s.reset();for(var d=0,l=n.length;d<l;++d)if(h=(f=n[d]).length)for(var f,h,m=f[h-1],_=m[0],p=m[1]/2+i.q,j=Object(i.t)(p),v=Object(i.g)(p),b=0;b<h;++b,_=y,j=O,v=w,m=g){var g=f[b],y=g[0],x=g[1]/2+i.q,O=Object(i.t)(x),w=Object(i.g)(x),M=y-_,k=M>=0?1:-1,T=k*M,E=T>i.o,N=j*O;if(s.add(Object(i.e)(N*k*Object(i.t)(T),v*w+N*Object(i.g)(T))),c+=E?M+k*i.w:M,E^_>=e^y>=e){var A=Object(o.c)(Object(o.a)(m),Object(o.a)(g));Object(o.e)(A);var C=Object(o.c)(u,A);Object(o.e)(C);var S=(E^M>=0?-1:1)*Object(i.c)(C[2]);(r>S||r===S&&(A[0]||A[1]))&&(a+=E^M>=0?1:-1)}}return(c<-i.i||c<i.i&&s<-i.i)^1&a}},"./node_modules/d3-geo/src/projection/albers.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-geo/src/projection/conicEqualArea.js");t.a=function(){return Object(r.b)().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}},"./node_modules/d3-geo/src/projection/albersUsa.js":function(n,t,e){"use strict";function r(n){var t=n.length;return{point:function(e,r){for(var o=-1;++o<t;)n[o].point(e,r)},sphere:function(){for(var e=-1;++e<t;)n[e].sphere()},lineStart:function(){for(var e=-1;++e<t;)n[e].lineStart()},lineEnd:function(){for(var e=-1;++e<t;)n[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<t;)n[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<t;)n[e].polygonEnd()}}}var o=e("./node_modules/d3-geo/src/math.js"),i=e("./node_modules/d3-geo/src/projection/albers.js"),s=e("./node_modules/d3-geo/src/projection/conicEqualArea.js"),u=e("./node_modules/d3-geo/src/projection/fit.js");t.a=function(){function n(n){var t=n[0],e=n[1];return f=null,a.point(t,e),f||(d.point(t,e),f)||(l.point(t,e),f)}function t(){return e=c=null,n}var e,c,a,d,l,f,h=Object(i.a)(),m=Object(s.b)().rotate([154,0]).center([-2,58.5]).parallels([55,65]),_=Object(s.b)().rotate([157,0]).center([-3,19.9]).parallels([8,18]),p={point:function(n,t){f=[n,t]}};return n.invert=function(n){var t=h.scale(),e=h.translate(),r=(n[0]-e[0])/t,o=(n[1]-e[1])/t;return(o>=.12&&o<.234&&r>=-.425&&r<-.214?m:o>=.166&&o<.234&&r>=-.214&&r<-.115?_:h).invert(n)},n.stream=function(n){return e&&c===n?e:e=r([h.stream(c=n),m.stream(n),_.stream(n)])},n.precision=function(n){return arguments.length?(h.precision(n),m.precision(n),_.precision(n),t()):h.precision()},n.scale=function(t){return arguments.length?(h.scale(t),m.scale(.35*t),_.scale(t),n.translate(h.translate())):h.scale()},n.translate=function(n){if(!arguments.length)return h.translate();var e=h.scale(),r=+n[0],i=+n[1];return a=h.translate(n).clipExtent([[r-.455*e,i-.238*e],[r+.455*e,i+.238*e]]).stream(p),d=m.translate([r-.307*e,i+.201*e]).clipExtent([[r-.425*e+o.i,i+.12*e+o.i],[r-.214*e-o.i,i+.234*e-o.i]]).stream(p),l=_.translate([r-.205*e,i+.212*e]).clipExtent([[r-.214*e+o.i,i+.166*e+o.i],[r-.115*e-o.i,i+.234*e-o.i]]).stream(p),t()},n.fitExtent=function(t,e){return Object(u.a)(n,t,e)},n.fitSize=function(t,e){return Object(u.c)(n,t,e)},n.fitWidth=function(t,e){return Object(u.d)(n,t,e)},n.fitHeight=function(t,e){return Object(u.b)(n,t,e)},n.scale(1070)}},"./node_modules/d3-geo/src/projection/azimuthal.js":function(n,t,e){"use strict";function r(n){return function(t,e){var r=Object(i.g)(t),o=Object(i.g)(e),s=n(r*o);return[s*o*Object(i.t)(t),s*Object(i.t)(e)]}}function o(n){return function(t,e){var r=Object(i.u)(t*t+e*e),o=n(r),s=Object(i.t)(o),u=Object(i.g)(o);return[Object(i.e)(t*s,r*u),Object(i.c)(r&&e*s/r)]}}t.b=r,t.a=o;var i=e("./node_modules/d3-geo/src/math.js")},"./node_modules/d3-geo/src/projection/azimuthalEqualArea.js":function(n,t,e){"use strict";e.d(t,"a",function(){return s});var r=e("./node_modules/d3-geo/src/math.js"),o=e("./node_modules/d3-geo/src/projection/azimuthal.js"),i=e("./node_modules/d3-geo/src/projection/index.js"),s=Object(o.b)(function(n){return Object(r.u)(2/(1+n))});s.invert=Object(o.a)(function(n){return 2*Object(r.c)(n/2)}),t.b=function(){return Object(i.a)(s).scale(124.75).clipAngle(179.999)}},"./node_modules/d3-geo/src/projection/azimuthalEquidistant.js":function(n,t,e){"use strict";e.d(t,"a",function(){return s});var r=e("./node_modules/d3-geo/src/math.js"),o=e("./node_modules/d3-geo/src/projection/azimuthal.js"),i=e("./node_modules/d3-geo/src/projection/index.js"),s=Object(o.b)(function(n){return(n=Object(r.b)(n))&&n/Object(r.t)(n)});s.invert=Object(o.a)(function(n){return n}),t.b=function(){return Object(i.a)(s).scale(79.4188).clipAngle(179.999)}},"./node_modules/d3-geo/src/projection/conic.js":function(n,t,e){"use strict";function r(n){var t=0,e=o.o/3,r=Object(i.b)(n),s=r(t,e);return s.parallels=function(n){return arguments.length?r(t=n[0]*o.r,e=n[1]*o.r):[t*o.h,e*o.h]},s}t.a=r;var o=e("./node_modules/d3-geo/src/math.js"),i=e("./node_modules/d3-geo/src/projection/index.js")},"./node_modules/d3-geo/src/projection/conicConformal.js":function(n,t,e){"use strict";function r(n){return Object(i.v)((i.l+n)/2)}function o(n,t){function e(n,t){c>0?t<-i.l+i.i&&(t=-i.l+i.i):t>i.l-i.i&&(t=i.l-i.i);var e=c/Object(i.p)(r(t),s);return[e*Object(i.t)(s*n),c-e*Object(i.g)(s*n)]}var o=Object(i.g)(n),s=n===t?Object(i.t)(n):Object(i.n)(o/Object(i.g)(t))/Object(i.n)(r(t)/r(n)),c=o*Object(i.p)(r(n),s)/s;return s?(e.invert=function(n,t){var e=c-t,r=Object(i.s)(s)*Object(i.u)(n*n+e*e);return[Object(i.e)(n,Object(i.a)(e))/s*Object(i.s)(e),2*Object(i.d)(Object(i.p)(c/r,1/s))-i.l]},e):u.c}t.a=o;var i=e("./node_modules/d3-geo/src/math.js"),s=e("./node_modules/d3-geo/src/projection/conic.js"),u=e("./node_modules/d3-geo/src/projection/mercator.js");t.b=function(){return Object(s.a)(o).scale(109.5).parallels([30,30])}},"./node_modules/d3-geo/src/projection/conicEqualArea.js":function(n,t,e){"use strict";function r(n,t){function e(n,t){var e=Object(o.u)(u-2*i*Object(o.t)(t))/i;return[e*Object(o.t)(n*=i),c-e*Object(o.g)(n)]}var r=Object(o.t)(n),i=(r+Object(o.t)(t))/2;if(Object(o.a)(i)<o.i)return Object(s.a)(n);var u=1+r*(2*i-r),c=Object(o.u)(u)/i;return e.invert=function(n,t){var e=c-t;return[Object(o.e)(n,Object(o.a)(e))/i*Object(o.s)(e),Object(o.c)((u-(n*n+e*e)*i*i)/(2*i))]},e}t.a=r;var o=e("./node_modules/d3-geo/src/math.js"),i=e("./node_modules/d3-geo/src/projection/conic.js"),s=e("./node_modules/d3-geo/src/projection/cylindricalEqualArea.js");t.b=function(){return Object(i.a)(r).scale(155.424).center([0,33.6442])}},"./node_modules/d3-geo/src/projection/conicEquidistant.js":function(n,t,e){"use strict";function r(n,t){function e(n,t){var e=u-t,r=i*n;return[e*Object(o.t)(r),u-e*Object(o.g)(r)]}var r=Object(o.g)(n),i=n===t?Object(o.t)(n):(r-Object(o.g)(t))/(t-n),u=r/i+n;return Object(o.a)(i)<o.i?s.b:(e.invert=function(n,t){var e=u-t;return[Object(o.e)(n,Object(o.a)(e))/i*Object(o.s)(e),u-Object(o.s)(i)*Object(o.u)(n*n+e*e)]},e)}t.a=r;var o=e("./node_modules/d3-geo/src/math.js"),i=e("./node_modules/d3-geo/src/projection/conic.js"),s=e("./node_modules/d3-geo/src/projection/equirectangular.js");t.b=function(){return Object(i.a)(r).scale(131.154).center([0,13.9389])}},"./node_modules/d3-geo/src/projection/cylindricalEqualArea.js":function(n,t,e){"use strict";function r(n){function t(n,t){return[n*e,Object(o.t)(t)/e]}var e=Object(o.g)(n);return t.invert=function(n,t){return[n/e,Object(o.c)(t*e)]},t}t.a=r;var o=e("./node_modules/d3-geo/src/math.js")},"./node_modules/d3-geo/src/projection/equirectangular.js":function(n,t,e){"use strict";function r(n,t){return[n,t]}t.b=r;var o=e("./node_modules/d3-geo/src/projection/index.js");r.invert=r,t.a=function(){return Object(o.a)(r).scale(152.63)}},"./node_modules/d3-geo/src/projection/fit.js":function(n,t,e){"use strict";function r(n,t,e){var r=n.clipExtent&&n.clipExtent();return n.scale(150).translate([0,0]),null!=r&&n.clipExtent(null),Object(c.a)(e,n.stream(a.a)),t(a.a.result()),null!=r&&n.clipExtent(r),n}function o(n,t,e){return r(n,function(e){var r=t[1][0]-t[0][0],o=t[1][1]-t[0][1],i=Math.min(r/(e[1][0]-e[0][0]),o/(e[1][1]-e[0][1])),s=+t[0][0]+(r-i*(e[1][0]+e[0][0]))/2,u=+t[0][1]+(o-i*(e[1][1]+e[0][1]))/2;n.scale(150*i).translate([s,u])},e)}function i(n,t,e){return o(n,[[0,0],t],e)}function s(n,t,e){return r(n,function(e){var r=+t,o=r/(e[1][0]-e[0][0]),i=(r-o*(e[1][0]+e[0][0]))/2,s=-o*e[0][1];n.scale(150*o).translate([i,s])},e)}function u(n,t,e){return r(n,function(e){var r=+t,o=r/(e[1][1]-e[0][1]),i=-o*e[0][0],s=(r-o*(e[1][1]+e[0][1]))/2;n.scale(150*o).translate([i,s])},e)}t.a=o,t.c=i,t.d=s,t.b=u;var c=e("./node_modules/d3-geo/src/stream.js"),a=e("./node_modules/d3-geo/src/path/bounds.js")},"./node_modules/d3-geo/src/projection/gnomonic.js":function(n,t,e){"use strict";function r(n,t){var e=Object(o.g)(t),r=Object(o.g)(n)*e;return[e*Object(o.t)(n)/r,Object(o.t)(t)/r]}t.b=r;var o=e("./node_modules/d3-geo/src/math.js"),i=e("./node_modules/d3-geo/src/projection/azimuthal.js"),s=e("./node_modules/d3-geo/src/projection/index.js");r.invert=Object(i.a)(o.d),t.a=function(){return Object(s.a)(r).scale(144.049).clipAngle(60)}},"./node_modules/d3-geo/src/projection/identity.js":function(n,t,e){"use strict";function r(n,t,e,r){return 1===n&&1===t&&0===e&&0===r?i.a:Object(s.b)({point:function(o,i){this.stream.point(o*n+e,i*t+r)}})}var o=e("./node_modules/d3-geo/src/clip/rectangle.js"),i=e("./node_modules/d3-geo/src/identity.js"),s=e("./node_modules/d3-geo/src/transform.js"),u=e("./node_modules/d3-geo/src/projection/fit.js");t.a=function(){function n(){return c=a=null,d}var t,e,s,c,a,d,l=1,f=0,h=0,m=1,_=1,p=i.a,j=null,v=i.a;return d={stream:function(n){return c&&a===n?c:c=p(v(a=n))},postclip:function(r){return arguments.length?(v=r,j=t=e=s=null,n()):v},clipExtent:function(r){return arguments.length?(v=null==r?(j=t=e=s=null,i.a):Object(o.a)(j=+r[0][0],t=+r[0][1],e=+r[1][0],s=+r[1][1]),n()):null==j?null:[[j,t],[e,s]]},scale:function(t){return arguments.length?(p=r((l=+t)*m,l*_,f,h),n()):l},translate:function(t){return arguments.length?(p=r(l*m,l*_,f=+t[0],h=+t[1]),n()):[f,h]},reflectX:function(t){return arguments.length?(p=r(l*(m=t?-1:1),l*_,f,h),n()):m<0},reflectY:function(t){return arguments.length?(p=r(l*m,l*(_=t?-1:1),f,h),n()):_<0},fitExtent:function(n,t){return Object(u.a)(d,n,t)},fitSize:function(n,t){return Object(u.c)(d,n,t)},fitWidth:function(n,t){return Object(u.d)(d,n,t)},fitHeight:function(n,t){return Object(u.b)(d,n,t)}}}},"./node_modules/d3-geo/src/projection/index.js":function(n,t,e){"use strict";function r(n){return Object(h.b)({point:function(t,e){var r=n(t,e);return this.stream.point(r[0],r[1])}})}function o(n){return i(function(){return n})()}function i(n){function t(n){return n=y(n[0]*l.r,n[1]*l.r),[n[0]*T+v,b-n[1]*T]}function e(n){return(n=y.invert((n[0]-v)/T,(b-n[1])/T))&&[n[0]*l.h,n[1]*l.h]}function o(n,t){return n=j(n,t),[n[0]*T+v,b-n[1]*T]}function i(){y=Object(a.a)(g=Object(f.b)(S,q,z),j);var n=j(A,C);return v=E-n[0]*T,b=N+n[1]*T,h()}function h(){return M=k=null,t}var j,v,b,g,y,x,O,w,M,k,T=150,E=480,N=250,A=0,C=0,S=0,q=0,z=0,P=null,R=s.a,D=null,I=d.a,L=.5,H=Object(_.a)(o,L);return t.stream=function(n){return M&&k===n?M:M=p(r(g)(R(H(I(k=n)))))},t.preclip=function(n){return arguments.length?(R=n,P=void 0,h()):R},t.postclip=function(n){return arguments.length?(I=n,D=x=O=w=null,h()):I},t.clipAngle=function(n){return arguments.length?(R=+n?Object(u.a)(P=n*l.r):(P=null,s.a),h()):P*l.h},t.clipExtent=function(n){return arguments.length?(I=null==n?(D=x=O=w=null,d.a):Object(c.a)(D=+n[0][0],x=+n[0][1],O=+n[1][0],w=+n[1][1]),h()):null==D?null:[[D,x],[O,w]]},t.scale=function(n){return arguments.length?(T=+n,i()):T},t.translate=function(n){return arguments.length?(E=+n[0],N=+n[1],i()):[E,N]},t.center=function(n){return arguments.length?(A=n[0]%360*l.r,C=n[1]%360*l.r,i()):[A*l.h,C*l.h]},t.rotate=function(n){return arguments.length?(S=n[0]%360*l.r,q=n[1]%360*l.r,z=n.length>2?n[2]%360*l.r:0,i()):[S*l.h,q*l.h,z*l.h]},t.precision=function(n){return arguments.length?(H=Object(_.a)(o,L=n*n),h()):Object(l.u)(L)},t.fitExtent=function(n,e){return Object(m.a)(t,n,e)},t.fitSize=function(n,e){return Object(m.c)(t,n,e)},t.fitWidth=function(n,e){return Object(m.d)(t,n,e)},t.fitHeight=function(n,e){return Object(m.b)(t,n,e)},function(){return j=n.apply(this,arguments),t.invert=j.invert&&e,i()}}t.a=o,t.b=i;var s=e("./node_modules/d3-geo/src/clip/antimeridian.js"),u=e("./node_modules/d3-geo/src/clip/circle.js"),c=e("./node_modules/d3-geo/src/clip/rectangle.js"),a=e("./node_modules/d3-geo/src/compose.js"),d=e("./node_modules/d3-geo/src/identity.js"),l=e("./node_modules/d3-geo/src/math.js"),f=e("./node_modules/d3-geo/src/rotation.js"),h=e("./node_modules/d3-geo/src/transform.js"),m=e("./node_modules/d3-geo/src/projection/fit.js"),_=e("./node_modules/d3-geo/src/projection/resample.js"),p=Object(h.b)({point:function(n,t){this.stream.point(n*l.r,t*l.r)}})},"./node_modules/d3-geo/src/projection/mercator.js":function(n,t,e){"use strict";function r(n,t){return[n,Object(i.n)(Object(i.v)((i.l+t)/2))]}function o(n){function t(){var t=i.o*l(),u=a(Object(s.a)(a.rotate()).invert([0,0]));return h(null==m?[[u[0]-t,u[1]-t],[u[0]+t,u[1]+t]]:n===r?[[Math.max(u[0]-t,m),e],[Math.min(u[0]+t,o),c]]:[[m,Math.max(u[1]-t,e)],[o,Math.min(u[1]+t,c)]])}var e,o,c,a=Object(u.a)(n),d=a.center,l=a.scale,f=a.translate,h=a.clipExtent,m=null;return a.scale=function(n){return arguments.length?(l(n),t()):l()},a.translate=function(n){return arguments.length?(f(n),t()):f()},a.center=function(n){return arguments.length?(d(n),t()):d()},a.clipExtent=function(n){return arguments.length?(null==n?m=e=o=c=null:(m=+n[0][0],e=+n[0][1],o=+n[1][0],c=+n[1][1]),t()):null==m?null:[[m,e],[o,c]]},t()}t.c=r,t.b=o;var i=e("./node_modules/d3-geo/src/math.js"),s=e("./node_modules/d3-geo/src/rotation.js"),u=e("./node_modules/d3-geo/src/projection/index.js");r.invert=function(n,t){return[n,2*Object(i.d)(Object(i.k)(t))-i.l]},t.a=function(){return o(r).scale(961/i.w)}},"./node_modules/d3-geo/src/projection/naturalEarth1.js":function(n,t,e){"use strict";function r(n,t){var e=t*t,r=e*e;return[n*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),t*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}t.b=r;var o=e("./node_modules/d3-geo/src/projection/index.js"),i=e("./node_modules/d3-geo/src/math.js");r.invert=function(n,t){var e,r=t,o=25;do{var s=r*r,u=s*s;r-=e=(r*(1.007226+s*(.015085+u*(.028874*s-.044475-.005916*u)))-t)/(1.007226+s*(.045255+u*(.259866*s-.311325-.005916*11*u)))}while(Object(i.a)(e)>i.i&&--o>0);return[n/(.8707+(s=r*r)*(s*(s*s*s*(.003971-.001529*s)-.013791)-.131979)),r]},t.a=function(){return Object(o.a)(r).scale(175.295)}},"./node_modules/d3-geo/src/projection/orthographic.js":function(n,t,e){"use strict";function r(n,t){return[Object(o.g)(t)*Object(o.t)(n),Object(o.t)(t)]}t.b=r;var o=e("./node_modules/d3-geo/src/math.js"),i=e("./node_modules/d3-geo/src/projection/azimuthal.js"),s=e("./node_modules/d3-geo/src/projection/index.js");r.invert=Object(i.a)(o.c),t.a=function(){return Object(s.a)(r).scale(249.5).clipAngle(90+o.i)}},"./node_modules/d3-geo/src/projection/resample.js":function(n,t,e){"use strict";function r(n){return Object(u.b)({point:function(t,e){t=n(t,e),this.stream.point(t[0],t[1])}})}function o(n,t){function e(r,o,i,u,c,d,l,f,h,m,_,p,j,v){var b=l-r,g=f-o,y=b*b+g*g;if(y>4*t&&j--){var x=u+m,O=c+_,w=d+p,M=Object(s.u)(x*x+O*O+w*w),k=Object(s.c)(w/=M),T=Object(s.a)(Object(s.a)(w)-1)<s.i||Object(s.a)(i-h)<s.i?(i+h)/2:Object(s.e)(O,x),E=n(T,k),N=E[0],A=E[1],C=N-r,S=A-o,q=g*C-b*S;(q*q/y>t||Object(s.a)((b*C+g*S)/y-.5)>.3||u*m+c*_+d*p<a)&&(e(r,o,i,u,c,d,N,A,T,x/=M,O/=M,w,j,v),v.point(N,A),e(N,A,T,x,O,w,l,f,h,m,_,p,j,v))}}return function(t){function r(e,r){e=n(e,r),t.point(e[0],e[1])}function o(){b=NaN,w.point=s,t.lineStart()}function s(r,o){var s=Object(i.a)([r,o]),u=n(r,o);e(b,g,v,y,x,O,b=u[0],g=u[1],v=r,y=s[0],x=s[1],O=s[2],c,t),t.point(b,g)}function u(){w.point=r,t.lineEnd()}function a(){o(),w.point=d,w.lineEnd=l}function d(n,t){s(f=n,t),h=b,m=g,_=y,p=x,j=O,w.point=s}function l(){e(b,g,v,y,x,O,h,m,f,_,p,j,c,t),w.lineEnd=u,u()}var f,h,m,_,p,j,v,b,g,y,x,O,w={point:r,lineStart:o,lineEnd:u,polygonStart:function(){t.polygonStart(),w.lineStart=a},polygonEnd:function(){t.polygonEnd(),w.lineStart=o}};return w}}var i=e("./node_modules/d3-geo/src/cartesian.js"),s=e("./node_modules/d3-geo/src/math.js"),u=e("./node_modules/d3-geo/src/transform.js"),c=16,a=Object(s.g)(30*s.r);t.a=function(n,t){return+t?o(n,t):r(n)}},"./node_modules/d3-geo/src/projection/stereographic.js":function(n,t,e){"use strict";function r(n,t){var e=Object(o.g)(t),r=1+Object(o.g)(n)*e;return[e*Object(o.t)(n)/r,Object(o.t)(t)/r]}t.b=r;var o=e("./node_modules/d3-geo/src/math.js"),i=e("./node_modules/d3-geo/src/projection/azimuthal.js"),s=e("./node_modules/d3-geo/src/projection/index.js");r.invert=Object(i.a)(function(n){return 2*Object(o.d)(n)}),t.a=function(){return Object(s.a)(r).scale(250).clipAngle(142)}},"./node_modules/d3-geo/src/projection/transverseMercator.js":function(n,t,e){"use strict";function r(n,t){return[Object(o.n)(Object(o.v)((o.l+t)/2)),-n]}t.b=r;var o=e("./node_modules/d3-geo/src/math.js"),i=e("./node_modules/d3-geo/src/projection/mercator.js");r.invert=function(n,t){return[-t,2*Object(o.d)(Object(o.k)(n))-o.l]},t.a=function(){var n=Object(i.b)(r),t=n.center,e=n.rotate;return n.center=function(n){return arguments.length?t([-n[1],n[0]]):(n=t(),[n[1],-n[0]])},n.rotate=function(n){return arguments.length?e([n[0],n[1],n.length>2?n[2]+90:90]):(n=e(),[n[0],n[1],n[2]-90])},e([0,0,90]).scale(159.155)}},"./node_modules/d3-geo/src/rotation.js":function(n,t,e){"use strict";function r(n,t){return[n>a.o?n-a.w:n<-a.o?n+a.w:n,t]}function o(n,t,e){return(n%=a.w)?t||e?Object(c.a)(s(n),u(t,e)):s(n):t||e?u(t,e):r}function i(n){return function(t,e){return t+=n,[t>a.o?t-a.w:t<-a.o?t+a.w:t,e]}}function s(n){var t=i(n);return t.invert=i(-n),t}function u(n,t){function e(n,t){var e=Object(a.g)(t),u=Object(a.g)(n)*e,c=Object(a.t)(n)*e,d=Object(a.t)(t),l=d*r+u*o;return[Object(a.e)(c*i-l*s,u*r-d*o),Object(a.c)(l*i+c*s)]}var r=Object(a.g)(n),o=Object(a.t)(n),i=Object(a.g)(t),s=Object(a.t)(t);return e.invert=function(n,t){var e=Object(a.g)(t),u=Object(a.g)(n)*e,c=Object(a.t)(n)*e,d=Object(a.t)(t),l=d*i-c*s;return[Object(a.e)(c*i+d*s,u*r+l*o),Object(a.c)(l*r-u*o)]},e}t.b=o;var c=e("./node_modules/d3-geo/src/compose.js"),a=e("./node_modules/d3-geo/src/math.js");r.invert=r,t.a=function(n){function t(t){return t=n(t[0]*a.r,t[1]*a.r),t[0]*=a.h,t[1]*=a.h,t}return n=o(n[0]*a.r,n[1]*a.r,n.length>2?n[2]*a.r:0),t.invert=function(t){return t=n.invert(t[0]*a.r,t[1]*a.r),t[0]*=a.h,t[1]*=a.h,t},t}},"./node_modules/d3-geo/src/stream.js":function(n,t,e){"use strict";function r(n,t){n&&u.hasOwnProperty(n.type)&&u[n.type](n,t)}function o(n,t,e){var r,o=-1,i=n.length-e;for(t.lineStart();++o<i;)r=n[o],t.point(r[0],r[1],r[2]);t.lineEnd()}function i(n,t){var e=-1,r=n.length;for(t.polygonStart();++e<r;)o(n[e],t,1);t.polygonEnd()}var s={Feature:function(n,t){r(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,o=-1,i=e.length;++o<i;)r(e[o].geometry,t)}},u={Sphere:function(n,t){t.sphere()},Point:function(n,t){n=n.coordinates,t.point(n[0],n[1],n[2])},MultiPoint:function(n,t){for(var e=n.coordinates,r=-1,o=e.length;++r<o;)n=e[r],t.point(n[0],n[1],n[2])},LineString:function(n,t){o(n.coordinates,t,0)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,i=e.length;++r<i;)o(e[r],t,0)},Polygon:function(n,t){i(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,o=e.length;++r<o;)i(e[r],t)},GeometryCollection:function(n,t){for(var e=n.geometries,o=-1,i=e.length;++o<i;)r(e[o],t)}};t.a=function(n,t){n&&s.hasOwnProperty(n.type)?s[n.type](n,t):r(n,t)}},"./node_modules/d3-geo/src/transform.js":function(n,t,e){"use strict";function r(n){return function(t){var e=new o;for(var r in n)e[r]=n[r];return e.stream=t,e}}function o(){}t.b=r,t.a=function(n){return{stream:r(n)}},o.prototype={constructor:o,point:function(n,t){this.stream.point(n,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}}},"./node_modules/d3-hierarchy/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-hierarchy/src/cluster.js");e.d(t,"a",function(){return r.a});var o=e("./node_modules/d3-hierarchy/src/hierarchy/index.js");e.d(t,"b",function(){return o.c});var i=e("./node_modules/d3-hierarchy/src/pack/index.js");e.d(t,"c",function(){return i.a});var s=e("./node_modules/d3-hierarchy/src/pack/siblings.js");e.d(t,"e",function(){return s.a});var u=e("./node_modules/d3-hierarchy/src/pack/enclose.js");e.d(t,"d",function(){return u.a});var c=e("./node_modules/d3-hierarchy/src/partition.js");e.d(t,"f",function(){return c.a});var a=e("./node_modules/d3-hierarchy/src/stratify.js");e.d(t,"g",function(){return a.a});var d=e("./node_modules/d3-hierarchy/src/tree.js");e.d(t,"h",function(){return d.a});var l=e("./node_modules/d3-hierarchy/src/treemap/index.js");e.d(t,"i",function(){return l.a});var f=e("./node_modules/d3-hierarchy/src/treemap/binary.js");e.d(t,"j",function(){return f.a});var h=e("./node_modules/d3-hierarchy/src/treemap/dice.js");e.d(t,"k",function(){return h.a});var m=e("./node_modules/d3-hierarchy/src/treemap/slice.js");e.d(t,"m",function(){return m.a});var _=e("./node_modules/d3-hierarchy/src/treemap/sliceDice.js");e.d(t,"n",function(){return _.a});var p=e("./node_modules/d3-hierarchy/src/treemap/squarify.js");e.d(t,"o",function(){return p.a});var j=e("./node_modules/d3-hierarchy/src/treemap/resquarify.js");e.d(t,"l",function(){return j.a})},"./node_modules/d3-hierarchy/src/accessors.js":function(n,t,e){"use strict";function r(n){return null==n?null:o(n)}function o(n){if("function"!=typeof n)throw new Error;return n}t.a=r,t.b=o},"./node_modules/d3-hierarchy/src/array.js":function(n,t,e){"use strict";function r(n){for(var t,e,r=n.length;r;)e=Math.random()*r--|0,t=n[r],n[r]=n[e],n[e]=t;return n}e.d(t,"b",function(){return o}),t.a=r;var o=Array.prototype.slice},"./node_modules/d3-hierarchy/src/cluster.js":function(n,t,e){"use strict";function r(n,t){return n.parent===t.parent?1:2}function o(n){return n.reduce(i,0)/n.length}function i(n,t){return n+t.x}function s(n){return 1+n.reduce(u,0)}function u(n,t){return Math.max(n,t.y)}function c(n){for(var t;t=n.children;)n=t[0];return n}function a(n){for(var t;t=n.children;)n=t[t.length-1];return n}t.a=function(){function n(n){var r,d=0;n.eachAfter(function(n){var e=n.children;e?(n.x=o(e),n.y=s(e)):(n.x=r?d+=t(n,r):0,n.y=0,r=n)});var l=c(n),f=a(n),h=l.x-t(l,f)/2,m=f.x+t(f,l)/2;return n.eachAfter(u?function(t){t.x=(t.x-n.x)*e,t.y=(n.y-t.y)*i}:function(t){t.x=(t.x-h)/(m-h)*e,t.y=(1-(n.y?t.y/n.y:1))*i})}var t=r,e=1,i=1,u=!1;return n.separation=function(e){return arguments.length?(t=e,n):t},n.size=function(t){return arguments.length?(u=!1,e=+t[0],i=+t[1],n):u?null:[e,i]},n.nodeSize=function(t){return arguments.length?(u=!0,e=+t[0],i=+t[1],n):u?[e,i]:null},n}},"./node_modules/d3-hierarchy/src/constant.js":function(n,t,e){"use strict";function r(){return 0}t.a=r,t.b=function(n){return function(){return n}}},"./node_modules/d3-hierarchy/src/hierarchy/ancestors.js":function(n,t,e){"use strict";t.a=function(){for(var n=this,t=[n];n=n.parent;)t.push(n);return t}},"./node_modules/d3-hierarchy/src/hierarchy/count.js":function(n,t,e){"use strict";function r(n){var t=0,e=n.children,r=e&&e.length;if(r)for(;--r>=0;)t+=e[r].value;else t=1;n.value=t}t.a=function(){return this.eachAfter(r)}},"./node_modules/d3-hierarchy/src/hierarchy/descendants.js":function(n,t,e){"use strict";t.a=function(){var n=[];return this.each(function(t){n.push(t)}),n}},"./node_modules/d3-hierarchy/src/hierarchy/each.js":function(n,t,e){"use strict";t.a=function(n){var t,e,r,o,i=this,s=[i];do{for(t=s.reverse(),s=[];i=t.pop();)if(n(i),e=i.children)for(r=0,o=e.length;r<o;++r)s.push(e[r])}while(s.length);return this}},"./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js":function(n,t,e){"use strict";t.a=function(n){for(var t,e,r,o=this,i=[o],s=[];o=i.pop();)if(s.push(o),t=o.children)for(e=0,r=t.length;e<r;++e)i.push(t[e]);for(;o=s.pop();)n(o);return this}},"./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js":function(n,t,e){"use strict";t.a=function(n){for(var t,e,r=this,o=[r];r=o.pop();)if(n(r),t=r.children)for(e=t.length-1;e>=0;--e)o.push(t[e]);return this}},"./node_modules/d3-hierarchy/src/hierarchy/index.js":function(n,t,e){"use strict";function r(n,t){var e,r,o,s,a,d=new c(n),l=+n.value&&(d.value=n.value),f=[d];for(null==t&&(t=i);e=f.pop();)if(l&&(e.value=+e.data.value),(o=t(e.data))&&(a=o.length))for(e.children=new Array(a),s=a-1;s>=0;--s)f.push(r=e.children[s]=new c(o[s])),r.parent=e,r.depth=e.depth+1;return d.eachBefore(u)}function o(){return r(this).eachBefore(s)}function i(n){return n.children}function s(n){n.data=n.data.data}function u(n){var t=0;do{n.height=t}while((n=n.parent)&&n.height<++t)}function c(n){this.data=n,this.depth=this.height=0,this.parent=null}t.c=r,t.b=u,t.a=c;var a=e("./node_modules/d3-hierarchy/src/hierarchy/count.js"),d=e("./node_modules/d3-hierarchy/src/hierarchy/each.js"),l=e("./node_modules/d3-hierarchy/src/hierarchy/eachBefore.js"),f=e("./node_modules/d3-hierarchy/src/hierarchy/eachAfter.js"),h=e("./node_modules/d3-hierarchy/src/hierarchy/sum.js"),m=e("./node_modules/d3-hierarchy/src/hierarchy/sort.js"),_=e("./node_modules/d3-hierarchy/src/hierarchy/path.js"),p=e("./node_modules/d3-hierarchy/src/hierarchy/ancestors.js"),j=e("./node_modules/d3-hierarchy/src/hierarchy/descendants.js"),v=e("./node_modules/d3-hierarchy/src/hierarchy/leaves.js"),b=e("./node_modules/d3-hierarchy/src/hierarchy/links.js");c.prototype=r.prototype={constructor:c,count:a.a,each:d.a,eachAfter:f.a,eachBefore:l.a,sum:h.a,sort:m.a,path:_.a,ancestors:p.a,descendants:j.a,leaves:v.a,links:b.a,copy:o}},"./node_modules/d3-hierarchy/src/hierarchy/leaves.js":function(n,t,e){"use strict";t.a=function(){var n=[];return this.eachBefore(function(t){t.children||n.push(t)}),n}},"./node_modules/d3-hierarchy/src/hierarchy/links.js":function(n,t,e){"use strict";t.a=function(){var n=this,t=[];return n.each(function(e){e!==n&&t.push({source:e.parent,target:e})}),t}},"./node_modules/d3-hierarchy/src/hierarchy/path.js":function(n,t,e){"use strict";function r(n,t){if(n===t)return n;var e=n.ancestors(),r=t.ancestors(),o=null;for(n=e.pop(),t=r.pop();n===t;)o=n,n=e.pop(),t=r.pop();return o}t.a=function(n){for(var t=this,e=r(t,n),o=[t];t!==e;)t=t.parent,o.push(t);for(var i=o.length;n!==e;)o.splice(i,0,n),n=n.parent;return o}},"./node_modules/d3-hierarchy/src/hierarchy/sort.js":function(n,t,e){"use strict";t.a=function(n){return this.eachBefore(function(t){t.children&&t.children.sort(n)})}},"./node_modules/d3-hierarchy/src/hierarchy/sum.js":function(n,t,e){"use strict";t.a=function(n){return this.eachAfter(function(t){for(var e=+n(t.data)||0,r=t.children,o=r&&r.length;--o>=0;)e+=r[o].value;t.value=e})}},"./node_modules/d3-hierarchy/src/pack/enclose.js":function(n,t,e){"use strict";function r(n,t){var e,r;if(s(t,n))return[t];for(e=0;e<n.length;++e)if(o(t,n[e])&&s(a(n[e],t),n))return[n[e],t];for(e=0;e<n.length-1;++e)for(r=e+1;r<n.length;++r)if(o(a(n[e],n[r]),t)&&o(a(n[e],t),n[r])&&o(a(n[r],t),n[e])&&s(d(n[e],n[r],t),n))return[n[e],n[r],t];throw new Error}function o(n,t){var e=n.r-t.r,r=t.x-n.x,o=t.y-n.y;return e<0||e*e<r*r+o*o}function i(n,t){var e=n.r-t.r+1e-6,r=t.x-n.x,o=t.y-n.y;return e>0&&e*e>r*r+o*o}function s(n,t){for(var e=0;e<t.length;++e)if(!i(n,t[e]))return!1;return!0}function u(n){switch(n.length){case 1:return c(n[0]);case 2:return a(n[0],n[1]);case 3:return d(n[0],n[1],n[2])}}function c(n){return{x:n.x,y:n.y,r:n.r}}function a(n,t){var e=n.x,r=n.y,o=n.r,i=t.x,s=t.y,u=t.r,c=i-e,a=s-r,d=u-o,l=Math.sqrt(c*c+a*a);return{x:(e+i+c/l*d)/2,y:(r+s+a/l*d)/2,r:(l+o+u)/2}}function d(n,t,e){var r=n.x,o=n.y,i=n.r,s=t.x,u=t.y,c=t.r,a=e.x,d=e.y,l=e.r,f=r-s,h=r-a,m=o-u,_=o-d,p=c-i,j=l-i,v=r*r+o*o-i*i,b=v-s*s-u*u+c*c,g=v-a*a-d*d+l*l,y=h*m-f*_,x=(m*g-_*b)/(2*y)-r,O=(_*p-m*j)/y,w=(h*b-f*g)/(2*y)-o,M=(f*j-h*p)/y,k=O*O+M*M-1,T=2*(i+x*O+w*M),E=x*x+w*w-i*i,N=-(k?(T+Math.sqrt(T*T-4*k*E))/(2*k):E/T);return{x:r+x+O*N,y:o+w+M*N,r:N}}var l=e("./node_modules/d3-hierarchy/src/array.js");t.a=function(n){for(var t,e,o=0,s=(n=Object(l.a)(l.b.call(n))).length,c=[];o<s;)t=n[o],e&&i(e,t)?++o:(e=u(c=r(c,t)),o=0);return e}},"./node_modules/d3-hierarchy/src/pack/index.js":function(n,t,e){"use strict";function r(n){return Math.sqrt(n.value)}function o(n){return function(t){t.children||(t.r=Math.max(0,+n(t)||0))}}function i(n,t){return function(e){if(r=e.children){var r,o,i,s=r.length,c=n(e)*t||0;if(c)for(o=0;o<s;++o)r[o].r+=c;if(i=Object(u.b)(r),c)for(o=0;o<s;++o)r[o].r-=c;e.r=i+c}}}function s(n){return function(t){var e=t.parent;t.r*=n,e&&(t.x=e.x+n*t.x,t.y=e.y+n*t.y)}}var u=e("./node_modules/d3-hierarchy/src/pack/siblings.js"),c=e("./node_modules/d3-hierarchy/src/accessors.js"),a=e("./node_modules/d3-hierarchy/src/constant.js");t.a=function(){function n(n){return n.x=e/2,n.y=u/2,t?n.eachBefore(o(t)).eachAfter(i(d,.5)).eachBefore(s(1)):n.eachBefore(o(r)).eachAfter(i(a.a,1)).eachAfter(i(d,n.r/Math.min(e,u))).eachBefore(s(Math.min(e,u)/(2*n.r))),n}var t=null,e=1,u=1,d=a.a;return n.radius=function(e){return arguments.length?(t=Object(c.a)(e),n):t},n.size=function(t){return arguments.length?(e=+t[0],u=+t[1],n):[e,u]},n.padding=function(t){return arguments.length?(d="function"==typeof t?t:Object(a.b)(+t),n):d},n}},"./node_modules/d3-hierarchy/src/pack/siblings.js":function(n,t,e){"use strict";function r(n,t,e){var r=n.x,o=n.y,i=t.r+e.r,s=n.r+e.r,u=t.x-r,c=t.y-o,a=u*u+c*c;if(a){var d=.5+((s*=s)-(i*=i))/(2*a),l=Math.sqrt(Math.max(0,2*i*(s+a)-(s-=a)*s-i*i))/(2*a);e.x=r+d*u+l*c,e.y=o+d*c-l*u}else e.x=r+s,e.y=o}function o(n,t){var e=t.x-n.x,r=t.y-n.y,o=n.r+t.r;return o*o-1e-6>e*e+r*r}function i(n){var t=n._,e=n.next._,r=t.r+e.r,o=(t.x*e.r+e.x*t.r)/r,i=(t.y*e.r+e.y*t.r)/r;return o*o+i*i}function s(n){this._=n,this.next=null,this.previous=null}function u(n){if(!(a=n.length))return 0;var t,e,u,a,d,l,f,h,m,_,p;if(t=n[0],t.x=0,t.y=0,!(a>1))return t.r;if(e=n[1],t.x=-e.r,e.x=t.r,e.y=0,!(a>2))return t.r+e.r;r(e,t,u=n[2]),t=new s(t),e=new s(e),u=new s(u),t.next=u.previous=e,e.next=t.previous=u,u.next=e.previous=t;n:for(f=3;f<a;++f){r(t._,e._,u=n[f]),u=new s(u),h=e.next,m=t.previous,_=e._.r,p=t._.r;do{if(_<=p){if(o(h._,u._)){e=h,t.next=e,e.previous=t,--f;continue n}_+=h._.r,h=h.next}else{if(o(m._,u._)){t=m,t.next=e,e.previous=t,--f;continue n}p+=m._.r,m=m.previous}}while(h!==m.next);for(u.previous=t,u.next=e,t.next=e.previous=e=u,d=i(t);(u=u.next)!==e;)(l=i(u))<d&&(t=u,d=l);e=t.next}for(t=[e._],u=e;(u=u.next)!==e;)t.push(u._);for(u=Object(c.a)(t),f=0;f<a;++f)t=n[f],t.x-=u.x,t.y-=u.y;return u.r}t.b=u;var c=e("./node_modules/d3-hierarchy/src/pack/enclose.js");t.a=function(n){return u(n),n}},"./node_modules/d3-hierarchy/src/partition.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-hierarchy/src/treemap/round.js"),o=e("./node_modules/d3-hierarchy/src/treemap/dice.js");t.a=function(){function n(n){var o=n.height+1;return n.x0=n.y0=s,n.x1=e,n.y1=i/o,n.eachBefore(t(i,o)),u&&n.eachBefore(r.a),n}function t(n,t){return function(e){e.children&&Object(o.a)(e,e.x0,n*(e.depth+1)/t,e.x1,n*(e.depth+2)/t);var r=e.x0,i=e.y0,u=e.x1-s,c=e.y1-s;u<r&&(r=u=(r+u)/2),c<i&&(i=c=(i+c)/2),e.x0=r,e.y0=i,e.x1=u,e.y1=c}}var e=1,i=1,s=0,u=!1;return n.round=function(t){return arguments.length?(u=!!t,n):u},n.size=function(t){return arguments.length?(e=+t[0],i=+t[1],n):[e,i]},n.padding=function(t){return arguments.length?(s=+t,n):s},n}},"./node_modules/d3-hierarchy/src/stratify.js":function(n,t,e){"use strict";function r(n){return n.id}function o(n){return n.parentId}var i=e("./node_modules/d3-hierarchy/src/accessors.js"),s=e("./node_modules/d3-hierarchy/src/hierarchy/index.js"),u="$",c={depth:-1},a={};t.a=function(){function n(n){var r,o,i,d,l,f,h,m=n.length,_=new Array(m),p={};for(o=0;o<m;++o)r=n[o],l=_[o]=new s.a(r),null!=(f=t(r,o,n))&&(f+="")&&(h=u+(l.id=f),p[h]=h in p?a:l);for(o=0;o<m;++o)if(l=_[o],null!=(f=e(n[o],o,n))&&(f+="")){if(!(d=p[u+f]))throw new Error("missing: "+f);if(d===a)throw new Error("ambiguous: "+f);d.children?d.children.push(l):d.children=[l],l.parent=d}else{if(i)throw new Error("multiple roots");i=l}if(!i)throw new Error("no root");if(i.parent=c,i.eachBefore(function(n){n.depth=n.parent.depth+1,--m}).eachBefore(s.b),i.parent=null,m>0)throw new Error("cycle");return i}var t=r,e=o;return n.id=function(e){return arguments.length?(t=Object(i.b)(e),n):t},n.parentId=function(t){return arguments.length?(e=Object(i.b)(t),n):e},n}},"./node_modules/d3-hierarchy/src/tree.js":function(n,t,e){"use strict";function r(n,t){return n.parent===t.parent?1:2}function o(n){var t=n.children;return t?t[0]:n.t}function i(n){var t=n.children;return t?t[t.length-1]:n.t}function s(n,t,e){var r=e/(t.i-n.i);t.c-=r,t.s+=e,n.c+=r,t.z+=e,t.m+=e}function u(n){for(var t,e=0,r=0,o=n.children,i=o.length;--i>=0;)t=o[i],t.z+=e,t.m+=e,e+=t.s+(r+=t.c)}function c(n,t,e){return n.a.parent===t.parent?n.a:e}function a(n,t){this._=n,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}function d(n){for(var t,e,r,o,i,s=new a(n,0),u=[s];t=u.pop();)if(r=t._.children)for(t.children=new Array(i=r.length),o=i-1;o>=0;--o)u.push(e=t.children[o]=new a(r[o],o)),e.parent=t;return(s.parent=new a(null,0)).children=[s],s}var l=e("./node_modules/d3-hierarchy/src/hierarchy/index.js");a.prototype=Object.create(l.a.prototype),t.a=function(){function n(n){var r=d(n);if(r.eachAfter(t),r.parent.m=-r.z,r.eachBefore(e),_)n.eachBefore(l);else{var o=n,i=n,s=n;n.eachBefore(function(n){n.x<o.x&&(o=n),n.x>i.x&&(i=n),n.depth>s.depth&&(s=n)});var u=o===i?1:f(o,i)/2,c=u-o.x,a=h/(i.x+u+c),p=m/(s.depth||1);n.eachBefore(function(n){n.x=(n.x+c)*a,n.y=n.depth*p})}return n}function t(n){var t=n.children,e=n.parent.children,r=n.i?e[n.i-1]:null;if(t){u(n);var o=(t[0].z+t[t.length-1].z)/2;r?(n.z=r.z+f(n._,r._),n.m=n.z-o):n.z=o}else r&&(n.z=r.z+f(n._,r._));n.parent.A=a(n,r,n.parent.A||e[0])}function e(n){n._.x=n.z+n.parent.m,n.m+=n.parent.m}function a(n,t,e){if(t){for(var r,u=n,a=n,d=t,l=u.parent.children[0],h=u.m,m=a.m,_=d.m,p=l.m;d=i(d),u=o(u),d&&u;)l=o(l),a=i(a),a.a=n,r=d.z+_-u.z-h+f(d._,u._),r>0&&(s(c(d,n,e),n,r),h+=r,m+=r),_+=d.m,h+=u.m,p+=l.m,m+=a.m;d&&!i(a)&&(a.t=d,a.m+=_-m),u&&!o(l)&&(l.t=u,l.m+=h-p,e=n)}return e}function l(n){n.x*=h,n.y=n.depth*m}var f=r,h=1,m=1,_=null;return n.separation=function(t){return arguments.length?(f=t,n):f},n.size=function(t){return arguments.length?(_=!1,h=+t[0],m=+t[1],n):_?null:[h,m]},n.nodeSize=function(t){return arguments.length?(_=!0,h=+t[0],m=+t[1],n):_?[h,m]:null},n}},"./node_modules/d3-hierarchy/src/treemap/binary.js":function(n,t,e){"use strict";t.a=function(n,t,e,r,o){function i(n,t,e,r,o,s,u){if(n>=t-1){var a=c[n];return a.x0=r,a.y0=o,a.x1=s,a.y1=u,void 0}for(var l=d[n],f=e/2+l,h=n+1,m=t-1;h<m;){var _=h+m>>>1;d[_]<f?h=_+1:m=_}f-d[h-1]<d[h]-f&&n+1<h&&--h;var p=d[h]-l,j=e-p;if(s-r>u-o){var v=(r*j+s*p)/e;i(n,h,p,r,o,v,u),i(h,t,j,v,o,s,u)}else{var b=(o*j+u*p)/e;i(n,h,p,r,o,s,b),i(h,t,j,r,b,s,u)}}var s,u,c=n.children,a=c.length,d=new Array(a+1);for(d[0]=u=s=0;s<a;++s)d[s+1]=u+=c[s].value;i(0,a,n.value,t,e,r,o)}},"./node_modules/d3-hierarchy/src/treemap/dice.js":function(n,t,e){"use strict";t.a=function(n,t,e,r,o){for(var i,s=n.children,u=-1,c=s.length,a=n.value&&(r-t)/n.value;++u<c;)i=s[u],i.y0=e,i.y1=o,i.x0=t,i.x1=t+=i.value*a}},"./node_modules/d3-hierarchy/src/treemap/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-hierarchy/src/treemap/round.js"),o=e("./node_modules/d3-hierarchy/src/treemap/squarify.js"),i=e("./node_modules/d3-hierarchy/src/accessors.js"),s=e("./node_modules/d3-hierarchy/src/constant.js");t.a=function(){function n(n){return n.x0=n.y0=0,n.x1=c,n.y1=a,n.eachBefore(t),d=[0],u&&n.eachBefore(r.a),n}function t(n){var t=d[n.depth],r=n.x0+t,o=n.y0+t,i=n.x1-t,s=n.y1-t;i<r&&(r=i=(r+i)/2),s<o&&(o=s=(o+s)/2),n.x0=r,n.y0=o,n.x1=i,n.y1=s,n.children&&(t=d[n.depth+1]=l(n)/2,r+=_(n)-t,o+=f(n)-t,i-=h(n)-t,s-=m(n)-t,i<r&&(r=i=(r+i)/2),s<o&&(o=s=(o+s)/2),e(n,r,o,i,s))}var e=o.a,u=!1,c=1,a=1,d=[0],l=s.a,f=s.a,h=s.a,m=s.a,_=s.a;return n.round=function(t){return arguments.length?(u=!!t,n):u},n.size=function(t){return arguments.length?(c=+t[0],a=+t[1],n):[c,a]},n.tile=function(t){return arguments.length?(e=Object(i.b)(t),n):e},n.padding=function(t){return arguments.length?n.paddingInner(t).paddingOuter(t):n.paddingInner()},n.paddingInner=function(t){return arguments.length?(l="function"==typeof t?t:Object(s.b)(+t),n):l},n.paddingOuter=function(t){return arguments.length?n.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):n.paddingTop()},n.paddingTop=function(t){return arguments.length?(f="function"==typeof t?t:Object(s.b)(+t),n):f},n.paddingRight=function(t){return arguments.length?(h="function"==typeof t?t:Object(s.b)(+t),n):h},n.paddingBottom=function(t){return arguments.length?(m="function"==typeof t?t:Object(s.b)(+t),n):m},n.paddingLeft=function(t){return arguments.length?(_="function"==typeof t?t:Object(s.b)(+t),n):_},n}},"./node_modules/d3-hierarchy/src/treemap/resquarify.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-hierarchy/src/treemap/dice.js"),o=e("./node_modules/d3-hierarchy/src/treemap/slice.js"),i=e("./node_modules/d3-hierarchy/src/treemap/squarify.js");t.a=function n(t){function e(n,e,s,u,c){if((a=n._squarify)&&a.ratio===t)for(var a,d,l,f,h,m=-1,_=a.length,p=n.value;++m<_;){for(d=a[m],l=d.children,f=d.value=0,h=l.length;f<h;++f)d.value+=l[f].value;d.dice?Object(r.a)(d,e,s,u,s+=(c-s)*d.value/p):Object(o.a)(d,e,s,e+=(u-e)*d.value/p,c),p-=d.value}else n._squarify=a=Object(i.c)(t,n,e,s,u,c),a.ratio=t}return e.ratio=function(t){return n((t=+t)>1?t:1)},e}(i.b)},"./node_modules/d3-hierarchy/src/treemap/round.js":function(n,t,e){"use strict";t.a=function(n){n.x0=Math.round(n.x0),n.y0=Math.round(n.y0),n.x1=Math.round(n.x1),n.y1=Math.round(n.y1)}},"./node_modules/d3-hierarchy/src/treemap/slice.js":function(n,t,e){"use strict";t.a=function(n,t,e,r,o){for(var i,s=n.children,u=-1,c=s.length,a=n.value&&(o-e)/n.value;++u<c;)i=s[u],i.x0=t,i.x1=r,i.y0=e,i.y1=e+=i.value*a}},"./node_modules/d3-hierarchy/src/treemap/sliceDice.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-hierarchy/src/treemap/dice.js"),o=e("./node_modules/d3-hierarchy/src/treemap/slice.js");t.a=function(n,t,e,i,s){(1&n.depth?o.a:r.a)(n,t,e,i,s)}},"./node_modules/d3-hierarchy/src/treemap/squarify.js":function(n,t,e){"use strict";function r(n,t,e,r,s,u){for(var c,a,d,l,f,h,m,_,p,j,v,b=[],g=t.children,y=0,x=0,O=g.length,w=t.value;y<O;){d=s-e,l=u-r;do{f=g[x++].value}while(!f&&x<O);for(h=m=f,j=Math.max(l/d,d/l)/(w*n),v=f*f*j,p=Math.max(m/v,v/h);x<O;++x){if(f+=a=g[x].value,a<h&&(h=a),a>m&&(m=a),v=f*f*j,(_=Math.max(m/v,v/h))>p){f-=a;break}p=_}b.push(c={value:f,dice:d<l,children:g.slice(y,x)}),c.dice?Object(o.a)(c,e,r,s,w?r+=l*f/w:u):Object(i.a)(c,e,r,w?e+=d*f/w:s,u),w-=f,y=x}return b}e.d(t,"b",function(){return s}),t.c=r;var o=e("./node_modules/d3-hierarchy/src/treemap/dice.js"),i=e("./node_modules/d3-hierarchy/src/treemap/slice.js"),s=(1+Math.sqrt(5))/2;t.a=function n(t){function e(n,e,o,i,s){r(t,n,e,o,i,s)}return e.ratio=function(t){return n((t=+t)>1?t:1)},e}(s)},"./node_modules/d3-interpolate/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-interpolate/src/value.js");e.d(t,"a",function(){return r.a});var o=e("./node_modules/d3-interpolate/src/array.js");e.d(t,"b",function(){return o.a});var i=e("./node_modules/d3-interpolate/src/basis.js");e.d(t,"c",function(){return i.b});var s=e("./node_modules/d3-interpolate/src/basisClosed.js");e.d(t,"d",function(){return s.a});var u=e("./node_modules/d3-interpolate/src/date.js");e.d(t,"g",function(){return u.a});var c=e("./node_modules/d3-interpolate/src/number.js");e.d(t,"m",function(){return c.a});var a=e("./node_modules/d3-interpolate/src/object.js");e.d(t,"n",function(){return a.a});var d=e("./node_modules/d3-interpolate/src/round.js");e.d(t,"r",function(){return d.a});var l=e("./node_modules/d3-interpolate/src/string.js");e.d(t,"s",function(){return l.a});var f=e("./node_modules/d3-interpolate/src/transform/index.js");e.d(t,"t",function(){return f.a}),e.d(t,"u",function(){return f.b});var h=e("./node_modules/d3-interpolate/src/zoom.js");e.d(t,"v",function(){return h.a});var m=e("./node_modules/d3-interpolate/src/rgb.js");e.d(t,"o",function(){return m.a}),e.d(t,"p",function(){return m.b}),e.d(t,"q",function(){return m.c});var _=e("./node_modules/d3-interpolate/src/hsl.js");e.d(t,"j",function(){return _.a}),e.d(t,"k",function(){return _.b});var p=e("./node_modules/d3-interpolate/src/lab.js");e.d(t,"l",function(){return p.a});var j=e("./node_modules/d3-interpolate/src/hcl.js");e.d(t,"h",function(){return j.a}),e.d(t,"i",function(){return j.b});var v=e("./node_modules/d3-interpolate/src/cubehelix.js");e.d(t,"e",function(){return v.b}),e.d(t,"f",function(){return v.a});var b=e("./node_modules/d3-interpolate/src/quantize.js");e.d(t,"w",function(){return b.a})},"./node_modules/d3-interpolate/src/array.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-interpolate/src/value.js");t.a=function(n,t){var e,o=t?t.length:0,i=n?Math.min(o,n.length):0,s=new Array(i),u=new Array(o);for(e=0;e<i;++e)s[e]=Object(r.a)(n[e],t[e]);for(;e<o;++e)u[e]=t[e];return function(n){for(e=0;e<i;++e)u[e]=s[e](n);return u}}},"./node_modules/d3-interpolate/src/basis.js":function(n,t,e){"use strict";function r(n,t,e,r,o){var i=n*n,s=i*n;return((1-3*n+3*i-s)*t+(4-6*i+3*s)*e+(1+3*n+3*i-3*s)*r+s*o)/6}t.a=r,t.b=function(n){var t=n.length-1;return function(e){var o=e<=0?e=0:e>=1?(e=1,t-1):Math.floor(e*t),i=n[o],s=n[o+1],u=o>0?n[o-1]:2*i-s,c=o<t-1?n[o+2]:2*s-i;return r((e-o/t)*t,u,i,s,c)}}},"./node_modules/d3-interpolate/src/basisClosed.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-interpolate/src/basis.js");t.a=function(n){var t=n.length;return function(e){var o=Math.floor(((e%=1)<0?++e:e)*t),i=n[(o+t-1)%t],s=n[o%t],u=n[(o+1)%t],c=n[(o+2)%t];return Object(r.a)((e-o/t)*t,i,s,u,c)}}},"./node_modules/d3-interpolate/src/color.js":function(n,t,e){"use strict";function r(n,t){return function(e){return n+e*t}}function o(n,t,e){return n=Math.pow(n,e),t=Math.pow(t,e)-n,e=1/e,function(r){return Math.pow(n+r*t,e)}}function i(n,t){var e=t-n;return e?r(n,e>180||e<-180?e-360*Math.round(e/360):e):Object(c.a)(isNaN(n)?t:n)}function s(n){return 1==(n=+n)?u:function(t,e){return e-t?o(t,e,n):Object(c.a)(isNaN(t)?e:t)}}function u(n,t){var e=t-n;return e?r(n,e):Object(c.a)(isNaN(n)?t:n)}t.c=i,t.b=s,t.a=u;var c=e("./node_modules/d3-interpolate/src/constant.js")},"./node_modules/d3-interpolate/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-interpolate/src/cubehelix.js":function(n,t,e){"use strict";function r(n){return function t(e){function r(t,r){var s=n((t=Object(o.b)(t)).h,(r=Object(o.b)(r)).h),u=Object(i.a)(t.s,r.s),c=Object(i.a)(t.l,r.l),a=Object(i.a)(t.opacity,r.opacity);return function(n){return t.h=s(n),t.s=u(n),t.l=c(Math.pow(n,e)),t.opacity=a(n),t+""}}return e=+e,r.gamma=t,r}(1)}e.d(t,"a",function(){return s});var o=e("./node_modules/d3-color/index.js"),i=e("./node_modules/d3-interpolate/src/color.js");t.b=r(i.c);var s=r(i.a)},"./node_modules/d3-interpolate/src/date.js":function(n,t,e){"use strict";t.a=function(n,t){var e=new Date;return n=+n,t-=n,function(r){return e.setTime(n+t*r),e}}},"./node_modules/d3-interpolate/src/hcl.js":function(n,t,e){"use strict";function r(n){return function(t,e){var r=n((t=Object(o.c)(t)).h,(e=Object(o.c)(e)).h),s=Object(i.a)(t.c,e.c),u=Object(i.a)(t.l,e.l),c=Object(i.a)(t.opacity,e.opacity);return function(n){return t.h=r(n),t.c=s(n),t.l=u(n),t.opacity=c(n),t+""}}}e.d(t,"b",function(){return s});var o=e("./node_modules/d3-color/index.js"),i=e("./node_modules/d3-interpolate/src/color.js");t.a=r(i.c);var s=r(i.a)},"./node_modules/d3-interpolate/src/hsl.js":function(n,t,e){"use strict";function r(n){return function(t,e){var r=n((t=Object(o.d)(t)).h,(e=Object(o.d)(e)).h),s=Object(i.a)(t.s,e.s),u=Object(i.a)(t.l,e.l),c=Object(i.a)(t.opacity,e.opacity);return function(n){return t.h=r(n),t.s=s(n),t.l=u(n),t.opacity=c(n),t+""}}}e.d(t,"b",function(){return s});var o=e("./node_modules/d3-color/index.js"),i=e("./node_modules/d3-interpolate/src/color.js");t.a=r(i.c);var s=r(i.a)},"./node_modules/d3-interpolate/src/lab.js":function(n,t,e){"use strict";function r(n,t){var e=Object(i.a)((n=Object(o.e)(n)).l,(t=Object(o.e)(t)).l),r=Object(i.a)(n.a,t.a),s=Object(i.a)(n.b,t.b),u=Object(i.a)(n.opacity,t.opacity);return function(t){return n.l=e(t),n.a=r(t),n.b=s(t),n.opacity=u(t),n+""}}t.a=r;var o=e("./node_modules/d3-color/index.js"),i=e("./node_modules/d3-interpolate/src/color.js")},"./node_modules/d3-interpolate/src/number.js":function(n,t,e){"use strict";t.a=function(n,t){return n=+n,t-=n,function(e){return n+t*e}}},"./node_modules/d3-interpolate/src/object.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-interpolate/src/value.js");t.a=function(n,t){var e,o={},i={};null!==n&&"object"==typeof n||(n={}),null!==t&&"object"==typeof t||(t={});for(e in t)e in n?o[e]=Object(r.a)(n[e],t[e]):i[e]=t[e];return function(n){for(e in o)i[e]=o[e](n);return i}}},"./node_modules/d3-interpolate/src/quantize.js":function(n,t,e){"use strict";t.a=function(n,t){for(var e=new Array(t),r=0;r<t;++r)e[r]=n(r/(t-1));return e}},"./node_modules/d3-interpolate/src/rgb.js":function(n,t,e){"use strict";function r(n){return function(t){var e,r,i=t.length,s=new Array(i),u=new Array(i),c=new Array(i);for(e=0;e<i;++e)r=Object(o.f)(t[e]),s[e]=r.r||0,u[e]=r.g||0,c[e]=r.b||0;return s=n(s),u=n(u),c=n(c),r.opacity=1,function(n){return r.r=s(n),r.g=u(n),r.b=c(n),r+""}}}e.d(t,"b",function(){return c}),e.d(t,"c",function(){return a});var o=e("./node_modules/d3-color/index.js"),i=e("./node_modules/d3-interpolate/src/basis.js"),s=e("./node_modules/d3-interpolate/src/basisClosed.js"),u=e("./node_modules/d3-interpolate/src/color.js");t.a=function n(t){function e(n,t){var e=r((n=Object(o.f)(n)).r,(t=Object(o.f)(t)).r),i=r(n.g,t.g),s=r(n.b,t.b),c=Object(u.a)(n.opacity,t.opacity);return function(t){return n.r=e(t),n.g=i(t),n.b=s(t),n.opacity=c(t),n+""}}var r=Object(u.b)(t);return e.gamma=n,e}(1);var c=r(i.b),a=r(s.a)},"./node_modules/d3-interpolate/src/round.js":function(n,t,e){"use strict";t.a=function(n,t){return n=+n,t-=n,function(e){return Math.round(n+t*e)}}},"./node_modules/d3-interpolate/src/string.js":function(n,t,e){"use strict";function r(n){return function(){return n}}function o(n){return function(t){return n(t)+""}}var i=e("./node_modules/d3-interpolate/src/number.js"),s=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,u=new RegExp(s.source,"g");t.a=function(n,t){var e,c,a,d=s.lastIndex=u.lastIndex=0,l=-1,f=[],h=[];for(n+="",t+="";(e=s.exec(n))&&(c=u.exec(t));)(a=c.index)>d&&(a=t.slice(d,a),f[l]?f[l]+=a:f[++l]=a),(e=e[0])===(c=c[0])?f[l]?f[l]+=c:f[++l]=c:(f[++l]=null,h.push({i:l,x:Object(i.a)(e,c)})),d=u.lastIndex;return d<t.length&&(a=t.slice(d),f[l]?f[l]+=a:f[++l]=a),f.length<2?h[0]?o(h[0].x):r(t):(t=h.length,function(n){for(var e,r=0;r<t;++r)f[(e=h[r]).i]=e.x(n);return f.join("")})}},"./node_modules/d3-interpolate/src/transform/decompose.js":function(n,t,e){"use strict";e.d(t,"b",function(){return o});var r=180/Math.PI,o={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};t.a=function(n,t,e,o,i,s){var u,c,a;return(u=Math.sqrt(n*n+t*t))&&(n/=u,t/=u),(a=n*e+t*o)&&(e-=n*a,o-=t*a),(c=Math.sqrt(e*e+o*o))&&(e/=c,o/=c,a/=c),n*o<t*e&&(n=-n,t=-t,a=-a,u=-u),{translateX:i,translateY:s,rotate:Math.atan2(t,n)*r,skewX:Math.atan(a)*r,scaleX:u,scaleY:c}}},"./node_modules/d3-interpolate/src/transform/index.js":function(n,t,e){"use strict";function r(n,t,e,r){function i(n){return n.length?n.pop()+" ":""}function s(n,r,i,s,u,c){if(n!==i||r!==s){var a=u.push("translate(",null,t,null,e);c.push({i:a-4,x:Object(o.a)(n,i)},{i:a-2,x:Object(o.a)(r,s)})}else(i||s)&&u.push("translate("+i+t+s+e)}function u(n,t,e,s){n!==t?(n-t>180?t+=360:t-n>180&&(n+=360),s.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Object(o.a)(n,t)})):t&&e.push(i(e)+"rotate("+t+r)}function c(n,t,e,s){n!==t?s.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Object(o.a)(n,t)}):t&&e.push(i(e)+"skewX("+t+r)}function a(n,t,e,r,s,u){if(n!==e||t!==r){var c=s.push(i(s)+"scale(",null,",",null,")");u.push({i:c-4,x:Object(o.a)(n,e)},{i:c-2,x:Object(o.a)(t,r)})}else 1===e&&1===r||s.push(i(s)+"scale("+e+","+r+")")}return function(t,e){var r=[],o=[];return t=n(t),e=n(e),s(t.translateX,t.translateY,e.translateX,e.translateY,r,o),u(t.rotate,e.rotate,r,o),c(t.skewX,e.skewX,r,o),a(t.scaleX,t.scaleY,e.scaleX,e.scaleY,r,o),t=e=null,function(n){for(var t,e=-1,i=o.length;++e<i;)r[(t=o[e]).i]=t.x(n);return r.join("")}}}e.d(t,"a",function(){return s}),e.d(t,"b",function(){return u});var o=e("./node_modules/d3-interpolate/src/number.js"),i=e("./node_modules/d3-interpolate/src/transform/parse.js"),s=r(i.a,"px, ","px)","deg)"),u=r(i.b,", ",")",")")},"./node_modules/d3-interpolate/src/transform/parse.js":function(n,t,e){"use strict";function r(n){return"none"===n?a.b:(i||(i=document.createElement("DIV"),s=document.documentElement,u=document.defaultView),i.style.transform=n,n=u.getComputedStyle(s.appendChild(i),null).getPropertyValue("transform"),s.removeChild(i),n=n.slice(7,-1).split(","),Object(a.a)(+n[0],+n[1],+n[2],+n[3],+n[4],+n[5]))}function o(n){return null==n?a.b:(c||(c=document.createElementNS("http://www.w3.org/2000/svg","g")),c.setAttribute("transform",n),(n=c.transform.baseVal.consolidate())?(n=n.matrix,Object(a.a)(n.a,n.b,n.c,n.d,n.e,n.f)):a.b)}t.a=r,t.b=o;var i,s,u,c,a=e("./node_modules/d3-interpolate/src/transform/decompose.js")},"./node_modules/d3-interpolate/src/value.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-color/index.js"),o=e("./node_modules/d3-interpolate/src/rgb.js"),i=e("./node_modules/d3-interpolate/src/array.js"),s=e("./node_modules/d3-interpolate/src/date.js"),u=e("./node_modules/d3-interpolate/src/number.js"),c=e("./node_modules/d3-interpolate/src/object.js"),a=e("./node_modules/d3-interpolate/src/string.js"),d=e("./node_modules/d3-interpolate/src/constant.js");t.a=function(n,t){var e,l=typeof t;return null==t||"boolean"===l?Object(d.a)(t):("number"===l?u.a:"string"===l?(e=Object(r.a)(t))?(t=e,o.a):a.a:t instanceof r.a?o.a:t instanceof Date?s.a:Array.isArray(t)?i.a:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?c.a:u.a)(n,t)}},"./node_modules/d3-interpolate/src/zoom.js":function(n,t,e){"use strict";function r(n){return((n=Math.exp(n))+1/n)/2}function o(n){return((n=Math.exp(n))-1/n)/2}function i(n){return((n=Math.exp(2*n))-1)/(n+1)}var s=Math.SQRT2;t.a=function(n,t){var e,u,c=n[0],a=n[1],d=n[2],l=t[0],f=t[1],h=t[2],m=l-c,_=f-a,p=m*m+_*_;if(p<1e-12)u=Math.log(h/d)/s,e=function(n){return[c+n*m,a+n*_,d*Math.exp(s*n*u)]};else{var j=Math.sqrt(p),v=(h*h-d*d+4*p)/(2*d*2*j),b=(h*h-d*d-4*p)/(2*h*2*j),g=Math.log(Math.sqrt(v*v+1)-v),y=Math.log(Math.sqrt(b*b+1)-b);u=(y-g)/s,e=function(n){var t=n*u,e=r(g),l=d/(2*j)*(e*i(s*t+g)-o(g));return[c+l*m,a+l*_,d*e/r(s*t+g)]}}return e.duration=1e3*u,e}},"./node_modules/d3-path/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-path/src/path.js");e.d(t,"a",function(){return r.a})},"./node_modules/d3-path/src/path.js":function(n,t,e){"use strict";function r(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function o(){return new r}var i=Math.PI,s=2*i,u=s-1e-6;r.prototype=o.prototype={constructor:r,moveTo:function(n,t){this._+="M"+(this._x0=this._x1=+n)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(n,t){this._+="L"+(this._x1=+n)+","+(this._y1=+t)},quadraticCurveTo:function(n,t,e,r){this._+="Q"+ +n+","+ +t+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(n,t,e,r,o,i){this._+="C"+ +n+","+ +t+","+ +e+","+ +r+","+(this._x1=+o)+","+(this._y1=+i)},arcTo:function(n,t,e,r,o){n=+n,t=+t,e=+e,r=+r,o=+o;var s=this._x1,u=this._y1,c=e-n,a=r-t,d=s-n,l=u-t,f=d*d+l*l;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=n)+","+(this._y1=t);else if(f>1e-6)if(Math.abs(l*c-a*d)>1e-6&&o){var h=e-s,m=r-u,_=c*c+a*a,p=h*h+m*m,j=Math.sqrt(_),v=Math.sqrt(f),b=o*Math.tan((i-Math.acos((_+f-p)/(2*j*v)))/2),g=b/v,y=b/j;Math.abs(g-1)>1e-6&&(this._+="L"+(n+g*d)+","+(t+g*l)),this._+="A"+o+","+o+",0,0,"+ +(l*h>d*m)+","+(this._x1=n+y*c)+","+(this._y1=t+y*a)}else this._+="L"+(this._x1=n)+","+(this._y1=t);else;},arc:function(n,t,e,r,o,c){n=+n,t=+t,e=+e;var a=e*Math.cos(r),d=e*Math.sin(r),l=n+a,f=t+d,h=1^c,m=c?r-o:o-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+l+","+f:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+l+","+f),e&&(m<0&&(m=m%s+s),m>u?this._+="A"+e+","+e+",0,1,"+h+","+(n-a)+","+(t-d)+"A"+e+","+e+",0,1,"+h+","+(this._x1=l)+","+(this._y1=f):m>1e-6&&(this._+="A"+e+","+e+",0,"+ +(m>=i)+","+h+","+(this._x1=n+e*Math.cos(o))+","+(this._y1=t+e*Math.sin(o))))},rect:function(n,t,e,r){this._+="M"+(this._x0=this._x1=+n)+","+(this._y0=this._y1=+t)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}},t.a=o},"./node_modules/d3-polygon/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-polygon/src/area.js");e.d(t,"a",function(){return r.a});var o=e("./node_modules/d3-polygon/src/centroid.js");e.d(t,"b",function(){return o.a});var i=e("./node_modules/d3-polygon/src/hull.js");e.d(t,"d",function(){return i.a});var s=e("./node_modules/d3-polygon/src/contains.js");e.d(t,"c",function(){return s.a});var u=e("./node_modules/d3-polygon/src/length.js");e.d(t,"e",function(){return u.a})},"./node_modules/d3-polygon/src/area.js":function(n,t,e){"use strict";t.a=function(n){for(var t,e=-1,r=n.length,o=n[r-1],i=0;++e<r;)t=o,o=n[e],i+=t[1]*o[0]-t[0]*o[1];return i/2}},"./node_modules/d3-polygon/src/centroid.js":function(n,t,e){"use strict";t.a=function(n){for(var t,e,r=-1,o=n.length,i=0,s=0,u=n[o-1],c=0;++r<o;)t=u,u=n[r],c+=e=t[0]*u[1]-u[0]*t[1],i+=(t[0]+u[0])*e,s+=(t[1]+u[1])*e;return c*=3,[i/c,s/c]}},"./node_modules/d3-polygon/src/contains.js":function(n,t,e){"use strict";t.a=function(n,t){for(var e,r,o=n.length,i=n[o-1],s=t[0],u=t[1],c=i[0],a=i[1],d=!1,l=0;l<o;++l)i=n[l],e=i[0],r=i[1],r>u!=a>u&&s<(c-e)*(u-r)/(a-r)+e&&(d=!d),c=e,a=r;return d}},"./node_modules/d3-polygon/src/cross.js":function(n,t,e){"use strict";t.a=function(n,t,e){return(t[0]-n[0])*(e[1]-n[1])-(t[1]-n[1])*(e[0]-n[0])}},"./node_modules/d3-polygon/src/hull.js":function(n,t,e){"use strict";function r(n,t){return n[0]-t[0]||n[1]-t[1]}function o(n){for(var t=n.length,e=[0,1],r=2,o=2;o<t;++o){for(;r>1&&Object(i.a)(n[e[r-2]],n[e[r-1]],n[o])<=0;)--r;e[r++]=o}return e.slice(0,r)}var i=e("./node_modules/d3-polygon/src/cross.js");t.a=function(n){if((e=n.length)<3)return null;var t,e,i=new Array(e),s=new Array(e);for(t=0;t<e;++t)i[t]=[+n[t][0],+n[t][1],t];for(i.sort(r),t=0;t<e;++t)s[t]=[i[t][0],-i[t][1]];var u=o(i),c=o(s),a=c[0]===u[0],d=c[c.length-1]===u[u.length-1],l=[];for(t=u.length-1;t>=0;--t)l.push(n[i[u[t]][2]]);for(t=+a;t<c.length-d;++t)l.push(n[i[c[t]][2]]);return l}},"./node_modules/d3-polygon/src/length.js":function(n,t,e){"use strict";t.a=function(n){for(var t,e,r=-1,o=n.length,i=n[o-1],s=i[0],u=i[1],c=0;++r<o;)t=s,e=u,i=n[r],s=i[0],u=i[1],t-=s,e-=u,c+=Math.sqrt(t*t+e*e);return c}},"./node_modules/d3-quadtree/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-quadtree/src/quadtree.js");e.d(t,"a",function(){return r.a})},"./node_modules/d3-quadtree/src/add.js":function(n,t,e){"use strict";function r(n,t,e,r){if(isNaN(t)||isNaN(e))return n;var o,i,s,u,c,a,d,l,f,h=n._root,m={data:r},_=n._x0,p=n._y0,j=n._x1,v=n._y1;if(!h)return n._root=m,n;for(;h.length;)if((a=t>=(i=(_+j)/2))?_=i:j=i,(d=e>=(s=(p+v)/2))?p=s:v=s,o=h,!(h=h[l=d<<1|a]))return o[l]=m,n;if(u=+n._x.call(null,h.data),c=+n._y.call(null,h.data),t===u&&e===c)return m.next=h,o?o[l]=m:n._root=m,n;do{o=o?o[l]=new Array(4):n._root=new Array(4),(a=t>=(i=(_+j)/2))?_=i:j=i,(d=e>=(s=(p+v)/2))?p=s:v=s}while((l=d<<1|a)==(f=(c>=s)<<1|u>=i));return o[f]=h,o[l]=m,n}function o(n){var t,e,o,i,s=n.length,u=new Array(s),c=new Array(s),a=1/0,d=1/0,l=-1/0,f=-1/0;for(e=0;e<s;++e)isNaN(o=+this._x.call(null,t=n[e]))||isNaN(i=+this._y.call(null,t))||(u[e]=o,c[e]=i,o<a&&(a=o),o>l&&(l=o),i<d&&(d=i),i>f&&(f=i));for(l<a&&(a=this._x0,l=this._x1),f<d&&(d=this._y0,f=this._y1),this.cover(a,d).cover(l,f),e=0;e<s;++e)r(this,u[e],c[e],n[e]);return this}t.a=o,t.b=function(n){var t=+this._x.call(null,n),e=+this._y.call(null,n);return r(this.cover(t,e),t,e,n)}},"./node_modules/d3-quadtree/src/cover.js":function(n,t,e){"use strict";t.a=function(n,t){if(isNaN(n=+n)||isNaN(t=+t))return this;var e=this._x0,r=this._y0,o=this._x1,i=this._y1;if(isNaN(e))o=(e=Math.floor(n))+1,i=(r=Math.floor(t))+1;else{if(!(e>n||n>o||r>t||t>i))return this;var s,u,c=o-e,a=this._root;switch(u=(t<(r+i)/2)<<1|n<(e+o)/2){case 0:do{s=new Array(4),s[u]=a,a=s}while(c*=2,o=e+c,i=r+c,n>o||t>i);break;case 1:do{s=new Array(4),s[u]=a,a=s}while(c*=2,e=o-c,i=r+c,e>n||t>i);break;case 2:do{s=new Array(4),s[u]=a,a=s}while(c*=2,o=e+c,r=i-c,n>o||r>t);break;case 3:do{s=new Array(4),s[u]=a,a=s}while(c*=2,e=o-c,r=i-c,e>n||r>t)}this._root&&this._root.length&&(this._root=a)}return this._x0=e,this._y0=r,this._x1=o,this._y1=i,this}},"./node_modules/d3-quadtree/src/data.js":function(n,t,e){"use strict";t.a=function(){var n=[];return this.visit(function(t){if(!t.length)do{n.push(t.data)}while(t=t.next)}),n}},"./node_modules/d3-quadtree/src/extent.js":function(n,t,e){"use strict";t.a=function(n){return arguments.length?this.cover(+n[0][0],+n[0][1]).cover(+n[1][0],+n[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]}},"./node_modules/d3-quadtree/src/find.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-quadtree/src/quad.js");t.a=function(n,t,e){var o,i,s,u,c,a,d,l=this._x0,f=this._y0,h=this._x1,m=this._y1,_=[],p=this._root;for(p&&_.push(new r.a(p,l,f,h,m)),null==e?e=1/0:(l=n-e,f=t-e,h=n+e,m=t+e,e*=e);a=_.pop();)if(!(!(p=a.node)||(i=a.x0)>h||(s=a.y0)>m||(u=a.x1)<l||(c=a.y1)<f))if(p.length){var j=(i+u)/2,v=(s+c)/2;_.push(new r.a(p[3],j,v,u,c),new r.a(p[2],i,v,j,c),new r.a(p[1],j,s,u,v),new r.a(p[0],i,s,j,v)),(d=(t>=v)<<1|n>=j)&&(a=_[_.length-1],_[_.length-1]=_[_.length-1-d],_[_.length-1-d]=a)}else{var b=n-+this._x.call(null,p.data),g=t-+this._y.call(null,p.data),y=b*b+g*g;if(y<e){var x=Math.sqrt(e=y);l=n-x,f=t-x,h=n+x,m=t+x,o=p.data}}return o}},"./node_modules/d3-quadtree/src/quad.js":function(n,t,e){"use strict";t.a=function(n,t,e,r,o){this.node=n,this.x0=t,this.y0=e,this.x1=r,this.y1=o}},"./node_modules/d3-quadtree/src/quadtree.js":function(n,t,e){"use strict";function r(n,t,e){var r=new o(null==t?p.b:t,null==e?j.b:e,NaN,NaN,NaN,NaN);return null==n?r:r.addAll(n)}function o(n,t,e,r,o,i){this._x=n,this._y=t,this._x0=e,this._y0=r,this._x1=o,this._y1=i,this._root=void 0}function i(n){for(var t={data:n.data},e=t;n=n.next;)e=e.next={data:n.data};return t}t.a=r;var s=e("./node_modules/d3-quadtree/src/add.js"),u=e("./node_modules/d3-quadtree/src/cover.js"),c=e("./node_modules/d3-quadtree/src/data.js"),a=e("./node_modules/d3-quadtree/src/extent.js"),d=e("./node_modules/d3-quadtree/src/find.js"),l=e("./node_modules/d3-quadtree/src/remove.js"),f=e("./node_modules/d3-quadtree/src/root.js"),h=e("./node_modules/d3-quadtree/src/size.js"),m=e("./node_modules/d3-quadtree/src/visit.js"),_=e("./node_modules/d3-quadtree/src/visitAfter.js"),p=e("./node_modules/d3-quadtree/src/x.js"),j=e("./node_modules/d3-quadtree/src/y.js"),v=r.prototype=o.prototype;v.copy=function(){var n,t,e=new o(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=i(r),e;for(n=[{source:r,target:e._root=new Array(4)}];r=n.pop();)for(var s=0;s<4;++s)(t=r.source[s])&&(t.length?n.push({source:t,target:r.target[s]=new Array(4)}):r.target[s]=i(t));return e},v.add=s.b,v.addAll=s.a,v.cover=u.a,v.data=c.a,v.extent=a.a,v.find=d.a,v.remove=l.a,v.removeAll=l.b,v.root=f.a,v.size=h.a,v.visit=m.a,v.visitAfter=_.a,v.x=p.a,v.y=j.a},"./node_modules/d3-quadtree/src/remove.js":function(n,t,e){"use strict";function r(n){for(var t=0,e=n.length;t<e;++t)this.remove(n[t]);return this}t.b=r,t.a=function(n){if(isNaN(i=+this._x.call(null,n))||isNaN(s=+this._y.call(null,n)))return this;var t,e,r,o,i,s,u,c,a,d,l,f,h=this._root,m=this._x0,_=this._y0,p=this._x1,j=this._y1;if(!h)return this;if(h.length)for(;;){if((a=i>=(u=(m+p)/2))?m=u:p=u,(d=s>=(c=(_+j)/2))?_=c:j=c,t=h,!(h=h[l=d<<1|a]))return this;if(!h.length)break;(t[l+1&3]||t[l+2&3]||t[l+3&3])&&(e=t,f=l)}for(;h.data!==n;)if(r=h,!(h=h.next))return this;return(o=h.next)&&delete h.next,r?(o?r.next=o:delete r.next,this):t?(o?t[l]=o:delete t[l],(h=t[0]||t[1]||t[2]||t[3])&&h===(t[3]||t[2]||t[1]||t[0])&&!h.length&&(e?e[f]=h:this._root=h),this):(this._root=o,this)}},"./node_modules/d3-quadtree/src/root.js":function(n,t,e){"use strict";t.a=function(){return this._root}},"./node_modules/d3-quadtree/src/size.js":function(n,t,e){"use strict";t.a=function(){var n=0;return this.visit(function(t){if(!t.length)do{++n}while(t=t.next)}),n}},"./node_modules/d3-quadtree/src/visit.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-quadtree/src/quad.js");t.a=function(n){var t,e,o,i,s,u,c=[],a=this._root;for(a&&c.push(new r.a(a,this._x0,this._y0,this._x1,this._y1));t=c.pop();)if(!n(a=t.node,o=t.x0,i=t.y0,s=t.x1,u=t.y1)&&a.length){var d=(o+s)/2,l=(i+u)/2;(e=a[3])&&c.push(new r.a(e,d,l,s,u)),(e=a[2])&&c.push(new r.a(e,o,l,d,u)),(e=a[1])&&c.push(new r.a(e,d,i,s,l)),(e=a[0])&&c.push(new r.a(e,o,i,d,l))}return this}},"./node_modules/d3-quadtree/src/visitAfter.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-quadtree/src/quad.js");t.a=function(n){var t,e=[],o=[];for(this._root&&e.push(new r.a(this._root,this._x0,this._y0,this._x1,this._y1));t=e.pop();){var i=t.node;if(i.length){var s,u=t.x0,c=t.y0,a=t.x1,d=t.y1,l=(u+a)/2,f=(c+d)/2;(s=i[0])&&e.push(new r.a(s,u,c,l,f)),(s=i[1])&&e.push(new r.a(s,l,c,a,f)),(s=i[2])&&e.push(new r.a(s,u,f,l,d)),(s=i[3])&&e.push(new r.a(s,l,f,a,d))}o.push(t)}for(;t=o.pop();)n(t.node,t.x0,t.y0,t.x1,t.y1);return this}},"./node_modules/d3-quadtree/src/x.js":function(n,t,e){"use strict";function r(n){return n[0]}t.b=r,t.a=function(n){return arguments.length?(this._x=n,this):this._x}},"./node_modules/d3-quadtree/src/y.js":function(n,t,e){"use strict";function r(n){return n[1]}t.b=r,t.a=function(n){return arguments.length?(this._y=n,this):this._y}},"./node_modules/d3-queue/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-queue/src/queue.js");e.d(t,"a",function(){return r.a})},"./node_modules/d3-queue/src/array.js":function(n,t,e){"use strict";e.d(t,"a",function(){return r});var r=[].slice},"./node_modules/d3-queue/src/queue.js":function(n,t,e){"use strict";function r(n){this._size=n,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function o(n){if(!n._start)try{i(n)}catch(t){if(n._tasks[n._ended+n._active-1])u(n,t);else if(!n._data)throw t}}function i(n){for(;n._start=n._waiting&&n._active<n._size;){var t=n._ended+n._active,e=n._tasks[t],r=e.length-1,o=e[r];e[r]=s(n,t),--n._waiting,++n._active,e=o.apply(null,e),n._tasks[t]&&(n._tasks[t]=e||l)}}function s(n,t){return function(e,r){n._tasks[t]&&(--n._active,++n._ended,n._tasks[t]=null,null==n._error&&(null!=e?u(n,e):(n._data[t]=r,n._waiting?o(n):c(n))))}}function u(n,t){var e,r=n._tasks.length;for(n._error=t,n._data=void 0,n._waiting=NaN;--r>=0;)if((e=n._tasks[r])&&(n._tasks[r]=null,e.abort))try{e.abort()}catch(t){}n._active=NaN,c(n)}function c(n){if(!n._active&&n._call){var t=n._data;n._data=void 0,n._call(n._error,t)}}function a(n){if(null==n)n=1/0;else if(!((n=+n)>=1))throw new Error("invalid concurrency");return new r(n)}t.a=a;var d=e("./node_modules/d3-queue/src/array.js"),l={};r.prototype=a.prototype={constructor:r,defer:function(n){if("function"!=typeof n)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var t=d.a.call(arguments,1);return t.push(n),++this._waiting,this._tasks.push(t),o(this),this},abort:function(){return null==this._error&&u(this,new Error("abort")),this},await:function(n){if("function"!=typeof n)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(t,e){n.apply(null,[t].concat(e))},c(this),this},awaitAll:function(n){if("function"!=typeof n)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=n,c(this),this}}},"./node_modules/d3-random/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-random/src/uniform.js");e.d(t,"f",function(){return r.a});var o=e("./node_modules/d3-random/src/normal.js");e.d(t,"e",function(){return o.a});var i=e("./node_modules/d3-random/src/logNormal.js");e.d(t,"d",function(){return i.a});var s=e("./node_modules/d3-random/src/bates.js");e.d(t,"a",function(){return s.a});var u=e("./node_modules/d3-random/src/irwinHall.js");e.d(t,"c",function(){return u.a});var c=e("./node_modules/d3-random/src/exponential.js");e.d(t,"b",function(){return c.a})},"./node_modules/d3-random/src/bates.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-random/src/defaultSource.js"),o=e("./node_modules/d3-random/src/irwinHall.js");t.a=function n(t){function e(n){var e=o.a.source(t)(n);return function(){return e()/n}}return e.source=n,e}(r.a)},"./node_modules/d3-random/src/defaultSource.js":function(n,t,e){"use strict";t.a=function(){return Math.random()}},"./node_modules/d3-random/src/exponential.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-random/src/defaultSource.js");t.a=function n(t){function e(n){return function(){return-Math.log(1-t())/n}}return e.source=n,e}(r.a)},"./node_modules/d3-random/src/irwinHall.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-random/src/defaultSource.js");t.a=function n(t){function e(n){return function(){for(var e=0,r=0;r<n;++r)e+=t();return e}}return e.source=n,e}(r.a)},"./node_modules/d3-random/src/logNormal.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-random/src/defaultSource.js"),o=e("./node_modules/d3-random/src/normal.js");t.a=function n(t){function e(){var n=o.a.source(t).apply(this,arguments);return function(){return Math.exp(n())}}return e.source=n,e}(r.a)},"./node_modules/d3-random/src/normal.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-random/src/defaultSource.js");t.a=function n(t){function e(n,e){var r,o;return n=null==n?0:+n,e=null==e?1:+e,function(){var i;if(null!=r)i=r,r=null;else do{r=2*t()-1,i=2*t()-1,o=r*r+i*i}while(!o||o>1);return n+e*i*Math.sqrt(-2*Math.log(o)/o)}}return e.source=n,e}(r.a)},"./node_modules/d3-random/src/uniform.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-random/src/defaultSource.js");t.a=function n(t){function e(n,e){return n=null==n?0:+n,e=null==e?1:+e,1===arguments.length?(e=n,n=0):e-=n,function(){return t()*e+n}}return e.source=n,e}(r.a)},"./node_modules/d3-request/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-request/src/request.js");e.d(t,"d",function(){return r.a});var o=e("./node_modules/d3-request/src/html.js");e.d(t,"b",function(){return o.a});var i=e("./node_modules/d3-request/src/json.js");e.d(t,"c",function(){return i.a});var s=e("./node_modules/d3-request/src/text.js");e.d(t,"e",function(){return s.a});var u=e("./node_modules/d3-request/src/xml.js");e.d(t,"g",function(){return u.a});var c=e("./node_modules/d3-request/src/csv.js");e.d(t,"a",function(){return c.a});var a=e("./node_modules/d3-request/src/tsv.js");e.d(t,"f",function(){return a.a})},"./node_modules/d3-request/src/csv.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-dsv/index.js"),o=e("./node_modules/d3-request/src/dsv.js");t.a=Object(o.a)("text/csv",r.c)},"./node_modules/d3-request/src/dsv.js":function(n,t,e){"use strict";function r(n,t){return function(e){return n(e.responseText,t)}}var o=e("./node_modules/d3-request/src/request.js");t.a=function(n,t){return function(e,i,s){arguments.length<3&&(s=i,i=null);var u=Object(o.a)(e).mimeType(n);return u.row=function(n){return arguments.length?u.response(r(t,i=n)):i},u.row(i),s?u.get(s):u}}},"./node_modules/d3-request/src/html.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-request/src/type.js");t.a=Object(r.a)("text/html",function(n){return document.createRange().createContextualFragment(n.responseText)})},"./node_modules/d3-request/src/json.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-request/src/type.js");t.a=Object(r.a)("application/json",function(n){return JSON.parse(n.responseText)})},"./node_modules/d3-request/src/request.js":function(n,t,e){"use strict";function r(n){return function(t,e){n(null==t?e:null)}}function o(n){var t=n.responseType;return t&&"text"!==t?n.response:n.responseText}var i=e("./node_modules/d3-collection/index.js"),s=e("./node_modules/d3-dispatch/index.js");t.a=function(n,t){function e(n){var t,e=h.status;if(!e&&o(h)||e>=200&&e<300||304===e){if(a)try{t=a.call(u,h)}catch(n){return void l.call("error",u,n)}else t=h;l.call("load",u,t)}else l.call("error",u,n)}var u,c,a,d,l=Object(s.a)("beforesend","progress","load","error"),f=Object(i.c)(),h=new XMLHttpRequest,m=null,_=null,p=0;if("undefined"==typeof XDomainRequest||"withCredentials"in h||!/^(http(s)?:)?\/\//.test(n)||(h=new XDomainRequest),"onload"in h?h.onload=h.onerror=h.ontimeout=e:h.onreadystatechange=function(n){h.readyState>3&&e(n)},h.onprogress=function(n){l.call("progress",u,n)},u={header:function(n,t){return n=(n+"").toLowerCase(),arguments.length<2?f.get(n):(null==t?f.remove(n):f.set(n,t+""),u)},mimeType:function(n){return arguments.length?(c=null==n?null:n+"",u):c},responseType:function(n){return arguments.length?(d=n,u):d},timeout:function(n){return arguments.length?(p=+n,u):p},user:function(n){return arguments.length<1?m:(m=null==n?null:n+"",u)},password:function(n){return arguments.length<1?_:(_=null==n?null:n+"",u)},response:function(n){return a=n,u},get:function(n,t){return u.send("GET",n,t)},post:function(n,t){return u.send("POST",n,t)},send:function(t,e,o){return h.open(t,n,!0,m,_),null==c||f.has("accept")||f.set("accept",c+",*/*"),h.setRequestHeader&&f.each(function(n,t){h.setRequestHeader(t,n)}),null!=c&&h.overrideMimeType&&h.overrideMimeType(c),null!=d&&(h.responseType=d),p>0&&(h.timeout=p),null==o&&"function"==typeof e&&(o=e,e=null),null!=o&&1===o.length&&(o=r(o)),null!=o&&u.on("error",o).on("load",function(n){o(null,n)}),l.call("beforesend",u,h),h.send(null==e?null:e),u},abort:function(){return h.abort(),u},on:function(){var n=l.on.apply(l,arguments);return n===l?u:n}},null!=t){if("function"!=typeof t)throw new Error("invalid callback: "+t);return u.get(t)}return u}},"./node_modules/d3-request/src/text.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-request/src/type.js");t.a=Object(r.a)("text/plain",function(n){return n.responseText})},"./node_modules/d3-request/src/tsv.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-dsv/index.js"),o=e("./node_modules/d3-request/src/dsv.js");t.a=Object(o.a)("text/tab-separated-values",r.h)},"./node_modules/d3-request/src/type.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-request/src/request.js");t.a=function(n,t){return function(e,o){var i=Object(r.a)(e).mimeType(n).response(t);if(null!=o){if("function"!=typeof o)throw new Error("invalid callback: "+o);return i.get(o)}return i}}},"./node_modules/d3-request/src/xml.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-request/src/type.js");t.a=Object(r.a)("application/xml",function(n){var t=n.responseXML;if(!t)throw new Error("parse error");return t})},"./node_modules/d3-scale/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-scale/src/band.js");e.d(t,"i",function(){return r.a}),e.d(t,"o",function(){return r.b});var o=e("./node_modules/d3-scale/src/identity.js");e.d(t,"j",function(){return o.a});var i=e("./node_modules/d3-scale/src/linear.js");e.d(t,"l",function(){return i.a});var s=e("./node_modules/d3-scale/src/log.js");e.d(t,"m",function(){return s.a});var u=e("./node_modules/d3-scale/src/ordinal.js");e.d(t,"n",function(){return u.a}),e.d(t,"k",function(){return u.b});var c=e("./node_modules/d3-scale/src/pow.js");e.d(t,"p",function(){return c.a}),e.d(t,"t",function(){return c.b});var a=e("./node_modules/d3-scale/src/quantile.js");e.d(t,"q",function(){return a.a});var d=e("./node_modules/d3-scale/src/quantize.js");e.d(t,"r",function(){return d.a});var l=e("./node_modules/d3-scale/src/threshold.js");e.d(t,"u",function(){return l.a});var f=e("./node_modules/d3-scale/src/time.js");e.d(t,"v",function(){return f.b});var h=e("./node_modules/d3-scale/src/utcTime.js");e.d(t,"w",function(){return h.a});var m=e("./node_modules/d3-scale/src/category10.js");e.d(t,"x",function(){return m.a});var _=e("./node_modules/d3-scale/src/category20b.js");e.d(t,"z",function(){return _.a});var p=e("./node_modules/d3-scale/src/category20c.js");e.d(t,"A",function(){return p.a});var j=e("./node_modules/d3-scale/src/category20.js");e.d(t,"y",function(){return j.a});var v=e("./node_modules/d3-scale/src/cubehelix.js");e.d(t,"b",function(){return v.a});var b=e("./node_modules/d3-scale/src/rainbow.js");e.d(t,"f",function(){return b.b}),e.d(t,"h",function(){return b.c}),e.d(t,"a",function(){return b.a});var g=e("./node_modules/d3-scale/src/viridis.js");e.d(t,"g",function(){return g.a}),e.d(t,"d",function(){return g.c}),e.d(t,"c",function(){return g.b}),e.d(t,"e",function(){return g.d});var y=e("./node_modules/d3-scale/src/sequential.js");e.d(t,"s",function(){return y.a})},"./node_modules/d3-scale/src/array.js":function(n,t,e){"use strict";e.d(t,"a",function(){return o}),e.d(t,"b",function(){return i});var r=Array.prototype,o=r.map,i=r.slice},"./node_modules/d3-scale/src/band.js":function(n,t,e){"use strict";function r(){function n(){var n=i().length,r=a[1]<a[0],o=a[r-0],u=a[1-r];t=(u-o)/Math.max(1,n-l+2*f),d&&(t=Math.floor(t)),o+=(u-o-t*(n-l))*h,e=t*(1-l),d&&(o=Math.round(o),e=Math.round(e));var m=Object(s.s)(n).map(function(n){return o+t*n});return c(r?m.reverse():m)}var t,e,o=Object(u.a)().unknown(void 0),i=o.domain,c=o.range,a=[0,1],d=!1,l=0,f=0,h=.5;return delete o.unknown,o.domain=function(t){return arguments.length?(i(t),n()):i()},o.range=function(t){return arguments.length?(a=[+t[0],+t[1]],n()):a.slice()},o.rangeRound=function(t){return a=[+t[0],+t[1]],d=!0,n()},o.bandwidth=function(){return e},o.step=function(){return t},o.round=function(t){return arguments.length?(d=!!t,n()):d},o.padding=function(t){return arguments.length?(l=f=Math.max(0,Math.min(1,t)),n()):l},o.paddingInner=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),n()):l},o.paddingOuter=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),n()):f},o.align=function(t){return arguments.length?(h=Math.max(0,Math.min(1,t)),n()):h},o.copy=function(){return r().domain(i()).range(a).round(d).paddingInner(l).paddingOuter(f).align(h)},n()}function o(n){var t=n.copy;return n.padding=n.paddingOuter,delete n.paddingInner,delete n.paddingOuter,n.copy=function(){return o(t())},n}function i(){return o(r().paddingInner(1))}t.a=r,t.b=i;var s=e("./node_modules/d3-array/index.js"),u=e("./node_modules/d3-scale/src/ordinal.js")},"./node_modules/d3-scale/src/category10.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-scale/src/colors.js");t.a=Object(r.a)("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf")},"./node_modules/d3-scale/src/category20.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-scale/src/colors.js");t.a=Object(r.a)("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5")},"./node_modules/d3-scale/src/category20b.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-scale/src/colors.js");t.a=Object(r.a)("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6")},"./node_modules/d3-scale/src/category20c.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-scale/src/colors.js");t.a=Object(r.a)("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9")},"./node_modules/d3-scale/src/colors.js":function(n,t,e){"use strict";t.a=function(n){return n.match(/.{6}/g).map(function(n){return"#"+n})}},"./node_modules/d3-scale/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-scale/src/continuous.js":function(n,t,e){"use strict";function r(n,t){return(t-=n=+n)?function(e){return(e-n)/t}:Object(h.a)(t)}function o(n){return function(t,e){var r=n(t=+t,e=+e);return function(n){return n<=t?0:n>=e?1:r(n)}}}function i(n){return function(t,e){var r=n(t=+t,e=+e);return function(n){return n<=0?t:n>=1?e:r(n)}}}function s(n,t,e,r){var o=n[0],i=n[1],s=t[0],u=t[1];return i<o?(o=e(i,o),s=r(u,s)):(o=e(o,i),s=r(s,u)),function(n){return s(o(n))}}function u(n,t,e,r){var o=Math.min(n.length,t.length)-1,i=new Array(o),s=new Array(o),u=-1;for(n[o]<n[0]&&(n=n.slice().reverse(),t=t.slice().reverse());++u<o;)i[u]=e(n[u],n[u+1]),s[u]=r(t[u],t[u+1]);return function(t){var e=Object(d.b)(n,t,1,o)-1;return s[e](i[e](t))}}function c(n,t){return t.domain(n.domain()).range(n.range()).interpolate(n.interpolate()).clamp(n.clamp())}function a(n,t){function e(){return a=Math.min(p.length,j.length)>2?u:s,d=h=null,c}function c(t){return(d||(d=a(p,j,b?o(n):n,v)))(+t)}var a,d,h,p=_,j=_,v=l.a,b=!1;return c.invert=function(n){return(h||(h=a(j,p,r,b?i(t):t)))(+n)},c.domain=function(n){return arguments.length?(p=f.a.call(n,m.a),e()):p.slice()},c.range=function(n){return arguments.length?(j=f.b.call(n),e()):j.slice()},c.rangeRound=function(n){return j=f.b.call(n),v=l.r,e()},c.clamp=function(n){return arguments.length?(b=!!n,e()):b},c.interpolate=function(n){return arguments.length?(v=n,e()):v},e()}t.c=r,t.a=c,t.b=a;var d=e("./node_modules/d3-array/index.js"),l=e("./node_modules/d3-interpolate/index.js"),f=e("./node_modules/d3-scale/src/array.js"),h=e("./node_modules/d3-scale/src/constant.js"),m=e("./node_modules/d3-scale/src/number.js"),_=[0,1]},"./node_modules/d3-scale/src/cubehelix.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-color/index.js"),o=e("./node_modules/d3-interpolate/index.js");t.a=Object(o.f)(Object(r.b)(300,.5,0),Object(r.b)(-240,.5,1))},"./node_modules/d3-scale/src/identity.js":function(n,t,e){"use strict";function r(){function n(n){return+n}var t=[0,1];return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=o.a.call(e,s.a),n):t.slice()},n.copy=function(){return r().domain(t)},Object(i.b)(n)}t.a=r;var o=e("./node_modules/d3-scale/src/array.js"),i=e("./node_modules/d3-scale/src/linear.js"),s=e("./node_modules/d3-scale/src/number.js")},"./node_modules/d3-scale/src/linear.js":function(n,t,e){"use strict";function r(n){var t=n.domain;return n.ticks=function(n){var e=t();return Object(i.B)(e[0],e[e.length-1],null==n?10:n)},n.tickFormat=function(n,e){return Object(c.a)(t(),n,e)},n.nice=function(e){null==e&&(e=10);var r,o=t(),s=0,u=o.length-1,c=o[s],a=o[u];return a<c&&(r=c,c=a,a=r,r=s,s=u,u=r),r=Object(i.z)(c,a,e),r>0?(c=Math.floor(c/r)*r,a=Math.ceil(a/r)*r,r=Object(i.z)(c,a,e)):r<0&&(c=Math.ceil(c*r)/r,a=Math.floor(a*r)/r,r=Object(i.z)(c,a,e)),r>0?(o[s]=Math.floor(c/r)*r,o[u]=Math.ceil(a/r)*r,t(o)):r<0&&(o[s]=Math.ceil(c*r)/r,o[u]=Math.floor(a*r)/r,t(o)),n},n}function o(){var n=Object(u.b)(u.c,s.m);return n.copy=function(){return Object(u.a)(n,o())},r(n)}t.b=r,t.a=o;var i=e("./node_modules/d3-array/index.js"),s=e("./node_modules/d3-interpolate/index.js"),u=e("./node_modules/d3-scale/src/continuous.js"),c=e("./node_modules/d3-scale/src/tickFormat.js")},"./node_modules/d3-scale/src/log.js":function(n,t,e){"use strict";function r(n,t){return(t=Math.log(t/n))?function(e){return Math.log(e/n)/t}:Object(f.a)(t)}function o(n,t){return n<0?function(e){return-Math.pow(-t,e)*Math.pow(-n,1-e)}:function(e){return Math.pow(t,e)*Math.pow(n,1-e)}}function i(n){return isFinite(n)?+("1e"+n):n<0?0:n}function s(n){return 10===n?i:n===Math.E?Math.exp:function(t){return Math.pow(n,t)}}function u(n){return n===Math.E?Math.log:10===n&&Math.log10||2===n&&Math.log2||(n=Math.log(n),function(t){return Math.log(t)/n})}function c(n){return function(t){return-n(-t)}}function a(){function n(){return f=u(i),_=s(i),e()[0]<0&&(f=c(f),_=c(_)),t}var t=Object(m.b)(r,o).domain([1,10]),e=t.domain,i=10,f=u(10),_=s(10);return t.base=function(t){return arguments.length?(i=+t,n()):i},t.domain=function(t){return arguments.length?(e(t),n()):e()},t.ticks=function(n){var t,r=e(),o=r[0],s=r[r.length-1];(t=s<o)&&(l=o,o=s,s=l);var u,c,a,l=f(o),h=f(s),m=null==n?10:+n,p=[];if(!(i%1)&&h-l<m){if(l=Math.round(l)-1,h=Math.round(h)+1,o>0){for(;l<h;++l)for(c=1,u=_(l);c<i;++c)if(!((a=u*c)<o)){if(a>s)break;p.push(a)}}else for(;l<h;++l)for(c=i-1,u=_(l);c>=1;--c)if(!((a=u*c)<o)){if(a>s)break;p.push(a)}}else p=Object(d.B)(l,h,Math.min(h-l,m)).map(_);return t?p.reverse():p},t.tickFormat=function(n,e){if(null==e&&(e=10===i?".0e":","),"function"!=typeof e&&(e=Object(l.a)(e)),n===1/0)return e;null==n&&(n=10);var r=Math.max(1,i*n/t.ticks().length);return function(n){var t=n/_(Math.round(f(n)));return t*i<i-.5&&(t*=i),t<=r?e(n):""}},t.nice=function(){return e(Object(h.a)(e(),{floor:function(n){return _(Math.floor(f(n)))},ceil:function(n){return _(Math.ceil(f(n)))}}))},t.copy=function(){return Object(m.a)(t,a().base(i))},t}t.a=a;var d=e("./node_modules/d3-array/index.js"),l=e("./node_modules/d3-format/index.js"),f=e("./node_modules/d3-scale/src/constant.js"),h=e("./node_modules/d3-scale/src/nice.js"),m=e("./node_modules/d3-scale/src/continuous.js")},"./node_modules/d3-scale/src/nice.js":function(n,t,e){"use strict";t.a=function(n,t){n=n.slice();var e,r=0,o=n.length-1,i=n[r],s=n[o];return s<i&&(e=r,r=o,o=e,e=i,i=s,s=e),n[r]=t.floor(i),n[o]=t.ceil(s),n}},"./node_modules/d3-scale/src/number.js":function(n,t,e){"use strict";t.a=function(n){return+n}},"./node_modules/d3-scale/src/ordinal.js":function(n,t,e){"use strict";function r(n){function t(t){var r=t+"",o=e.get(r);if(!o){if(c!==s)return c;e.set(r,o=u.push(t))}return n[(o-1)%n.length]}var e=Object(o.c)(),u=[],c=s;return n=null==n?[]:i.b.call(n),t.domain=function(n){if(!arguments.length)return u.slice();u=[],e=Object(o.c)();for(var r,i,s=-1,c=n.length;++s<c;)e.has(i=(r=n[s])+"")||e.set(i,u.push(r));return t},t.range=function(e){return arguments.length?(n=i.b.call(e),t):n.slice()},t.unknown=function(n){return arguments.length?(c=n,t):c},t.copy=function(){return r().domain(u).range(n).unknown(c)},t}e.d(t,"b",function(){return s}),t.a=r;var o=e("./node_modules/d3-collection/index.js"),i=e("./node_modules/d3-scale/src/array.js"),s={name:"implicit"}},"./node_modules/d3-scale/src/pow.js":function(n,t,e){"use strict";function r(n,t){return n<0?-Math.pow(-n,t):Math.pow(n,t)}function o(){function n(n,t){return(t=r(t,e)-(n=r(n,e)))?function(o){return(r(o,e)-n)/t}:Object(s.a)(t)}function t(n,t){return t=r(t,e)-(n=r(n,e)),function(o){return r(n+t*o,1/e)}}var e=1,i=Object(c.b)(n,t),a=i.domain;return i.exponent=function(n){return arguments.length?(e=+n,a(a())):e},i.copy=function(){return Object(c.a)(i,o().exponent(e))},Object(u.b)(i)}function i(){return o().exponent(.5)}t.a=o,t.b=i;var s=e("./node_modules/d3-scale/src/constant.js"),u=e("./node_modules/d3-scale/src/linear.js"),c=e("./node_modules/d3-scale/src/continuous.js")},"./node_modules/d3-scale/src/quantile.js":function(n,t,e){"use strict";function r(){function n(){var n=0,r=Math.max(1,s.length);for(u=new Array(r-1);++n<r;)u[n-1]=Object(o.r)(e,n/r);return t}function t(n){if(!isNaN(n=+n))return s[Object(o.b)(u,n)]}var e=[],s=[],u=[];return t.invertExtent=function(n){var t=s.indexOf(n);return t<0?[NaN,NaN]:[t>0?u[t-1]:e[0],t<u.length?u[t]:e[e.length-1]]},t.domain=function(t){if(!arguments.length)return e.slice();e=[];for(var r,i=0,s=t.length;i<s;++i)null==(r=t[i])||isNaN(r=+r)||e.push(r);return e.sort(o.a),n()},t.range=function(t){return arguments.length?(s=i.b.call(t),n()):s.slice()},t.quantiles=function(){return u.slice()},t.copy=function(){return r().domain(e).range(s)},t}t.a=r;var o=e("./node_modules/d3-array/index.js"),i=e("./node_modules/d3-scale/src/array.js")},"./node_modules/d3-scale/src/quantize.js":function(n,t,e){"use strict";function r(){function n(n){if(n<=n)return d[Object(o.b)(a,n,0,c)]}function t(){var t=-1;for(a=new Array(c);++t<c;)a[t]=((t+1)*u-(t-c)*e)/(c+1);return n}var e=0,u=1,c=1,a=[.5],d=[0,1];return n.domain=function(n){return arguments.length?(e=+n[0],u=+n[1],t()):[e,u]},n.range=function(n){return arguments.length?(c=(d=i.b.call(n)).length-1,t()):d.slice()},n.invertExtent=function(n){var t=d.indexOf(n);return t<0?[NaN,NaN]:t<1?[e,a[0]]:t>=c?[a[c-1],u]:[a[t-1],a[t]]},n.copy=function(){return r().domain([e,u]).range(d)},Object(s.b)(n)}t.a=r;var o=e("./node_modules/d3-array/index.js"),i=e("./node_modules/d3-scale/src/array.js"),s=e("./node_modules/d3-scale/src/linear.js")},"./node_modules/d3-scale/src/rainbow.js":function(n,t,e){"use strict";e.d(t,"c",function(){return i}),e.d(t,"a",function(){return s});var r=e("./node_modules/d3-color/index.js"),o=e("./node_modules/d3-interpolate/index.js"),i=Object(o.f)(Object(r.b)(-100,.75,.35),Object(r.b)(80,1.5,.8)),s=Object(o.f)(Object(r.b)(260,.75,.35),Object(r.b)(80,1.5,.8)),u=Object(r.b)();t.b=function(n){(n<0||n>1)&&(n-=Math.floor(n));var t=Math.abs(n-.5);return u.h=360*n-100,u.s=1.5-1.5*t,u.l=.8-.9*t,u+""}},"./node_modules/d3-scale/src/sequential.js":function(n,t,e){"use strict";function r(n){function t(t){var r=(t-e)/(i-e);return n(s?Math.max(0,Math.min(1,r)):r)}var e=0,i=1,s=!1;return t.domain=function(n){return arguments.length?(e=+n[0],i=+n[1],t):[e,i]},t.clamp=function(n){return arguments.length?(s=!!n,t):s},t.interpolator=function(e){return arguments.length?(n=e,t):n},t.copy=function(){return r(n).domain([e,i]).clamp(s)},Object(o.b)(t)}t.a=r;var o=e("./node_modules/d3-scale/src/linear.js")},"./node_modules/d3-scale/src/threshold.js":function(n,t,e){"use strict";function r(){function n(n){if(n<=n)return e[Object(o.b)(t,n,0,s)]}var t=[.5],e=[0,1],s=1;return n.domain=function(r){return arguments.length?(t=i.b.call(r),s=Math.min(t.length,e.length-1),n):t.slice()},n.range=function(r){return arguments.length?(e=i.b.call(r),s=Math.min(t.length,e.length-1),n):e.slice()},n.invertExtent=function(n){var r=e.indexOf(n);return[t[r-1],t[r]]},n.copy=function(){return r().domain(t).range(e)},n}t.a=r;var o=e("./node_modules/d3-array/index.js"),i=e("./node_modules/d3-scale/src/array.js")},"./node_modules/d3-scale/src/tickFormat.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-array/index.js"),o=e("./node_modules/d3-format/index.js");t.a=function(n,t,e){var i,s=n[0],u=n[n.length-1],c=Object(r.A)(s,u,null==t?10:t);switch(e=Object(o.e)(null==e?",f":e),e.type){case"s":var a=Math.max(Math.abs(s),Math.abs(u));return null!=e.precision||isNaN(i=Object(o.g)(c,a))||(e.precision=i),Object(o.d)(e,a);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(i=Object(o.h)(c,Math.max(Math.abs(s),Math.abs(u))))||(e.precision=i-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(i=Object(o.f)(c))||(e.precision=i-2*("%"===e.type))}return Object(o.a)(e)}},"./node_modules/d3-scale/src/time.js":function(n,t,e){"use strict";function r(n){return new Date(n)}function o(n){return n instanceof Date?+n:+new Date(+n)}function i(n,t,e,c,a,g,y,x,O){function w(r){return(y(r)<r?N:g(r)<r?A:a(r)<r?C:c(r)<r?S:t(r)<r?e(r)<r?q:z:n(r)<r?P:R)(r)}function M(t,e,r,o){if(null==t&&(t=10),"number"==typeof t){var i=Math.abs(r-e)/t,u=Object(s.e)(function(n){return n[2]}).right(D,i);u===D.length?(o=Object(s.A)(e/b,r/b,t),t=n):u?(u=D[i/D[u-1][2]<D[u][2]/i?u-1:u],o=u[1],t=u[0]):(o=Math.max(Object(s.A)(e,r,t),1),t=x)}return null==o?t:t.every(o)}var k=Object(l.b)(l.c,u.m),T=k.invert,E=k.domain,N=O(".%L"),A=O(":%S"),C=O("%I:%M"),S=O("%I %p"),q=O("%a %d"),z=O("%b %d"),P=O("%B"),R=O("%Y"),D=[[y,1,h],[y,5,5*h],[y,15,15*h],[y,30,30*h],[g,1,m],[g,5,5*m],[g,15,15*m],[g,30,30*m],[a,1,_],[a,3,3*_],[a,6,6*_],[a,12,12*_],[c,1,p],[c,2,2*p],[e,1,j],[t,1,v],[t,3,3*v],[n,1,b]];return k.invert=function(n){return new Date(T(n))},k.domain=function(n){return arguments.length?E(d.a.call(n,o)):E().map(r)},k.ticks=function(n,t){var e,r=E(),o=r[0],i=r[r.length-1],s=i<o;return s&&(e=o,o=i,i=e),e=M(n,o,i,t),e=e?e.range(o,i+1):[],s?e.reverse():e},k.tickFormat=function(n,t){return null==t?w:O(t)},k.nice=function(n,t){var e=E();return(n=M(n,e[0],e[e.length-1],t))?E(Object(f.a)(e,n)):k},k.copy=function(){return Object(l.a)(k,i(n,t,e,c,a,g,y,x,O))},k}t.a=i;var s=e("./node_modules/d3-array/index.js"),u=e("./node_modules/d3-interpolate/index.js"),c=e("./node_modules/d3-time/index.js"),a=e("./node_modules/d3-time-format/index.js"),d=e("./node_modules/d3-scale/src/array.js"),l=e("./node_modules/d3-scale/src/continuous.js"),f=e("./node_modules/d3-scale/src/nice.js"),h=1e3,m=60*h,_=60*m,p=24*_,j=7*p,v=30*p,b=365*p;t.b=function(){return i(c.D,c.n,c.B,c.a,c.e,c.j,c.r,c.h,a.c).domain([new Date(2e3,0,1),new Date(2e3,0,2)])}},"./node_modules/d3-scale/src/utcTime.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-scale/src/time.js"),o=e("./node_modules/d3-time-format/index.js"),i=e("./node_modules/d3-time/index.js");t.a=function(){return Object(r.a)(i._7,i.R,i._5,i.F,i.J,i.N,i.V,i.L,o.g).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])}},"./node_modules/d3-scale/src/viridis.js":function(n,t,e){"use strict";function r(n){var t=n.length;return function(e){return n[Math.max(0,Math.min(t-1,Math.floor(e*t)))]}}e.d(t,"c",function(){return i}),e.d(t,"b",function(){return s}),e.d(t,"d",function(){return u});var o=e("./node_modules/d3-scale/src/colors.js");t.a=r(Object(o.a)("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var i=r(Object(o.a)("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),s=r(Object(o.a)("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),u=r(Object(o.a)("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"))},"./node_modules/d3-selection/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/creator.js");e.d(t,"b",function(){return r.a});var o=e("./node_modules/d3-selection/src/local.js");e.d(t,"e",function(){return o.a});var i=e("./node_modules/d3-selection/src/matcher.js");e.d(t,"f",function(){return i.a});var s=e("./node_modules/d3-selection/src/mouse.js");e.d(t,"g",function(){return s.a});var u=e("./node_modules/d3-selection/src/namespace.js");e.d(t,"h",function(){return u.a});var c=e("./node_modules/d3-selection/src/namespaces.js");e.d(t,"i",function(){return c.a});var a=e("./node_modules/d3-selection/src/point.js");e.d(t,"a",function(){return a.a});var d=e("./node_modules/d3-selection/src/select.js");e.d(t,"j",function(){return d.a});var l=e("./node_modules/d3-selection/src/selectAll.js");e.d(t,"k",function(){return l.a});var f=e("./node_modules/d3-selection/src/selection/index.js");e.d(t,"l",function(){return f.b});var h=e("./node_modules/d3-selection/src/selector.js");e.d(t,"m",function(){return h.a});var m=e("./node_modules/d3-selection/src/selectorAll.js");e.d(t,"n",function(){return m.a});var _=e("./node_modules/d3-selection/src/selection/style.js");e.d(t,"o",function(){return _.b});var p=e("./node_modules/d3-selection/src/touch.js");e.d(t,"p",function(){return p.a});var j=e("./node_modules/d3-selection/src/touches.js");e.d(t,"q",function(){return j.a});var v=e("./node_modules/d3-selection/src/window.js");e.d(t,"r",function(){return v.a});var b=e("./node_modules/d3-selection/src/selection/on.js");e.d(t,"d",function(){return b.c}),e.d(t,"c",function(){return b.a})},"./node_modules/d3-selection/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-selection/src/creator.js":function(n,t,e){"use strict";function r(n){return function(){var t=this.ownerDocument,e=this.namespaceURI;return e===s.b&&t.documentElement.namespaceURI===s.b?t.createElement(n):t.createElementNS(e,n)}}function o(n){return function(){return this.ownerDocument.createElementNS(n.space,n.local)}}var i=e("./node_modules/d3-selection/src/namespace.js"),s=e("./node_modules/d3-selection/src/namespaces.js");t.a=function(n){var t=Object(i.a)(n);return(t.local?o:r)(t)}},"./node_modules/d3-selection/src/local.js":function(n,t,e){"use strict";function r(){return new o}function o(){this._="@"+(++i).toString(36)}t.a=r;var i=0;o.prototype=r.prototype={constructor:o,get:function(n){for(var t=this._;!(t in n);)if(!(n=n.parentNode))return;return n[t]},set:function(n,t){return n[this._]=t},remove:function(n){return this._ in n&&delete n[this._]},toString:function(){return this._}}},"./node_modules/d3-selection/src/matcher.js":function(n,t,e){"use strict";var r=function(n){return function(){return this.matches(n)}};if("undefined"!=typeof document){var o=document.documentElement;if(!o.matches){var i=o.webkitMatchesSelector||o.msMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector;r=function(n){return function(){return i.call(this,n)}}}}t.a=r},"./node_modules/d3-selection/src/mouse.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/sourceEvent.js"),o=e("./node_modules/d3-selection/src/point.js");t.a=function(n){var t=Object(r.a)();return t.changedTouches&&(t=t.changedTouches[0]),Object(o.a)(n,t)}},"./node_modules/d3-selection/src/namespace.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/namespaces.js");t.a=function(n){var t=n+="",e=t.indexOf(":");return e>=0&&"xmlns"!==(t=n.slice(0,e))&&(n=n.slice(e+1)),r.a.hasOwnProperty(t)?{space:r.a[t],local:n}:n}},"./node_modules/d3-selection/src/namespaces.js":function(n,t,e){"use strict";e.d(t,"b",function(){return r});var r="http://www.w3.org/1999/xhtml";t.a={svg:"http://www.w3.org/2000/svg",xhtml:r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"}},"./node_modules/d3-selection/src/point.js":function(n,t,e){"use strict";t.a=function(n,t){var e=n.ownerSVGElement||n;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,r=r.matrixTransform(n.getScreenCTM().inverse()),[r.x,r.y]}var o=n.getBoundingClientRect();return[t.clientX-o.left-n.clientLeft,t.clientY-o.top-n.clientTop]}},"./node_modules/d3-selection/src/select.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/selection/index.js");t.a=function(n){return"string"==typeof n?new r.a([[document.querySelector(n)]],[document.documentElement]):new r.a([[n]],r.c)}},"./node_modules/d3-selection/src/selectAll.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/selection/index.js");t.a=function(n){return"string"==typeof n?new r.a([document.querySelectorAll(n)],[document.documentElement]):new r.a([null==n?[]:n],r.c)}},"./node_modules/d3-selection/src/selection/append.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/creator.js");t.a=function(n){var t="function"==typeof n?n:Object(r.a)(n);return this.select(function(){return this.appendChild(t.apply(this,arguments))})}},"./node_modules/d3-selection/src/selection/attr.js":function(n,t,e){"use strict";function r(n){return function(){this.removeAttribute(n)}}function o(n){return function(){this.removeAttributeNS(n.space,n.local)}}function i(n,t){return function(){this.setAttribute(n,t)}}function s(n,t){return function(){this.setAttributeNS(n.space,n.local,t)}}function u(n,t){return function(){var e=t.apply(this,arguments);null==e?this.removeAttribute(n):this.setAttribute(n,e)}}function c(n,t){return function(){var e=t.apply(this,arguments);null==e?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,e)}}var a=e("./node_modules/d3-selection/src/namespace.js");t.a=function(n,t){var e=Object(a.a)(n);if(arguments.length<2){var d=this.node();return e.local?d.getAttributeNS(e.space,e.local):d.getAttribute(e)}return this.each((null==t?e.local?o:r:"function"==typeof t?e.local?c:u:e.local?s:i)(e,t))}},"./node_modules/d3-selection/src/selection/call.js":function(n,t,e){"use strict";t.a=function(){var n=arguments[0];return arguments[0]=this,n.apply(null,arguments),this}},"./node_modules/d3-selection/src/selection/classed.js":function(n,t,e){"use strict";function r(n){return n.trim().split(/^|\s+/)}function o(n){return n.classList||new i(n)}function i(n){this._node=n,this._names=r(n.getAttribute("class")||"")}function s(n,t){for(var e=o(n),r=-1,i=t.length;++r<i;)e.add(t[r])}function u(n,t){for(var e=o(n),r=-1,i=t.length;++r<i;)e.remove(t[r])}function c(n){return function(){s(this,n)}}function a(n){return function(){u(this,n)}}function d(n,t){return function(){(t.apply(this,arguments)?s:u)(this,n)}}i.prototype={add:function(n){this._names.indexOf(n)<0&&(this._names.push(n),this._node.setAttribute("class",this._names.join(" ")))},remove:function(n){var t=this._names.indexOf(n);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(n){return this._names.indexOf(n)>=0}},t.a=function(n,t){var e=r(n+"");if(arguments.length<2){for(var i=o(this.node()),s=-1,u=e.length;++s<u;)if(!i.contains(e[s]))return!1;return!0}return this.each(("function"==typeof t?d:t?c:a)(e,t))}},"./node_modules/d3-selection/src/selection/data.js":function(n,t,e){"use strict";function r(n,t,e,r,o,i){for(var u,c=0,a=t.length,d=i.length;c<d;++c)(u=t[c])?(u.__data__=i[c],r[c]=u):e[c]=new s.a(n,i[c]);for(;c<a;++c)(u=t[c])&&(o[c]=u)}function o(n,t,e,r,o,i,u){var a,d,l,f={},h=t.length,m=i.length,_=new Array(h);for(a=0;a<h;++a)(d=t[a])&&(_[a]=l=c+u.call(d,d.__data__,a,t),l in f?o[a]=d:f[l]=d);for(a=0;a<m;++a)l=c+u.call(n,i[a],a,i),(d=f[l])?(r[a]=d,d.__data__=i[a],f[l]=null):e[a]=new s.a(n,i[a]);for(a=0;a<h;++a)(d=t[a])&&f[_[a]]===d&&(o[a]=d)}var i=e("./node_modules/d3-selection/src/selection/index.js"),s=e("./node_modules/d3-selection/src/selection/enter.js"),u=e("./node_modules/d3-selection/src/constant.js"),c="$";t.a=function(n,t){if(!n)return j=new Array(this.size()),h=-1,this.each(function(n){j[++h]=n}),j;var e=t?o:r,s=this._parents,c=this._groups;"function"!=typeof n&&(n=Object(u.a)(n));for(var a=c.length,d=new Array(a),l=new Array(a),f=new Array(a),h=0;h<a;++h){var m=s[h],_=c[h],p=_.length,j=n.call(m,m&&m.__data__,h,s),v=j.length,b=l[h]=new Array(v),g=d[h]=new Array(v);e(m,_,b,g,f[h]=new Array(p),j,t);for(var y,x,O=0,w=0;O<v;++O)if(y=b[O]){for(O>=w&&(w=O+1);!(x=g[w])&&++w<v;);y._next=x||null}}return d=new i.a(d,s),d._enter=l,d._exit=f,d}},"./node_modules/d3-selection/src/selection/datum.js":function(n,t,e){"use strict";t.a=function(n){return arguments.length?this.property("__data__",n):this.node().__data__}},"./node_modules/d3-selection/src/selection/dispatch.js":function(n,t,e){"use strict";function r(n,t,e){var r=Object(s.a)(n),o=r.CustomEvent;"function"==typeof o?o=new o(t,e):(o=r.document.createEvent("Event"),e?(o.initEvent(t,e.bubbles,e.cancelable),o.detail=e.detail):o.initEvent(t,!1,!1)),n.dispatchEvent(o)}function o(n,t){return function(){return r(this,n,t)}}function i(n,t){return function(){return r(this,n,t.apply(this,arguments))}}var s=e("./node_modules/d3-selection/src/window.js");t.a=function(n,t){return this.each(("function"==typeof t?i:o)(n,t))}},"./node_modules/d3-selection/src/selection/each.js":function(n,t,e){"use strict";t.a=function(n){for(var t=this._groups,e=0,r=t.length;e<r;++e)for(var o,i=t[e],s=0,u=i.length;s<u;++s)(o=i[s])&&n.call(o,o.__data__,s,i);return this}},"./node_modules/d3-selection/src/selection/empty.js":function(n,t,e){"use strict";t.a=function(){return!this.node()}},"./node_modules/d3-selection/src/selection/enter.js":function(n,t,e){"use strict";function r(n,t){this.ownerDocument=n.ownerDocument,this.namespaceURI=n.namespaceURI,this._next=null,this._parent=n,this.__data__=t}t.a=r;var o=e("./node_modules/d3-selection/src/selection/sparse.js"),i=e("./node_modules/d3-selection/src/selection/index.js");t.b=function(){return new i.a(this._enter||this._groups.map(o.a),this._parents)},r.prototype={constructor:r,appendChild:function(n){return this._parent.insertBefore(n,this._next)},insertBefore:function(n,t){return this._parent.insertBefore(n,t)},querySelector:function(n){return this._parent.querySelector(n)},querySelectorAll:function(n){return this._parent.querySelectorAll(n)}}},"./node_modules/d3-selection/src/selection/exit.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/selection/sparse.js"),o=e("./node_modules/d3-selection/src/selection/index.js");t.a=function(){return new o.a(this._exit||this._groups.map(r.a),this._parents)}},"./node_modules/d3-selection/src/selection/filter.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/selection/index.js"),o=e("./node_modules/d3-selection/src/matcher.js");t.a=function(n){"function"!=typeof n&&(n=Object(o.a)(n));for(var t=this._groups,e=t.length,i=new Array(e),s=0;s<e;++s)for(var u,c=t[s],a=c.length,d=i[s]=[],l=0;l<a;++l)(u=c[l])&&n.call(u,u.__data__,l,c)&&d.push(u);return new r.a(i,this._parents)}},"./node_modules/d3-selection/src/selection/html.js":function(n,t,e){"use strict";function r(){this.innerHTML=""}function o(n){return function(){this.innerHTML=n}}function i(n){return function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}}t.a=function(n){return arguments.length?this.each(null==n?r:("function"==typeof n?i:o)(n)):this.node().innerHTML}},"./node_modules/d3-selection/src/selection/index.js":function(n,t,e){"use strict";function r(n,t){this._groups=n,this._parents=t}function o(){return new r([[document.documentElement]],z)}e.d(t,"c",function(){return z}),t.a=r;var i=e("./node_modules/d3-selection/src/selection/select.js"),s=e("./node_modules/d3-selection/src/selection/selectAll.js"),u=e("./node_modules/d3-selection/src/selection/filter.js"),c=e("./node_modules/d3-selection/src/selection/data.js"),a=e("./node_modules/d3-selection/src/selection/enter.js"),d=e("./node_modules/d3-selection/src/selection/exit.js"),l=e("./node_modules/d3-selection/src/selection/merge.js"),f=e("./node_modules/d3-selection/src/selection/order.js"),h=e("./node_modules/d3-selection/src/selection/sort.js"),m=e("./node_modules/d3-selection/src/selection/call.js"),_=e("./node_modules/d3-selection/src/selection/nodes.js"),p=e("./node_modules/d3-selection/src/selection/node.js"),j=e("./node_modules/d3-selection/src/selection/size.js"),v=e("./node_modules/d3-selection/src/selection/empty.js"),b=e("./node_modules/d3-selection/src/selection/each.js"),g=e("./node_modules/d3-selection/src/selection/attr.js"),y=e("./node_modules/d3-selection/src/selection/style.js"),x=e("./node_modules/d3-selection/src/selection/property.js"),O=e("./node_modules/d3-selection/src/selection/classed.js"),w=e("./node_modules/d3-selection/src/selection/text.js"),M=e("./node_modules/d3-selection/src/selection/html.js"),k=e("./node_modules/d3-selection/src/selection/raise.js"),T=e("./node_modules/d3-selection/src/selection/lower.js"),E=e("./node_modules/d3-selection/src/selection/append.js"),N=e("./node_modules/d3-selection/src/selection/insert.js"),A=e("./node_modules/d3-selection/src/selection/remove.js"),C=e("./node_modules/d3-selection/src/selection/datum.js"),S=e("./node_modules/d3-selection/src/selection/on.js"),q=e("./node_modules/d3-selection/src/selection/dispatch.js"),z=[null];r.prototype=o.prototype={constructor:r,select:i.a,selectAll:s.a,filter:u.a,data:c.a,enter:a.b,exit:d.a,merge:l.a,order:f.a,sort:h.a,call:m.a,nodes:_.a,node:p.a,size:j.a,empty:v.a,each:b.a,attr:g.a,style:y.a,property:x.a,classed:O.a,text:w.a,html:M.a,raise:k.a,lower:T.a,append:E.a,insert:N.a,remove:A.a,datum:C.a,on:S.b,dispatch:q.a},t.b=o},"./node_modules/d3-selection/src/selection/insert.js":function(n,t,e){"use strict";function r(){return null}var o=e("./node_modules/d3-selection/src/creator.js"),i=e("./node_modules/d3-selection/src/selector.js");t.a=function(n,t){var e="function"==typeof n?n:Object(o.a)(n),s=null==t?r:"function"==typeof t?t:Object(i.a)(t);return this.select(function(){return this.insertBefore(e.apply(this,arguments),s.apply(this,arguments)||null)})}},"./node_modules/d3-selection/src/selection/lower.js":function(n,t,e){"use strict";function r(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}t.a=function(){return this.each(r)}},"./node_modules/d3-selection/src/selection/merge.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/selection/index.js");t.a=function(n){for(var t=this._groups,e=n._groups,o=t.length,i=e.length,s=Math.min(o,i),u=new Array(o),c=0;c<s;++c)for(var a,d=t[c],l=e[c],f=d.length,h=u[c]=new Array(f),m=0;m<f;++m)(a=d[m]||l[m])&&(h[m]=a);for(;c<o;++c)u[c]=t[c];return new r.a(u,this._parents)}},"./node_modules/d3-selection/src/selection/node.js":function(n,t,e){"use strict";t.a=function(){for(var n=this._groups,t=0,e=n.length;t<e;++t)for(var r=n[t],o=0,i=r.length;o<i;++o){var s=r[o];if(s)return s}return null}},"./node_modules/d3-selection/src/selection/nodes.js":function(n,t,e){"use strict";t.a=function(){var n=new Array(this.size()),t=-1;return this.each(function(){n[++t]=this}),n}},"./node_modules/d3-selection/src/selection/on.js":function(n,t,e){"use strict";function r(n,t,e){return n=o(n,t,e),function(t){var e=t.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||n.call(this,t)}}function o(n,t,e){return function(r){var o=d;d=r;try{n.call(this,this.__data__,t,e)}finally{d=o}}}function i(n){return n.trim().split(/^|\s+/).map(function(n){var t="",e=n.indexOf(".");return e>=0&&(t=n.slice(e+1),n=n.slice(0,e)),{type:n,name:t}})}function s(n){return function(){var t=this.__on;if(t){for(var e,r=0,o=-1,i=t.length;r<i;++r)e=t[r],n.type&&e.type!==n.type||e.name!==n.name?t[++o]=e:this.removeEventListener(e.type,e.listener,e.capture);++o?t.length=o:delete this.__on}}}function u(n,t,e){var i=a.hasOwnProperty(n.type)?r:o;return function(r,o,s){var u,c=this.__on,a=i(t,o,s);if(c)for(var d=0,l=c.length;d<l;++d)if((u=c[d]).type===n.type&&u.name===n.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=a,u.capture=e),void(u.value=t);this.addEventListener(n.type,a,e),u={type:n.type,name:n.name,value:t,listener:a,capture:e},c?c.push(u):this.__on=[u]}}function c(n,t,e,r){var o=d;n.sourceEvent=d,d=n;try{return t.apply(e,r)}finally{d=o}}e.d(t,"c",function(){return d}),t.a=c;var a={},d=null;if("undefined"!=typeof document){"onmouseenter"in document.documentElement||(a={mouseenter:"mouseover",mouseleave:"mouseout"})}t.b=function(n,t,e){var r,o,c=i(n+""),a=c.length;{if(!(arguments.length<2)){for(d=t?u:s,null==e&&(e=!1),r=0;r<a;++r)this.each(d(c[r],t,e));return this}var d=this.node().__on;if(d)for(var l,f=0,h=d.length;f<h;++f)for(r=0,l=d[f];r<a;++r)if((o=c[r]).type===l.type&&o.name===l.name)return l.value}}},"./node_modules/d3-selection/src/selection/order.js":function(n,t,e){"use strict";t.a=function(){for(var n=this._groups,t=-1,e=n.length;++t<e;)for(var r,o=n[t],i=o.length-1,s=o[i];--i>=0;)(r=o[i])&&(s&&s!==r.nextSibling&&s.parentNode.insertBefore(r,s),s=r);return this}},"./node_modules/d3-selection/src/selection/property.js":function(n,t,e){"use strict";function r(n){return function(){delete this[n]}}function o(n,t){return function(){this[n]=t}}function i(n,t){return function(){var e=t.apply(this,arguments);null==e?delete this[n]:this[n]=e}}t.a=function(n,t){return arguments.length>1?this.each((null==t?r:"function"==typeof t?i:o)(n,t)):this.node()[n]}},"./node_modules/d3-selection/src/selection/raise.js":function(n,t,e){"use strict";function r(){this.nextSibling&&this.parentNode.appendChild(this)}t.a=function(){return this.each(r)}},"./node_modules/d3-selection/src/selection/remove.js":function(n,t,e){"use strict";function r(){var n=this.parentNode;n&&n.removeChild(this)}t.a=function(){return this.each(r)}},"./node_modules/d3-selection/src/selection/select.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/selection/index.js"),o=e("./node_modules/d3-selection/src/selector.js");t.a=function(n){"function"!=typeof n&&(n=Object(o.a)(n));for(var t=this._groups,e=t.length,i=new Array(e),s=0;s<e;++s)for(var u,c,a=t[s],d=a.length,l=i[s]=new Array(d),f=0;f<d;++f)(u=a[f])&&(c=n.call(u,u.__data__,f,a))&&("__data__"in u&&(c.__data__=u.__data__),l[f]=c);return new r.a(i,this._parents)}},"./node_modules/d3-selection/src/selection/selectAll.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/selection/index.js"),o=e("./node_modules/d3-selection/src/selectorAll.js");t.a=function(n){"function"!=typeof n&&(n=Object(o.a)(n));for(var t=this._groups,e=t.length,i=[],s=[],u=0;u<e;++u)for(var c,a=t[u],d=a.length,l=0;l<d;++l)(c=a[l])&&(i.push(n.call(c,c.__data__,l,a)),s.push(c));return new r.a(i,s)}},"./node_modules/d3-selection/src/selection/size.js":function(n,t,e){"use strict";t.a=function(){var n=0;return this.each(function(){++n}),n}},"./node_modules/d3-selection/src/selection/sort.js":function(n,t,e){"use strict";function r(n,t){return n<t?-1:n>t?1:n>=t?0:NaN}var o=e("./node_modules/d3-selection/src/selection/index.js");t.a=function(n){function t(t,e){return t&&e?n(t.__data__,e.__data__):!t-!e}n||(n=r);for(var e=this._groups,i=e.length,s=new Array(i),u=0;u<i;++u){for(var c,a=e[u],d=a.length,l=s[u]=new Array(d),f=0;f<d;++f)(c=a[f])&&(l[f]=c);l.sort(t)}return new o.a(s,this._parents).order()}},"./node_modules/d3-selection/src/selection/sparse.js":function(n,t,e){"use strict";t.a=function(n){return new Array(n.length)}},"./node_modules/d3-selection/src/selection/style.js":function(n,t,e){"use strict";function r(n){return function(){this.style.removeProperty(n)}}function o(n,t,e){return function(){this.style.setProperty(n,t,e)}}function i(n,t,e){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(n):this.style.setProperty(n,r,e)}}function s(n,t){return n.style.getPropertyValue(t)||Object(u.a)(n).getComputedStyle(n,null).getPropertyValue(t)}t.b=s;var u=e("./node_modules/d3-selection/src/window.js");t.a=function(n,t,e){return arguments.length>1?this.each((null==t?r:"function"==typeof t?i:o)(n,t,null==e?"":e)):s(this.node(),n)}},"./node_modules/d3-selection/src/selection/text.js":function(n,t,e){"use strict";function r(){this.textContent=""}function o(n){return function(){this.textContent=n}}function i(n){return function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}}t.a=function(n){return arguments.length?this.each(null==n?r:("function"==typeof n?i:o)(n)):this.node().textContent}},"./node_modules/d3-selection/src/selector.js":function(n,t,e){"use strict";function r(){}t.a=function(n){return null==n?r:function(){return this.querySelector(n)}}},"./node_modules/d3-selection/src/selectorAll.js":function(n,t,e){"use strict";function r(){return[]}t.a=function(n){return null==n?r:function(){return this.querySelectorAll(n)}}},"./node_modules/d3-selection/src/sourceEvent.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/selection/on.js");t.a=function(){for(var n,t=r.c;n=t.sourceEvent;)t=n;return t}},"./node_modules/d3-selection/src/touch.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/sourceEvent.js"),o=e("./node_modules/d3-selection/src/point.js");t.a=function(n,t,e){arguments.length<3&&(e=t,t=Object(r.a)().changedTouches);for(var i,s=0,u=t?t.length:0;s<u;++s)if((i=t[s]).identifier===e)return Object(o.a)(n,i);return null}},"./node_modules/d3-selection/src/touches.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/src/sourceEvent.js"),o=e("./node_modules/d3-selection/src/point.js");t.a=function(n,t){null==t&&(t=Object(r.a)().touches);for(var e=0,i=t?t.length:0,s=new Array(i);e<i;++e)s[e]=Object(o.a)(n,t[e]);return s}},"./node_modules/d3-selection/src/window.js":function(n,t,e){"use strict";t.a=function(n){return n.ownerDocument&&n.ownerDocument.defaultView||n.document&&n||n.defaultView}},"./node_modules/d3-shape/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-shape/src/arc.js");e.d(t,"a",function(){return r.a});var o=e("./node_modules/d3-shape/src/area.js");e.d(t,"b",function(){return o.a});var i=e("./node_modules/d3-shape/src/line.js");e.d(t,"v",function(){return i.a});var s=e("./node_modules/d3-shape/src/pie.js");e.d(t,"A",function(){return s.a});var u=e("./node_modules/d3-shape/src/areaRadial.js");e.d(t,"c",function(){return u.a}),e.d(t,"C",function(){return u.a});var c=e("./node_modules/d3-shape/src/lineRadial.js");e.d(t,"w",function(){return c.a}),e.d(t,"D",function(){return c.a});var a=e("./node_modules/d3-shape/src/pointRadial.js");e.d(t,"B",function(){return a.a});var d=e("./node_modules/d3-shape/src/link/index.js");e.d(t,"x",function(){return d.a}),e.d(t,"z",function(){return d.c}),e.d(t,"y",function(){return d.b});var l=e("./node_modules/d3-shape/src/symbol.js");e.d(t,"P",function(){return l.a}),e.d(t,"X",function(){return l.b});var f=e("./node_modules/d3-shape/src/symbol/circle.js");e.d(t,"Q",function(){return f.a});var h=e("./node_modules/d3-shape/src/symbol/cross.js");e.d(t,"R",function(){return h.a});var m=e("./node_modules/d3-shape/src/symbol/diamond.js");e.d(t,"S",function(){return m.a});var _=e("./node_modules/d3-shape/src/symbol/square.js");e.d(t,"T",function(){return _.a});var p=e("./node_modules/d3-shape/src/symbol/star.js");e.d(t,"U",function(){return p.a});var j=e("./node_modules/d3-shape/src/symbol/triangle.js");e.d(t,"V",function(){return j.a});var v=e("./node_modules/d3-shape/src/symbol/wye.js");e.d(t,"W",function(){return v.a});var b=e("./node_modules/d3-shape/src/curve/basisClosed.js");e.d(t,"e",function(){return b.a});var g=e("./node_modules/d3-shape/src/curve/basisOpen.js");e.d(t,"f",function(){return g.a});var y=e("./node_modules/d3-shape/src/curve/basis.js");e.d(t,"d",function(){return y.b});var x=e("./node_modules/d3-shape/src/curve/bundle.js");e.d(t,"g",function(){return x.a});var O=e("./node_modules/d3-shape/src/curve/cardinalClosed.js");e.d(t,"i",function(){return O.b});var w=e("./node_modules/d3-shape/src/curve/cardinalOpen.js");e.d(t,"j",function(){return w.b});var M=e("./node_modules/d3-shape/src/curve/cardinal.js");e.d(t,"h",function(){return M.b});var k=e("./node_modules/d3-shape/src/curve/catmullRomClosed.js");e.d(t,"l",function(){return k.a});var T=e("./node_modules/d3-shape/src/curve/catmullRomOpen.js");e.d(t,"m",function(){return T.a});var E=e("./node_modules/d3-shape/src/curve/catmullRom.js");e.d(t,"k",function(){return E.a});var N=e("./node_modules/d3-shape/src/curve/linearClosed.js");e.d(t,"o",function(){return N.a});var A=e("./node_modules/d3-shape/src/curve/linear.js");e.d(t,"n",function(){return A.a});var C=e("./node_modules/d3-shape/src/curve/monotone.js");e.d(t,"p",function(){return C.a}),e.d(t,"q",function(){return C.b});var S=e("./node_modules/d3-shape/src/curve/natural.js");e.d(t,"r",function(){return S.a});var q=e("./node_modules/d3-shape/src/curve/step.js");e.d(t,"s",function(){return q.a}),e.d(t,"t",function(){return q.b}),e.d(t,"u",function(){return q.c});var z=e("./node_modules/d3-shape/src/stack.js");e.d(t,"E",function(){return z.a});var P=e("./node_modules/d3-shape/src/offset/expand.js");e.d(t,"G",function(){return P.a});var R=e("./node_modules/d3-shape/src/offset/diverging.js");e.d(t,"F",function(){return R.a});var D=e("./node_modules/d3-shape/src/offset/none.js");e.d(t,"H",function(){return D.a});var I=e("./node_modules/d3-shape/src/offset/silhouette.js");e.d(t,"I",function(){return I.a});var L=e("./node_modules/d3-shape/src/offset/wiggle.js");e.d(t,"J",function(){return L.a});var H=e("./node_modules/d3-shape/src/order/ascending.js");e.d(t,"K",function(){return H.a});var U=e("./node_modules/d3-shape/src/order/descending.js");e.d(t,"L",function(){return U.a});var F=e("./node_modules/d3-shape/src/order/insideOut.js");e.d(t,"M",function(){return F.a});var B=e("./node_modules/d3-shape/src/order/none.js");e.d(t,"N",function(){return B.a});var Y=e("./node_modules/d3-shape/src/order/reverse.js");e.d(t,"O",function(){return Y.a})},"./node_modules/d3-shape/src/arc.js":function(n,t,e){"use strict";function r(n){return n.innerRadius}function o(n){return n.outerRadius}function i(n){return n.startAngle}function s(n){return n.endAngle}function u(n){return n&&n.padAngle}function c(n,t,e,r,o,i,s,u){var c=e-n,a=r-t,d=s-o,l=u-i,f=(d*(t-i)-l*(n-o))/(l*c-d*a);return[n+f*c,t+f*a]}function a(n,t,e,r,o,i,s){var u=n-e,c=t-r,a=(s?i:-i)/Object(f.l)(u*u+c*c),d=a*c,l=-a*u,h=n+d,m=t+l,_=e+d,p=r+l,j=(h+_)/2,v=(m+p)/2,b=_-h,g=p-m,y=b*b+g*g,x=o-i,O=h*p-_*m,w=(g<0?-1:1)*Object(f.l)(Object(f.h)(0,x*x*y-O*O)),M=(O*g-b*w)/y,k=(-O*b-g*w)/y,T=(O*g+b*w)/y,E=(-O*b+g*w)/y,N=M-j,A=k-v,C=T-j,S=E-v;return N*N+A*A>C*C+S*S&&(M=T,k=E),{cx:M,cy:k,x01:-d,y01:-l,x11:M*(o/x-1),y11:k*(o/x-1)}}var d=e("./node_modules/d3-path/index.js"),l=e("./node_modules/d3-shape/src/constant.js"),f=e("./node_modules/d3-shape/src/math.js");t.a=function(){function n(){var n,r,o=+t.apply(this,arguments),i=+e.apply(this,arguments),s=_.apply(this,arguments)-f.g,u=p.apply(this,arguments)-f.g,l=Object(f.a)(u-s),b=u>s;if(v||(v=n=Object(d.a)()),i<o&&(r=i,i=o,o=r),i>f.f)if(l>f.m-f.f)v.moveTo(i*Object(f.e)(s),i*Object(f.k)(s)),v.arc(0,0,i,s,u,!b),o>f.f&&(v.moveTo(o*Object(f.e)(u),o*Object(f.k)(u)),v.arc(0,0,o,u,s,b));else{var g,y,x=s,O=u,w=s,M=u,k=l,T=l,E=j.apply(this,arguments)/2,N=E>f.f&&(m?+m.apply(this,arguments):Object(f.l)(o*o+i*i)),A=Object(f.i)(Object(f.a)(i-o)/2,+h.apply(this,arguments)),C=A,S=A;if(N>f.f){var q=Object(f.c)(N/o*Object(f.k)(E)),z=Object(f.c)(N/i*Object(f.k)(E));(k-=2*q)>f.f?(q*=b?1:-1,w+=q,M-=q):(k=0,w=M=(s+u)/2),(T-=2*z)>f.f?(z*=b?1:-1,x+=z,O-=z):(T=0,x=O=(s+u)/2)}var P=i*Object(f.e)(x),R=i*Object(f.k)(x),D=o*Object(f.e)(M),I=o*Object(f.k)(M);if(A>f.f){var L=i*Object(f.e)(O),H=i*Object(f.k)(O),U=o*Object(f.e)(w),F=o*Object(f.k)(w);if(l<f.j){var B=k>f.f?c(P,R,U,F,L,H,D,I):[D,I],Y=P-B[0],X=R-B[1],W=L-B[0],V=H-B[1],G=1/Object(f.k)(Object(f.b)((Y*W+X*V)/(Object(f.l)(Y*Y+X*X)*Object(f.l)(W*W+V*V)))/2),Z=Object(f.l)(B[0]*B[0]+B[1]*B[1]);C=Object(f.i)(A,(o-Z)/(G-1)),S=Object(f.i)(A,(i-Z)/(G+1))}}T>f.f?S>f.f?(g=a(U,F,P,R,i,S,b),y=a(L,H,D,I,i,S,b),v.moveTo(g.cx+g.x01,g.cy+g.y01),S<A?v.arc(g.cx,g.cy,S,Object(f.d)(g.y01,g.x01),Object(f.d)(y.y01,y.x01),!b):(v.arc(g.cx,g.cy,S,Object(f.d)(g.y01,g.x01),Object(f.d)(g.y11,g.x11),!b),v.arc(0,0,i,Object(f.d)(g.cy+g.y11,g.cx+g.x11),Object(f.d)(y.cy+y.y11,y.cx+y.x11),!b),v.arc(y.cx,y.cy,S,Object(f.d)(y.y11,y.x11),Object(f.d)(y.y01,y.x01),!b))):(v.moveTo(P,R),v.arc(0,0,i,x,O,!b)):v.moveTo(P,R),o>f.f&&k>f.f?C>f.f?(g=a(D,I,L,H,o,-C,b),y=a(P,R,U,F,o,-C,b),v.lineTo(g.cx+g.x01,g.cy+g.y01),C<A?v.arc(g.cx,g.cy,C,Object(f.d)(g.y01,g.x01),Object(f.d)(y.y01,y.x01),!b):(v.arc(g.cx,g.cy,C,Object(f.d)(g.y01,g.x01),Object(f.d)(g.y11,g.x11),!b),v.arc(0,0,o,Object(f.d)(g.cy+g.y11,g.cx+g.x11),Object(f.d)(y.cy+y.y11,y.cx+y.x11),b),v.arc(y.cx,y.cy,C,Object(f.d)(y.y11,y.x11),Object(f.d)(y.y01,y.x01),!b))):v.arc(0,0,o,M,w,b):v.lineTo(D,I)}else v.moveTo(0,0);if(v.closePath(),n)return v=null,n+""||null}var t=r,e=o,h=Object(l.a)(0),m=null,_=i,p=s,j=u,v=null;return n.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+_.apply(this,arguments)+ +p.apply(this,arguments))/2-f.j/2;return[Object(f.e)(r)*n,Object(f.k)(r)*n]},n.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Object(l.a)(+e),n):t},n.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Object(l.a)(+t),n):e},n.cornerRadius=function(t){return arguments.length?(h="function"==typeof t?t:Object(l.a)(+t),n):h},n.padRadius=function(t){return arguments.length?(m=null==t?null:"function"==typeof t?t:Object(l.a)(+t),n):m},n.startAngle=function(t){return arguments.length?(_="function"==typeof t?t:Object(l.a)(+t),n):_},n.endAngle=function(t){return arguments.length?(p="function"==typeof t?t:Object(l.a)(+t),n):p},n.padAngle=function(t){return arguments.length?(j="function"==typeof t?t:Object(l.a)(+t),n):j},n.context=function(t){return arguments.length?(v=null==t?null:t,n):v},n}},"./node_modules/d3-shape/src/area.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-path/index.js"),o=e("./node_modules/d3-shape/src/constant.js"),i=e("./node_modules/d3-shape/src/curve/linear.js"),s=e("./node_modules/d3-shape/src/line.js"),u=e("./node_modules/d3-shape/src/point.js");t.a=function(){function n(n){var t,o,i,s,u,_=n.length,p=!1,j=new Array(_),v=new Array(_);for(null==f&&(m=h(u=Object(r.a)())),t=0;t<=_;++t){if(!(t<_&&l(s=n[t],t,n))===p)if(p=!p)o=t,m.areaStart(),m.lineStart();else{for(m.lineEnd(),m.lineStart(),i=t-1;i>=o;--i)m.point(j[i],v[i]);m.lineEnd(),m.areaEnd()}p&&(j[t]=+e(s,t,n),v[t]=+a(s,t,n),m.point(c?+c(s,t,n):j[t],d?+d(s,t,n):v[t]))}if(u)return m=null,u+""||null}function t(){return Object(s.a)().defined(l).curve(h).context(f)}var e=u.a,c=null,a=Object(o.a)(0),d=u.b,l=Object(o.a)(!0),f=null,h=i.a,m=null;return n.x=function(t){return arguments.length?(e="function"==typeof t?t:Object(o.a)(+t),c=null,n):e},n.x0=function(t){return arguments.length?(e="function"==typeof t?t:Object(o.a)(+t),n):e},n.x1=function(t){return arguments.length?(c=null==t?null:"function"==typeof t?t:Object(o.a)(+t),n):c},n.y=function(t){return arguments.length?(a="function"==typeof t?t:Object(o.a)(+t),d=null,n):a},n.y0=function(t){return arguments.length?(a="function"==typeof t?t:Object(o.a)(+t),n):a},n.y1=function(t){return arguments.length?(d=null==t?null:"function"==typeof t?t:Object(o.a)(+t),n):d},n.lineX0=n.lineY0=function(){return t().x(e).y(a)},n.lineY1=function(){return t().x(e).y(d)},n.lineX1=function(){return t().x(c).y(a)},n.defined=function(t){return arguments.length?(l="function"==typeof t?t:Object(o.a)(!!t),n):l},n.curve=function(t){return arguments.length?(h=t,null!=f&&(m=h(f)),n):h},n.context=function(t){return arguments.length?(null==t?f=m=null:m=h(f=t),n):f},n}},"./node_modules/d3-shape/src/areaRadial.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-shape/src/curve/radial.js"),o=e("./node_modules/d3-shape/src/area.js"),i=e("./node_modules/d3-shape/src/lineRadial.js");t.a=function(){var n=Object(o.a)().curve(r.a),t=n.curve,e=n.lineX0,s=n.lineX1,u=n.lineY0,c=n.lineY1;return n.angle=n.x,delete n.x,n.startAngle=n.x0,delete n.x0,n.endAngle=n.x1,delete n.x1,n.radius=n.y,delete n.y,n.innerRadius=n.y0,delete n.y0,n.outerRadius=n.y1,delete n.y1,n.lineStartAngle=function(){return Object(i.b)(e())},delete n.lineX0,n.lineEndAngle=function(){return Object(i.b)(s())},delete n.lineX1,n.lineInnerRadius=function(){return Object(i.b)(u())},delete n.lineY0,n.lineOuterRadius=function(){return Object(i.b)(c())},delete n.lineY1,n.curve=function(n){return arguments.length?t(Object(r.b)(n)):t()._curve},n}},"./node_modules/d3-shape/src/array.js":function(n,t,e){"use strict";e.d(t,"a",function(){return r});var r=Array.prototype.slice},"./node_modules/d3-shape/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-shape/src/curve/basis.js":function(n,t,e){"use strict";function r(n,t,e){n._context.bezierCurveTo((2*n._x0+n._x1)/3,(2*n._y0+n._y1)/3,(n._x0+2*n._x1)/3,(n._y0+2*n._y1)/3,(n._x0+4*n._x1+t)/6,(n._y0+4*n._y1+e)/6)}function o(n){this._context=n}t.c=r,t.a=o,o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:r(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,t){switch(n=+n,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(n,t):this._context.moveTo(n,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:r(this,n,t)}this._x0=this._x1,this._x1=n,this._y0=this._y1,this._y1=t}},t.b=function(n){return new o(n)}},"./node_modules/d3-shape/src/curve/basisClosed.js":function(n,t,e){"use strict";function r(n){this._context=n}var o=e("./node_modules/d3-shape/src/noop.js"),i=e("./node_modules/d3-shape/src/curve/basis.js");r.prototype={areaStart:o.a,areaEnd:o.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(n,t){switch(n=+n,t=+t,this._point){case 0:this._point=1,this._x2=n,this._y2=t;break;case 1:this._point=2,this._x3=n,this._y3=t;break;case 2:this._point=3,this._x4=n,this._y4=t,this._context.moveTo((this._x0+4*this._x1+n)/6,(this._y0+4*this._y1+t)/6);break;default:Object(i.c)(this,n,t)}this._x0=this._x1,this._x1=n,this._y0=this._y1,this._y1=t}},t.a=function(n){return new r(n)}},"./node_modules/d3-shape/src/curve/basisOpen.js":function(n,t,e){"use strict";function r(n){this._context=n}var o=e("./node_modules/d3-shape/src/curve/basis.js");r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,t){switch(n=+n,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+n)/6,r=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Object(o.c)(this,n,t)}this._x0=this._x1,this._x1=n,this._y0=this._y1,this._y1=t}},t.a=function(n){return new r(n)}},"./node_modules/d3-shape/src/curve/bundle.js":function(n,t,e){"use strict";function r(n,t){this._basis=new o.a(n),this._beta=t}var o=e("./node_modules/d3-shape/src/curve/basis.js");r.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var n=this._x,t=this._y,e=n.length-1;if(e>0)for(var r,o=n[0],i=t[0],s=n[e]-o,u=t[e]-i,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*n[c]+(1-this._beta)*(o+r*s),this._beta*t[c]+(1-this._beta)*(i+r*u));this._x=this._y=null,this._basis.lineEnd()},point:function(n,t){this._x.push(+n),this._y.push(+t)}},t.a=function n(t){function e(n){return 1===t?new o.a(n):new r(n,t)}return e.beta=function(t){return n(+t)},e}(.85)},"./node_modules/d3-shape/src/curve/cardinal.js":function(n,t,e){"use strict";function r(n,t,e){n._context.bezierCurveTo(n._x1+n._k*(n._x2-n._x0),n._y1+n._k*(n._y2-n._y0),n._x2+n._k*(n._x1-t),n._y2+n._k*(n._y1-e),n._x2,n._y2)}function o(n,t){this._context=n,this._k=(1-t)/6}t.c=r,t.a=o,o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:r(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,t){switch(n=+n,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(n,t):this._context.moveTo(n,t);break;case 1:this._point=2,this._x1=n,this._y1=t;break;case 2:this._point=3;default:r(this,n,t)}this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.b=function n(t){function e(n){return new o(n,t)}return e.tension=function(t){return n(+t)},e}(0)},"./node_modules/d3-shape/src/curve/cardinalClosed.js":function(n,t,e){"use strict";function r(n,t){this._context=n,this._k=(1-t)/6}t.a=r;var o=e("./node_modules/d3-shape/src/noop.js"),i=e("./node_modules/d3-shape/src/curve/cardinal.js");r.prototype={areaStart:o.a,areaEnd:o.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(n,t){switch(n=+n,t=+t,this._point){case 0:this._point=1,this._x3=n,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=n,this._y4=t);break;case 2:this._point=3,this._x5=n,this._y5=t;break;default:Object(i.c)(this,n,t)}this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.b=function n(t){function e(n){return new r(n,t)}return e.tension=function(t){return n(+t)},e}(0)},"./node_modules/d3-shape/src/curve/cardinalOpen.js":function(n,t,e){"use strict";function r(n,t){this._context=n,this._k=(1-t)/6}t.a=r;var o=e("./node_modules/d3-shape/src/curve/cardinal.js");r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,t){switch(n=+n,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(o.c)(this,n,t)}this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.b=function n(t){function e(n){return new r(n,t)}return e.tension=function(t){return n(+t)},e}(0)},"./node_modules/d3-shape/src/curve/catmullRom.js":function(n,t,e){"use strict";function r(n,t,e){var r=n._x1,o=n._y1,s=n._x2,u=n._y2;if(n._l01_a>i.f){var c=2*n._l01_2a+3*n._l01_a*n._l12_a+n._l12_2a,a=3*n._l01_a*(n._l01_a+n._l12_a);r=(r*c-n._x0*n._l12_2a+n._x2*n._l01_2a)/a,o=(o*c-n._y0*n._l12_2a+n._y2*n._l01_2a)/a}if(n._l23_a>i.f){var d=2*n._l23_2a+3*n._l23_a*n._l12_a+n._l12_2a,l=3*n._l23_a*(n._l23_a+n._l12_a);s=(s*d+n._x1*n._l23_2a-t*n._l12_2a)/l,u=(u*d+n._y1*n._l23_2a-e*n._l12_2a)/l}n._context.bezierCurveTo(r,o,s,u,n._x2,n._y2)}function o(n,t){this._context=n,this._alpha=t}t.b=r;var i=e("./node_modules/d3-shape/src/math.js"),s=e("./node_modules/d3-shape/src/curve/cardinal.js");o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,t){if(n=+n,t=+t,this._point){var e=this._x2-n,o=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+o*o,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(n,t):this._context.moveTo(n,t);break;case 1:this._point=2;break;case 2:this._point=3;default:r(this,n,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.a=function n(t){function e(n){return t?new o(n,t):new s.a(n,0)}return e.alpha=function(t){return n(+t)},e}(.5)},"./node_modules/d3-shape/src/curve/catmullRomClosed.js":function(n,t,e){"use strict";function r(n,t){this._context=n,this._alpha=t}var o=e("./node_modules/d3-shape/src/curve/cardinalClosed.js"),i=e("./node_modules/d3-shape/src/noop.js"),s=e("./node_modules/d3-shape/src/curve/catmullRom.js");r.prototype={areaStart:i.a,areaEnd:i.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(n,t){if(n=+n,t=+t,this._point){var e=this._x2-n,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=n,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=n,this._y4=t);break;case 2:this._point=3,this._x5=n,this._y5=t;break;default:Object(s.b)(this,n,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.a=function n(t){function e(n){return t?new r(n,t):new o.a(n,0)}return e.alpha=function(t){return n(+t)},e}(.5)},"./node_modules/d3-shape/src/curve/catmullRomOpen.js":function(n,t,e){"use strict";function r(n,t){this._context=n,this._alpha=t}var o=e("./node_modules/d3-shape/src/curve/cardinalOpen.js"),i=e("./node_modules/d3-shape/src/curve/catmullRom.js");r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,t){if(n=+n,t=+t,this._point){var e=this._x2-n,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(i.b)(this,n,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=t}},t.a=function n(t){function e(n){return t?new r(n,t):new o.a(n,0)}return e.alpha=function(t){return n(+t)},e}(.5)},"./node_modules/d3-shape/src/curve/linear.js":function(n,t,e){"use strict";function r(n){this._context=n}r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,t){switch(n=+n,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(n,t):this._context.moveTo(n,t);break;case 1:this._point=2;default:this._context.lineTo(n,t)}}},t.a=function(n){return new r(n)}},"./node_modules/d3-shape/src/curve/linearClosed.js":function(n,t,e){"use strict";function r(n){this._context=n}var o=e("./node_modules/d3-shape/src/noop.js");r.prototype={areaStart:o.a,areaEnd:o.a,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(n,t){n=+n,t=+t,this._point?this._context.lineTo(n,t):(this._point=1,this._context.moveTo(n,t))}},t.a=function(n){return new r(n)}},"./node_modules/d3-shape/src/curve/monotone.js":function(n,t,e){"use strict";function r(n){return n<0?-1:1}function o(n,t,e){var o=n._x1-n._x0,i=t-n._x1,s=(n._y1-n._y0)/(o||i<0&&-0),u=(e-n._y1)/(i||o<0&&-0),c=(s*i+u*o)/(o+i);return(r(s)+r(u))*Math.min(Math.abs(s),Math.abs(u),.5*Math.abs(c))||0}function i(n,t){var e=n._x1-n._x0;return e?(3*(n._y1-n._y0)/e-t)/2:t}function s(n,t,e){var r=n._x0,o=n._y0,i=n._x1,s=n._y1,u=(i-r)/3;n._context.bezierCurveTo(r+u,o+u*t,i-u,s-u*e,i,s)}function u(n){this._context=n}function c(n){this._context=new a(n)}function a(n){this._context=n}function d(n){return new u(n)}function l(n){return new c(n)}t.a=d,t.b=l,u.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:s(this,this._t0,i(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,t){var e=NaN;if(n=+n,t=+t,n!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(n,t):this._context.moveTo(n,t);break;case 1:this._point=2;break;case 2:this._point=3,s(this,i(this,e=o(this,n,t)),e);break;default:s(this,this._t0,e=o(this,n,t))}this._x0=this._x1,this._x1=n,this._y0=this._y1,this._y1=t,this._t0=e}}},(c.prototype=Object.create(u.prototype)).point=function(n,t){u.prototype.point.call(this,t,n)},a.prototype={moveTo:function(n,t){this._context.moveTo(t,n)},closePath:function(){this._context.closePath()},lineTo:function(n,t){this._context.lineTo(t,n)},bezierCurveTo:function(n,t,e,r,o,i){this._context.bezierCurveTo(t,n,r,e,i,o)}}},"./node_modules/d3-shape/src/curve/natural.js":function(n,t,e){"use strict";function r(n){this._context=n}function o(n){var t,e,r=n.length-1,o=new Array(r),i=new Array(r),s=new Array(r);for(o[0]=0,i[0]=2,s[0]=n[0]+2*n[1],t=1;t<r-1;++t)o[t]=1,i[t]=4,s[t]=4*n[t]+2*n[t+1];for(o[r-1]=2,i[r-1]=7,s[r-1]=8*n[r-1]+n[r],t=1;t<r;++t)e=o[t]/i[t-1],i[t]-=e,s[t]-=e*s[t-1];for(o[r-1]=s[r-1]/i[r-1],t=r-2;t>=0;--t)o[t]=(s[t]-o[t+1])/i[t];for(i[r-1]=(n[r]+o[r-1])/2,t=0;t<r-1;++t)i[t]=2*n[t+1]-o[t+1];return[o,i]}r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var n=this._x,t=this._y,e=n.length;if(e)if(this._line?this._context.lineTo(n[0],t[0]):this._context.moveTo(n[0],t[0]),2===e)this._context.lineTo(n[1],t[1]);else for(var r=o(n),i=o(t),s=0,u=1;u<e;++s,++u)this._context.bezierCurveTo(r[0][s],i[0][s],r[1][s],i[1][s],n[u],t[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(n,t){this._x.push(+n),this._y.push(+t)}},t.a=function(n){return new r(n)}},"./node_modules/d3-shape/src/curve/radial.js":function(n,t,e){"use strict";function r(n){this._curve=n}function o(n){function t(t){return new r(n(t))}return t._curve=n,t}e.d(t,"a",function(){return s}),t.b=o;var i=e("./node_modules/d3-shape/src/curve/linear.js"),s=o(i.a);r.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(n,t){this._curve.point(t*Math.sin(n),t*-Math.cos(n))}}},"./node_modules/d3-shape/src/curve/step.js":function(n,t,e){"use strict";function r(n,t){this._context=n,this._t=t}function o(n){return new r(n,0)}function i(n){return new r(n,1)}t.c=o,t.b=i,r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(n,t){switch(n=+n,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(n,t):this._context.moveTo(n,t);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(n,t);else{var e=this._x*(1-this._t)+n*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,t)}}this._x=n,this._y=t}},t.a=function(n){return new r(n,.5)}},"./node_modules/d3-shape/src/descending.js":function(n,t,e){"use strict";t.a=function(n,t){return t<n?-1:t>n?1:t>=n?0:NaN}},"./node_modules/d3-shape/src/identity.js":function(n,t,e){"use strict";t.a=function(n){return n}},"./node_modules/d3-shape/src/line.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-path/index.js"),o=e("./node_modules/d3-shape/src/constant.js"),i=e("./node_modules/d3-shape/src/curve/linear.js"),s=e("./node_modules/d3-shape/src/point.js");t.a=function(){function n(n){var o,i,s,l=n.length,f=!1;for(null==c&&(d=a(s=Object(r.a)())),o=0;o<=l;++o)!(o<l&&u(i=n[o],o,n))===f&&((f=!f)?d.lineStart():d.lineEnd()),f&&d.point(+t(i,o,n),+e(i,o,n));if(s)return d=null,s+""||null}var t=s.a,e=s.b,u=Object(o.a)(!0),c=null,a=i.a,d=null;return n.x=function(e){return arguments.length?(t="function"==typeof e?e:Object(o.a)(+e),n):t},n.y=function(t){return arguments.length?(e="function"==typeof t?t:Object(o.a)(+t),n):e},n.defined=function(t){return arguments.length?(u="function"==typeof t?t:Object(o.a)(!!t),n):u},n.curve=function(t){return arguments.length?(a=t,null!=c&&(d=a(c)),n):a},n.context=function(t){return arguments.length?(null==t?c=d=null:d=a(c=t),n):c},n}},"./node_modules/d3-shape/src/lineRadial.js":function(n,t,e){"use strict";function r(n){var t=n.curve;return n.angle=n.x,delete n.x,n.radius=n.y,delete n.y,n.curve=function(n){return arguments.length?t(Object(o.b)(n)):t()._curve},n}t.b=r;var o=e("./node_modules/d3-shape/src/curve/radial.js"),i=e("./node_modules/d3-shape/src/line.js");t.a=function(){return r(Object(i.a)().curve(o.a))}},"./node_modules/d3-shape/src/link/index.js":function(n,t,e){"use strict";function r(n){return n.source}function o(n){return n.target}function i(n){function t(){var t,r=h.a.call(arguments),o=e.apply(this,r),a=i.apply(this,r);if(c||(c=t=Object(f.a)()),n(c,+s.apply(this,(r[0]=o,r)),+u.apply(this,r),+s.apply(this,(r[0]=a,r)),+u.apply(this,r)),t)return c=null,t+""||null}var e=r,i=o,s=_.a,u=_.b,c=null;return t.source=function(n){return arguments.length?(e=n,t):e},t.target=function(n){return arguments.length?(i=n,t):i},t.x=function(n){return arguments.length?(s="function"==typeof n?n:Object(m.a)(+n),t):s},t.y=function(n){return arguments.length?(u="function"==typeof n?n:Object(m.a)(+n),t):u},t.context=function(n){return arguments.length?(c=null==n?null:n,t):c},t}function s(n,t,e,r,o){n.moveTo(t,e),n.bezierCurveTo(t=(t+r)/2,e,t,o,r,o)}function u(n,t,e,r,o){n.moveTo(t,e),n.bezierCurveTo(t,e=(e+o)/2,r,e,r,o)}function c(n,t,e,r,o){var i=Object(p.a)(t,e),s=Object(p.a)(t,e=(e+o)/2),u=Object(p.a)(r,e),c=Object(p.a)(r,o);n.moveTo(i[0],i[1]),n.bezierCurveTo(s[0],s[1],u[0],u[1],c[0],c[1])}function a(){return i(s)}function d(){return i(u)}function l(){var n=i(c);return n.angle=n.x,delete n.x,n.radius=n.y,delete n.y,n}t.a=a,t.c=d,t.b=l;var f=e("./node_modules/d3-path/index.js"),h=e("./node_modules/d3-shape/src/array.js"),m=e("./node_modules/d3-shape/src/constant.js"),_=e("./node_modules/d3-shape/src/point.js"),p=e("./node_modules/d3-shape/src/pointRadial.js")},"./node_modules/d3-shape/src/math.js":function(n,t,e){"use strict";function r(n){return n>1?0:n<-1?h:Math.acos(n)}function o(n){return n>=1?m:n<=-1?-m:Math.asin(n)}e.d(t,"a",function(){return i}),e.d(t,"d",function(){return s}),e.d(t,"e",function(){return u}),e.d(t,"h",function(){return c}),e.d(t,"i",function(){return a}),e.d(t,"k",function(){return d}),e.d(t,"l",function(){return l}),e.d(t,"f",function(){return f}),e.d(t,"j",function(){return h}),e.d(t,"g",function(){return m}),e.d(t,"m",function(){return _}),t.b=r,t.c=o;var i=Math.abs,s=Math.atan2,u=Math.cos,c=Math.max,a=Math.min,d=Math.sin,l=Math.sqrt,f=1e-12,h=Math.PI,m=h/2,_=2*h},"./node_modules/d3-shape/src/noop.js":function(n,t,e){"use strict";t.a=function(){}},"./node_modules/d3-shape/src/offset/diverging.js":function(n,t,e){"use strict";t.a=function(n,t){if((u=n.length)>1)for(var e,r,o,i,s,u,c=0,a=n[t[0]].length;c<a;++c)for(i=s=0,e=0;e<u;++e)(o=(r=n[t[e]][c])[1]-r[0])>=0?(r[0]=i,r[1]=i+=o):o<0?(r[1]=s,r[0]=s+=o):r[0]=i}},"./node_modules/d3-shape/src/offset/expand.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-shape/src/offset/none.js");t.a=function(n,t){if((o=n.length)>0){for(var e,o,i,s=0,u=n[0].length;s<u;++s){for(i=e=0;e<o;++e)i+=n[e][s][1]||0;if(i)for(e=0;e<o;++e)n[e][s][1]/=i}Object(r.a)(n,t)}}},"./node_modules/d3-shape/src/offset/none.js":function(n,t,e){"use strict";t.a=function(n,t){if((o=n.length)>1)for(var e,r,o,i=1,s=n[t[0]],u=s.length;i<o;++i)for(r=s,s=n[t[i]],e=0;e<u;++e)s[e][1]+=s[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}},"./node_modules/d3-shape/src/offset/silhouette.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-shape/src/offset/none.js");t.a=function(n,t){if((e=n.length)>0){for(var e,o=0,i=n[t[0]],s=i.length;o<s;++o){for(var u=0,c=0;u<e;++u)c+=n[u][o][1]||0;i[o][1]+=i[o][0]=-c/2}Object(r.a)(n,t)}}},"./node_modules/d3-shape/src/offset/wiggle.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-shape/src/offset/none.js");t.a=function(n,t){if((i=n.length)>0&&(o=(e=n[t[0]]).length)>0){for(var e,o,i,s=0,u=1;u<o;++u){for(var c=0,a=0,d=0;c<i;++c){for(var l=n[t[c]],f=l[u][1]||0,h=l[u-1][1]||0,m=(f-h)/2,_=0;_<c;++_){var p=n[t[_]];m+=(p[u][1]||0)-(p[u-1][1]||0)}a+=f,d+=m*f}e[u-1][1]+=e[u-1][0]=s,a&&(s-=d/a)}e[u-1][1]+=e[u-1][0]=s,Object(r.a)(n,t)}}},"./node_modules/d3-shape/src/order/ascending.js":function(n,t,e){"use strict";function r(n){for(var t,e=0,r=-1,o=n.length;++r<o;)(t=+n[r][1])&&(e+=t);return e}t.b=r;var o=e("./node_modules/d3-shape/src/order/none.js");t.a=function(n){var t=n.map(r);return Object(o.a)(n).sort(function(n,e){return t[n]-t[e]})}},"./node_modules/d3-shape/src/order/descending.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-shape/src/order/ascending.js");t.a=function(n){return Object(r.a)(n).reverse()}},"./node_modules/d3-shape/src/order/insideOut.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-shape/src/order/none.js"),o=e("./node_modules/d3-shape/src/order/ascending.js");t.a=function(n){var t,e,i=n.length,s=n.map(o.b),u=Object(r.a)(n).sort(function(n,t){return s[t]-s[n]}),c=0,a=0,d=[],l=[];for(t=0;t<i;++t)e=u[t],c<a?(c+=s[e],d.push(e)):(a+=s[e],l.push(e));return l.reverse().concat(d)}},"./node_modules/d3-shape/src/order/none.js":function(n,t,e){"use strict";t.a=function(n){for(var t=n.length,e=new Array(t);--t>=0;)e[t]=t;return e}},"./node_modules/d3-shape/src/order/reverse.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-shape/src/order/none.js");t.a=function(n){return Object(r.a)(n).reverse()}},"./node_modules/d3-shape/src/pie.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-shape/src/constant.js"),o=e("./node_modules/d3-shape/src/descending.js"),i=e("./node_modules/d3-shape/src/identity.js"),s=e("./node_modules/d3-shape/src/math.js");t.a=function(){function n(n){var r,o,i,l,f,h=n.length,m=0,_=new Array(h),p=new Array(h),j=+c.apply(this,arguments),v=Math.min(s.m,Math.max(-s.m,a.apply(this,arguments)-j)),b=Math.min(Math.abs(v)/h,d.apply(this,arguments)),g=b*(v<0?-1:1);for(r=0;r<h;++r)(f=p[_[r]=r]=+t(n[r],r,n))>0&&(m+=f);for(null!=e?_.sort(function(n,t){return e(p[n],p[t])}):null!=u&&_.sort(function(t,e){return u(n[t],n[e])}),r=0,i=m?(v-h*g)/m:0;r<h;++r,j=l)o=_[r],f=p[o],l=j+(f>0?f*i:0)+g,p[o]={data:n[o],index:r,value:f,startAngle:j,endAngle:l,padAngle:b};return p}var t=i.a,e=o.a,u=null,c=Object(r.a)(0),a=Object(r.a)(s.m),d=Object(r.a)(0);return n.value=function(e){return arguments.length?(t="function"==typeof e?e:Object(r.a)(+e),n):t},n.sortValues=function(t){return arguments.length?(e=t,u=null,n):e},n.sort=function(t){return arguments.length?(u=t,e=null,n):u},n.startAngle=function(t){return arguments.length?(c="function"==typeof t?t:Object(r.a)(+t),n):c},n.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:Object(r.a)(+t),n):a},n.padAngle=function(t){return arguments.length?(d="function"==typeof t?t:Object(r.a)(+t),n):d},n}},"./node_modules/d3-shape/src/point.js":function(n,t,e){"use strict";function r(n){return n[0]}function o(n){return n[1]}t.a=r,t.b=o},"./node_modules/d3-shape/src/pointRadial.js":function(n,t,e){"use strict";t.a=function(n,t){return[(t=+t)*Math.cos(n-=Math.PI/2),t*Math.sin(n)]}},"./node_modules/d3-shape/src/stack.js":function(n,t,e){"use strict";function r(n,t){return n[t]}var o=e("./node_modules/d3-shape/src/array.js"),i=e("./node_modules/d3-shape/src/constant.js"),s=e("./node_modules/d3-shape/src/offset/none.js"),u=e("./node_modules/d3-shape/src/order/none.js");t.a=function(){function n(n){var r,o,i=t.apply(this,arguments),s=n.length,u=i.length,d=new Array(u);for(r=0;r<u;++r){for(var l,f=i[r],h=d[r]=new Array(s),m=0;m<s;++m)h[m]=l=[0,+a(n[m],f,m,n)],l.data=n[m];h.key=f}for(r=0,o=e(d);r<u;++r)d[o[r]].index=r;return c(d,o),d}var t=Object(i.a)([]),e=u.a,c=s.a,a=r;return n.keys=function(e){return arguments.length?(t="function"==typeof e?e:Object(i.a)(o.a.call(e)),n):t},n.value=function(t){return arguments.length?(a="function"==typeof t?t:Object(i.a)(+t),n):a},n.order=function(t){return arguments.length?(e=null==t?u.a:"function"==typeof t?t:Object(i.a)(o.a.call(t)),n):e},n.offset=function(t){return arguments.length?(c=null==t?s.a:t,n):c},n}},"./node_modules/d3-shape/src/symbol.js":function(n,t,e){"use strict";e.d(t,"b",function(){return f});var r=e("./node_modules/d3-path/index.js"),o=e("./node_modules/d3-shape/src/symbol/circle.js"),i=e("./node_modules/d3-shape/src/symbol/cross.js"),s=e("./node_modules/d3-shape/src/symbol/diamond.js"),u=e("./node_modules/d3-shape/src/symbol/star.js"),c=e("./node_modules/d3-shape/src/symbol/square.js"),a=e("./node_modules/d3-shape/src/symbol/triangle.js"),d=e("./node_modules/d3-shape/src/symbol/wye.js"),l=e("./node_modules/d3-shape/src/constant.js"),f=[o.a,i.a,s.a,c.a,u.a,a.a,d.a];t.a=function(){function n(){var n;if(i||(i=n=Object(r.a)()),t.apply(this,arguments).draw(i,+e.apply(this,arguments)),n)return i=null,n+""||null}var t=Object(l.a)(o.a),e=Object(l.a)(64),i=null;return n.type=function(e){return arguments.length?(t="function"==typeof e?e:Object(l.a)(e),n):t},n.size=function(t){return arguments.length?(e="function"==typeof t?t:Object(l.a)(+t),n):e},n.context=function(t){return arguments.length?(i=null==t?null:t,n):i},n}},"./node_modules/d3-shape/src/symbol/circle.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-shape/src/math.js");t.a={draw:function(n,t){var e=Math.sqrt(t/r.j);n.moveTo(e,0),n.arc(0,0,e,0,r.m)}}},"./node_modules/d3-shape/src/symbol/cross.js":function(n,t,e){"use strict";t.a={draw:function(n,t){var e=Math.sqrt(t/5)/2;n.moveTo(-3*e,-e),n.lineTo(-e,-e),n.lineTo(-e,-3*e),n.lineTo(e,-3*e),n.lineTo(e,-e),n.lineTo(3*e,-e),n.lineTo(3*e,e),n.lineTo(e,e),n.lineTo(e,3*e),n.lineTo(-e,3*e),n.lineTo(-e,e),n.lineTo(-3*e,e),n.closePath()}}},"./node_modules/d3-shape/src/symbol/diamond.js":function(n,t,e){"use strict";var r=Math.sqrt(1/3),o=2*r;t.a={draw:function(n,t){var e=Math.sqrt(t/o),i=e*r;n.moveTo(0,-e),n.lineTo(i,0),n.lineTo(0,e),n.lineTo(-i,0),n.closePath()}}},"./node_modules/d3-shape/src/symbol/square.js":function(n,t,e){"use strict";t.a={draw:function(n,t){var e=Math.sqrt(t),r=-e/2;n.rect(r,r,e,e)}}},"./node_modules/d3-shape/src/symbol/star.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-shape/src/math.js"),o=Math.sin(r.j/10)/Math.sin(7*r.j/10),i=Math.sin(r.m/10)*o,s=-Math.cos(r.m/10)*o;t.a={draw:function(n,t){var e=Math.sqrt(.8908130915292852*t),o=i*e,u=s*e;n.moveTo(0,-e),n.lineTo(o,u);for(var c=1;c<5;++c){var a=r.m*c/5,d=Math.cos(a),l=Math.sin(a);n.lineTo(l*e,-d*e),n.lineTo(d*o-l*u,l*o+d*u)}n.closePath()}}},"./node_modules/d3-shape/src/symbol/triangle.js":function(n,t,e){"use strict";var r=Math.sqrt(3);t.a={draw:function(n,t){var e=-Math.sqrt(t/(3*r));n.moveTo(0,2*e),n.lineTo(-r*e,-e),n.lineTo(r*e,-e),n.closePath()}}},"./node_modules/d3-shape/src/symbol/wye.js":function(n,t,e){"use strict";var r=-.5,o=Math.sqrt(3)/2,i=1/Math.sqrt(12),s=3*(i/2+1);t.a={draw:function(n,t){var e=Math.sqrt(t/s),u=e/2,c=e*i,a=u,d=e*i+e,l=-a,f=d;n.moveTo(u,c),n.lineTo(a,d),n.lineTo(l,f),n.lineTo(r*u-o*c,o*u+r*c),n.lineTo(r*a-o*d,o*a+r*d),n.lineTo(r*l-o*f,o*l+r*f),n.lineTo(r*u+o*c,r*c-o*u),n.lineTo(r*a+o*d,r*d-o*a),n.lineTo(r*l+o*f,r*f-o*l),n.closePath()}}},"./node_modules/d3-time-format/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-time-format/src/defaultLocale.js");e.d(t,"d",function(){return r.a}),e.d(t,"c",function(){return r.b}),e.d(t,"f",function(){return r.c}),e.d(t,"g",function(){return r.d}),e.d(t,"h",function(){return r.e});var o=e("./node_modules/d3-time-format/src/locale.js");e.d(t,"e",function(){return o.a});var i=e("./node_modules/d3-time-format/src/isoFormat.js");e.d(t,"a",function(){return i.a});var s=e("./node_modules/d3-time-format/src/isoParse.js");e.d(t,"b",function(){return s.a})},"./node_modules/d3-time-format/src/defaultLocale.js":function(n,t,e){"use strict";function r(n){return o=Object(a.a)(n),i=o.format,s=o.parse,u=o.utcFormat,c=o.utcParse,o}e.d(t,"b",function(){return i}),e.d(t,"c",function(){return s}),e.d(t,"d",function(){return u}),e.d(t,"e",function(){return c}),t.a=r;var o,i,s,u,c,a=e("./node_modules/d3-time-format/src/locale.js");r({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]})},"./node_modules/d3-time-format/src/isoFormat.js":function(n,t,e){"use strict";function r(n){return n.toISOString()}e.d(t,"b",function(){return i});var o=e("./node_modules/d3-time-format/src/defaultLocale.js"),i="%Y-%m-%dT%H:%M:%S.%LZ",s=Date.prototype.toISOString?r:Object(o.d)(i);t.a=s},"./node_modules/d3-time-format/src/isoParse.js":function(n,t,e){"use strict";function r(n){var t=new Date(n);return isNaN(t)?null:t}var o=e("./node_modules/d3-time-format/src/isoFormat.js"),i=e("./node_modules/d3-time-format/src/defaultLocale.js"),s=+new Date("2000-01-01T00:00:00.000Z")?r:Object(i.e)(o.b);t.a=s},"./node_modules/d3-time-format/src/locale.js":function(n,t,e){"use strict";function r(n){if(0<=n.y&&n.y<100){var t=new Date(-1,n.m,n.d,n.H,n.M,n.S,n.L);return t.setFullYear(n.y),t}return new Date(n.y,n.m,n.d,n.H,n.M,n.S,n.L)}function o(n){if(0<=n.y&&n.y<100){var t=new Date(Date.UTC(-1,n.m,n.d,n.H,n.M,n.S,n.L));return t.setUTCFullYear(n.y),t}return new Date(Date.UTC(n.y,n.m,n.d,n.H,n.M,n.S,n.L))}function i(n){return{y:n,m:0,d:1,H:0,M:0,S:0,L:0}}function s(n){function t(n,t){return function(e){var r,o,i,s=[],u=-1,c=0,a=n.length;for(e instanceof Date||(e=new Date(+e));++u<a;)37===n.charCodeAt(u)&&(s.push(n.slice(c,u)),null!=(o=_n[r=n.charAt(++u)])?r=n.charAt(++u):o="e"===r?" ":"0",(i=t[r])&&(r=i(e,o)),s.push(r),c=u+1);return s.push(n.slice(c,u)),s.join("")}}function e(n,t){return function(e){var r,u,c=i(1900),a=s(c,n,e+="",0);if(a!=e.length)return null;if("Q"in c)return new Date(c.Q);if("p"in c&&(c.H=c.H%12+12*c.p),"V"in c){if(c.V<1||c.V>53)return null;"w"in c||(c.w=1),"Z"in c?(r=o(i(c.y)),u=r.getUTCDay(),r=u>4||0===u?mn.P.ceil(r):Object(mn.P)(r),r=mn.F.offset(r,7*(c.V-1)),c.y=r.getUTCFullYear(),c.m=r.getUTCMonth(),c.d=r.getUTCDate()+(c.w+6)%7):(r=t(i(c.y)),u=r.getDay(),r=u>4||0===u?mn.l.ceil(r):Object(mn.l)(r),r=mn.a.offset(r,7*(c.V-1)),c.y=r.getFullYear(),c.m=r.getMonth(),c.d=r.getDate()+(c.w+6)%7)}else("W"in c||"U"in c)&&("w"in c||(c.w="u"in c?c.u%7:"W"in c?1:0),u="Z"in c?o(i(c.y)).getUTCDay():t(i(c.y)).getDay(),c.m=0,c.d="W"in c?(c.w+6)%7+7*c.W-(u+5)%7:c.w+7*c.U-(u+6)%7);return"Z"in c?(c.H+=c.Z/100|0,c.M+=c.Z%100,o(c)):t(c)}}function s(n,t,e,r){for(var o,i,s=0,u=t.length,c=e.length;s<u;){if(r>=c)return-1;if(37===(o=t.charCodeAt(s++))){if(o=t.charAt(s++),!(i=$n[o in _n?t.charAt(s++):o])||(r=i(n,e,r))<0)return-1}else if(o!=e.charCodeAt(r++))return-1}return r}function u(n,t,e){var r=Hn.exec(t.slice(e));return r?(n.p=Un[r[0].toLowerCase()],e+r[0].length):-1}function c(n,t,e){var r=Yn.exec(t.slice(e));return r?(n.w=Xn[r[0].toLowerCase()],e+r[0].length):-1}function pn(n,t,e){var r=Fn.exec(t.slice(e));return r?(n.w=Bn[r[0].toLowerCase()],e+r[0].length):-1}function jn(n,t,e){var r=Gn.exec(t.slice(e));return r?(n.m=Zn[r[0].toLowerCase()],e+r[0].length):-1}function vn(n,t,e){var r=Wn.exec(t.slice(e));return r?(n.m=Vn[r[0].toLowerCase()],e+r[0].length):-1}function bn(n,t,e){return s(n,Sn,t,e)}function gn(n,t,e){return s(n,qn,t,e)}function yn(n,t,e){return s(n,zn,t,e)}function xn(n){return Dn[n.getDay()]}function On(n){return Rn[n.getDay()]}function wn(n){return Ln[n.getMonth()]}function Mn(n){return In[n.getMonth()]}function kn(n){return Pn[+(n.getHours()>=12)]}function Tn(n){return Dn[n.getUTCDay()]}function En(n){return Rn[n.getUTCDay()]}function Nn(n){return Ln[n.getUTCMonth()]}function An(n){return In[n.getUTCMonth()]}function Cn(n){return Pn[+(n.getUTCHours()>=12)]}var Sn=n.dateTime,qn=n.date,zn=n.time,Pn=n.periods,Rn=n.days,Dn=n.shortDays,In=n.months,Ln=n.shortMonths,Hn=a(Pn),Un=d(Pn),Fn=a(Rn),Bn=d(Rn),Yn=a(Dn),Xn=d(Dn),Wn=a(In),Vn=d(In),Gn=a(Ln),Zn=d(Ln),Jn={a:xn,A:On,b:wn,B:Mn,c:null,d:A,e:A,f:P,H:C,I:S,j:q,L:z,m:R,M:D,p:kn,Q:fn,s:hn,S:I,u:L,U:H,V:U,w:F,W:B,x:null,X:null,y:Y,Y:X,Z:W,"%":ln},Qn={a:Tn,A:En,b:Nn,B:An,c:null,d:V,e:V,f:$,H:G,I:Z,j:J,L:Q,m:K,M:nn,p:Cn,Q:fn,s:hn,S:tn,u:en,U:rn,V:on,w:sn,W:un,x:null,X:null,y:cn,Y:an,Z:dn,"%":ln},$n={a:c,A:pn,b:jn,B:vn,c:bn,d:g,e:g,f:k,H:x,I:x,j:y,L:M,m:b,M:O,p:u,Q:E,s:N,S:w,u:f,U:h,V:m,w:l,W:_,x:gn,X:yn,y:j,Y:p,Z:v,"%":T};return Jn.x=t(qn,Jn),Jn.X=t(zn,Jn),Jn.c=t(Sn,Jn),Qn.x=t(qn,Qn),Qn.X=t(zn,Qn),Qn.c=t(Sn,Qn),{format:function(n){var e=t(n+="",Jn);return e.toString=function(){return n},e},parse:function(n){var t=e(n+="",r);return t.toString=function(){return n},t},utcFormat:function(n){var e=t(n+="",Qn);return e.toString=function(){return n},e},utcParse:function(n){var t=e(n,o);return t.toString=function(){return n},t}}}function u(n,t,e){var r=n<0?"-":"",o=(r?-n:n)+"",i=o.length;return r+(i<e?new Array(e-i+1).join(t)+o:o)}function c(n){return n.replace(vn,"\\$&")}function a(n){return new RegExp("^(?:"+n.map(c).join("|")+")","i")}function d(n){for(var t={},e=-1,r=n.length;++e<r;)t[n[e].toLowerCase()]=e;return t}function l(n,t,e){var r=pn.exec(t.slice(e,e+1));return r?(n.w=+r[0],e+r[0].length):-1}function f(n,t,e){var r=pn.exec(t.slice(e,e+1));return r?(n.u=+r[0],e+r[0].length):-1}function h(n,t,e){var r=pn.exec(t.slice(e,e+2));return r?(n.U=+r[0],e+r[0].length):-1}function m(n,t,e){var r=pn.exec(t.slice(e,e+2));return r?(n.V=+r[0],e+r[0].length):-1}function _(n,t,e){var r=pn.exec(t.slice(e,e+2));return r?(n.W=+r[0],e+r[0].length):-1}function p(n,t,e){var r=pn.exec(t.slice(e,e+4));return r?(n.y=+r[0],e+r[0].length):-1}function j(n,t,e){var r=pn.exec(t.slice(e,e+2));return r?(n.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function v(n,t,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(e,e+6));return r?(n.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function b(n,t,e){var r=pn.exec(t.slice(e,e+2));return r?(n.m=r[0]-1,e+r[0].length):-1}function g(n,t,e){var r=pn.exec(t.slice(e,e+2));return r?(n.d=+r[0],e+r[0].length):-1}function y(n,t,e){var r=pn.exec(t.slice(e,e+3));return r?(n.m=0,n.d=+r[0],e+r[0].length):-1}function x(n,t,e){var r=pn.exec(t.slice(e,e+2));return r?(n.H=+r[0],e+r[0].length):-1}function O(n,t,e){var r=pn.exec(t.slice(e,e+2));return r?(n.M=+r[0],e+r[0].length):-1}function w(n,t,e){var r=pn.exec(t.slice(e,e+2));return r?(n.S=+r[0],e+r[0].length):-1}function M(n,t,e){var r=pn.exec(t.slice(e,e+3));return r?(n.L=+r[0],e+r[0].length):-1}function k(n,t,e){var r=pn.exec(t.slice(e,e+6));return r?(n.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function T(n,t,e){var r=jn.exec(t.slice(e,e+1));return r?e+r[0].length:-1}function E(n,t,e){var r=pn.exec(t.slice(e));return r?(n.Q=+r[0],e+r[0].length):-1}function N(n,t,e){var r=pn.exec(t.slice(e));return r?(n.Q=1e3*+r[0],e+r[0].length):-1}function A(n,t){return u(n.getDate(),t,2)}function C(n,t){return u(n.getHours(),t,2)}function S(n,t){return u(n.getHours()%12||12,t,2)}function q(n,t){return u(1+mn.a.count(Object(mn.D)(n),n),t,3)}function z(n,t){return u(n.getMilliseconds(),t,3)}function P(n,t){return z(n,t)+"000"}function R(n,t){return u(n.getMonth()+1,t,2)}function D(n,t){return u(n.getMinutes(),t,2)}function I(n,t){return u(n.getSeconds(),t,2)}function L(n){var t=n.getDay();return 0===t?7:t}function H(n,t){return u(mn.t.count(Object(mn.D)(n),n),t,2)}function U(n,t){var e=n.getDay();return n=e>=4||0===e?Object(mn.v)(n):mn.v.ceil(n),u(mn.v.count(Object(mn.D)(n),n)+(4===Object(mn.D)(n).getDay()),t,2)}function F(n){return n.getDay()}function B(n,t){return u(mn.l.count(Object(mn.D)(n),n),t,2)}function Y(n,t){return u(n.getFullYear()%100,t,2)}function X(n,t){return u(n.getFullYear()%1e4,t,4)}function W(n){var t=n.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+u(t/60|0,"0",2)+u(t%60,"0",2)}function V(n,t){return u(n.getUTCDate(),t,2)}function G(n,t){return u(n.getUTCHours(),t,2)}function Z(n,t){return u(n.getUTCHours()%12||12,t,2)}function J(n,t){return u(1+mn.F.count(Object(mn._7)(n),n),t,3)}function Q(n,t){return u(n.getUTCMilliseconds(),t,3)}function $(n,t){return Q(n,t)+"000"}function K(n,t){return u(n.getUTCMonth()+1,t,2)}function nn(n,t){return u(n.getUTCMinutes(),t,2)}function tn(n,t){return u(n.getUTCSeconds(),t,2)}function en(n){var t=n.getUTCDay();return 0===t?7:t}function rn(n,t){return u(mn.X.count(Object(mn._7)(n),n),t,2)}function on(n,t){var e=n.getUTCDay();return n=e>=4||0===e?Object(mn.Z)(n):mn.Z.ceil(n),u(mn.Z.count(Object(mn._7)(n),n)+(4===Object(mn._7)(n).getUTCDay()),t,2)}function sn(n){return n.getUTCDay()}function un(n,t){return u(mn.P.count(Object(mn._7)(n),n),t,2)}function cn(n,t){return u(n.getUTCFullYear()%100,t,2)}function an(n,t){return u(n.getUTCFullYear()%1e4,t,4)}function dn(){return"+0000"}function ln(){return"%"}function fn(n){return+n}function hn(n){return Math.floor(+n/1e3)}t.a=s;var mn=e("./node_modules/d3-time/index.js"),_n={"-":"",_:" ",0:"0"},pn=/^\s*\d+/,jn=/^%/,vn=/[\\^$*+?|[\]().{}]/g},"./node_modules/d3-time/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-time/src/interval.js");e.d(t,"g",function(){return r.a});var o=e("./node_modules/d3-time/src/millisecond.js");e.d(t,"h",function(){return o.a}),e.d(t,"i",function(){return o.b}),e.d(t,"L",function(){return o.a}),e.d(t,"M",function(){return o.b});var i=e("./node_modules/d3-time/src/second.js");e.d(t,"r",function(){return i.a}),e.d(t,"s",function(){return i.b}),e.d(t,"V",function(){return i.a}),e.d(t,"W",function(){return i.b});var s=e("./node_modules/d3-time/src/minute.js");e.d(t,"j",function(){return s.a}),e.d(t,"k",function(){return s.b});var u=e("./node_modules/d3-time/src/hour.js");e.d(t,"e",function(){return u.a}),e.d(t,"f",function(){return u.b});var c=e("./node_modules/d3-time/src/day.js");e.d(t,"a",function(){return c.b}),e.d(t,"b",function(){return c.a});var a=e("./node_modules/d3-time/src/week.js");e.d(t,"B",function(){return a.g}),e.d(t,"C",function(){return a.h}),e.d(t,"t",function(){return a.g}),e.d(t,"u",function(){return a.h}),e.d(t,"l",function(){return a.c}),e.d(t,"m",function(){return a.d}),e.d(t,"x",function(){return a.k}),e.d(t,"y",function(){return a.l}),e.d(t,"z",function(){return a.m}),e.d(t,"A",function(){return a.n}),e.d(t,"v",function(){return a.i}),e.d(t,"w",function(){return a.j}),e.d(t,"c",function(){return a.a}),e.d(t,"d",function(){return a.b}),e.d(t,"p",function(){return a.e}),e.d(t,"q",function(){return a.f});var d=e("./node_modules/d3-time/src/month.js");e.d(t,"n",function(){return d.a}),e.d(t,"o",function(){return d.b});var l=e("./node_modules/d3-time/src/year.js");e.d(t,"D",function(){return l.a}),e.d(t,"E",function(){return l.b});var f=e("./node_modules/d3-time/src/utcMinute.js");e.d(t,"N",function(){return f.a}),e.d(t,"O",function(){return f.b});var h=e("./node_modules/d3-time/src/utcHour.js");e.d(t,"J",function(){return h.a}),e.d(t,"K",function(){return h.b});var m=e("./node_modules/d3-time/src/utcDay.js");e.d(t,"F",function(){return m.a}),e.d(t,"G",function(){return m.b});var _=e("./node_modules/d3-time/src/utcWeek.js");e.d(t,"_5",function(){return _.g}),e.d(t,"_6",function(){return _.h}),e.d(t,"X",function(){return _.g}),e.d(t,"Y",function(){return _.h}),e.d(t,"P",function(){return _.c}),e.d(t,"Q",function(){return _.d}),e.d(t,"_1",function(){return _.k}),e.d(t,"_2",function(){return _.l}),e.d(t,"_3",function(){return _.m}),e.d(t,"_4",function(){return _.n}),e.d(t,"Z",function(){return _.i}),e.d(t,"_0",function(){return _.j}),e.d(t,"H",function(){return _.a}),e.d(t,"I",function(){return _.b}),e.d(t,"T",function(){return _.e}),e.d(t,"U",function(){return _.f});var p=e("./node_modules/d3-time/src/utcMonth.js");e.d(t,"R",function(){return p.a}),e.d(t,"S",function(){return p.b});var j=e("./node_modules/d3-time/src/utcYear.js");e.d(t,"_7",function(){return j.a}),e.d(t,"_8",function(){return j.b})},"./node_modules/d3-time/src/day.js":function(n,t,e){"use strict";e.d(t,"a",function(){return s});var r=e("./node_modules/d3-time/src/interval.js"),o=e("./node_modules/d3-time/src/duration.js"),i=Object(r.a)(function(n){n.setHours(0,0,0,0)},function(n,t){n.setDate(n.getDate()+t)},function(n,t){return(t-n-(t.getTimezoneOffset()-n.getTimezoneOffset())*o.c)/o.a},function(n){return n.getDate()-1});t.b=i;var s=i.range},"./node_modules/d3-time/src/duration.js":function(n,t,e){"use strict";e.d(t,"d",function(){return r}),e.d(t,"c",function(){return o}),e.d(t,"b",function(){return i}),e.d(t,"a",function(){return s}),e.d(t,"e",function(){return u});var r=1e3,o=6e4,i=36e5,s=864e5,u=6048e5},"./node_modules/d3-time/src/hour.js":function(n,t,e){"use strict";e.d(t,"b",function(){return s});var r=e("./node_modules/d3-time/src/interval.js"),o=e("./node_modules/d3-time/src/duration.js"),i=Object(r.a)(function(n){var t=n.getTimezoneOffset()*o.c%o.b;t<0&&(t+=o.b),n.setTime(Math.floor((+n-t)/o.b)*o.b+t)},function(n,t){n.setTime(+n+t*o.b)},function(n,t){return(t-n)/o.b},function(n){return n.getHours()});t.a=i;var s=i.range},"./node_modules/d3-time/src/interval.js":function(n,t,e){"use strict";function r(n,t,e,s){function u(t){return n(t=new Date(+t)),t}return u.floor=u,u.ceil=function(e){return n(e=new Date(e-1)),t(e,1),n(e),e},u.round=function(n){var t=u(n),e=u.ceil(n);return n-t<e-n?t:e},u.offset=function(n,e){return t(n=new Date(+n),null==e?1:Math.floor(e)),n},u.range=function(e,r,o){var i,s=[];if(e=u.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return s;do{s.push(i=new Date(+e)),t(e,o),n(e)}while(i<e&&e<r);return s},u.filter=function(e){return r(function(t){if(t>=t)for(;n(t),!e(t);)t.setTime(t-1)},function(n,r){if(n>=n)if(r<0)for(;++r<=0;)for(;t(n,-1),!e(n););else for(;--r>=0;)for(;t(n,1),!e(n););})},e&&(u.count=function(t,r){return o.setTime(+t),i.setTime(+r),n(o),n(i),Math.floor(e(o,i))},u.every=function(n){return n=Math.floor(n),isFinite(n)&&n>0?n>1?u.filter(s?function(t){return s(t)%n==0}:function(t){return u.count(0,t)%n==0}):u:null}),u}t.a=r;var o=new Date,i=new Date},"./node_modules/d3-time/src/millisecond.js":function(n,t,e){"use strict";e.d(t,"b",function(){return i});var r=e("./node_modules/d3-time/src/interval.js"),o=Object(r.a)(function(){},function(n,t){n.setTime(+n+t)},function(n,t){return t-n});o.every=function(n){return n=Math.floor(n),isFinite(n)&&n>0?n>1?Object(r.a)(function(t){t.setTime(Math.floor(t/n)*n)},function(t,e){t.setTime(+t+e*n)},function(t,e){return(e-t)/n}):o:null},t.a=o;var i=o.range},"./node_modules/d3-time/src/minute.js":function(n,t,e){"use strict";e.d(t,"b",function(){return s});var r=e("./node_modules/d3-time/src/interval.js"),o=e("./node_modules/d3-time/src/duration.js"),i=Object(r.a)(function(n){n.setTime(Math.floor(n/o.c)*o.c)},function(n,t){n.setTime(+n+t*o.c)},function(n,t){return(t-n)/o.c},function(n){return n.getMinutes()});t.a=i;var s=i.range},"./node_modules/d3-time/src/month.js":function(n,t,e){"use strict";e.d(t,"b",function(){return i});var r=e("./node_modules/d3-time/src/interval.js"),o=Object(r.a)(function(n){n.setDate(1),n.setHours(0,0,0,0)},function(n,t){n.setMonth(n.getMonth()+t)},function(n,t){return t.getMonth()-n.getMonth()+12*(t.getFullYear()-n.getFullYear())},function(n){return n.getMonth()});t.a=o;var i=o.range},"./node_modules/d3-time/src/second.js":function(n,t,e){"use strict";e.d(t,"b",function(){return s});var r=e("./node_modules/d3-time/src/interval.js"),o=e("./node_modules/d3-time/src/duration.js"),i=Object(r.a)(function(n){n.setTime(Math.floor(n/o.d)*o.d)},function(n,t){n.setTime(+n+t*o.d)},function(n,t){return(t-n)/o.d},function(n){return n.getUTCSeconds()});t.a=i;var s=i.range},"./node_modules/d3-time/src/utcDay.js":function(n,t,e){"use strict";e.d(t,"b",function(){return s});var r=e("./node_modules/d3-time/src/interval.js"),o=e("./node_modules/d3-time/src/duration.js"),i=Object(r.a)(function(n){n.setUTCHours(0,0,0,0)},function(n,t){n.setUTCDate(n.getUTCDate()+t)},function(n,t){return(t-n)/o.a},function(n){return n.getUTCDate()-1});t.a=i;var s=i.range},"./node_modules/d3-time/src/utcHour.js":function(n,t,e){"use strict";e.d(t,"b",function(){return s});var r=e("./node_modules/d3-time/src/interval.js"),o=e("./node_modules/d3-time/src/duration.js"),i=Object(r.a)(function(n){n.setUTCMinutes(0,0,0)},function(n,t){n.setTime(+n+t*o.b)},function(n,t){return(t-n)/o.b},function(n){return n.getUTCHours()});t.a=i;var s=i.range},"./node_modules/d3-time/src/utcMinute.js":function(n,t,e){"use strict";e.d(t,"b",function(){return s});var r=e("./node_modules/d3-time/src/interval.js"),o=e("./node_modules/d3-time/src/duration.js"),i=Object(r.a)(function(n){n.setUTCSeconds(0,0)},function(n,t){n.setTime(+n+t*o.c)},function(n,t){return(t-n)/o.c},function(n){return n.getUTCMinutes()});t.a=i;var s=i.range},"./node_modules/d3-time/src/utcMonth.js":function(n,t,e){"use strict";e.d(t,"b",function(){return i});var r=e("./node_modules/d3-time/src/interval.js"),o=Object(r.a)(function(n){n.setUTCDate(1),n.setUTCHours(0,0,0,0)},function(n,t){n.setUTCMonth(n.getUTCMonth()+t)},function(n,t){return t.getUTCMonth()-n.getUTCMonth()+12*(t.getUTCFullYear()-n.getUTCFullYear())},function(n){return n.getUTCMonth()});t.a=o;var i=o.range},"./node_modules/d3-time/src/utcWeek.js":function(n,t,e){"use strict";function r(n){return Object(o.a)(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-n)%7),t.setUTCHours(0,0,0,0)},function(n,t){n.setUTCDate(n.getUTCDate()+7*t)},function(n,t){return(t-n)/i.e})}e.d(t,"g",function(){return s}),e.d(t,"c",function(){return u}),e.d(t,"k",function(){return c}),e.d(t,"m",function(){return a}),e.d(t,"i",function(){return d}),e.d(t,"a",function(){return l}),e.d(t,"e",function(){return f}),e.d(t,"h",function(){return h}),e.d(t,"d",function(){return m}),e.d(t,"l",function(){return _}),e.d(t,"n",function(){return p}),e.d(t,"j",function(){return j}),e.d(t,"b",function(){return v}),e.d(t,"f",function(){return b});var o=e("./node_modules/d3-time/src/interval.js"),i=e("./node_modules/d3-time/src/duration.js"),s=r(0),u=r(1),c=r(2),a=r(3),d=r(4),l=r(5),f=r(6),h=s.range,m=u.range,_=c.range,p=a.range,j=d.range,v=l.range,b=f.range},"./node_modules/d3-time/src/utcYear.js":function(n,t,e){"use strict";e.d(t,"b",function(){return i});var r=e("./node_modules/d3-time/src/interval.js"),o=Object(r.a)(function(n){n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,t){n.setUTCFullYear(n.getUTCFullYear()+t)},function(n,t){return t.getUTCFullYear()-n.getUTCFullYear()},function(n){return n.getUTCFullYear()});o.every=function(n){return isFinite(n=Math.floor(n))&&n>0?Object(r.a)(function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/n)*n),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e*n)}):null},t.a=o;var i=o.range},"./node_modules/d3-time/src/week.js":function(n,t,e){"use strict";function r(n){return Object(o.a)(function(t){t.setDate(t.getDate()-(t.getDay()+7-n)%7),t.setHours(0,0,0,0)},function(n,t){n.setDate(n.getDate()+7*t)},function(n,t){return(t-n-(t.getTimezoneOffset()-n.getTimezoneOffset())*i.c)/i.e})}e.d(t,"g",function(){return s}),e.d(t,"c",function(){return u}),e.d(t,"k",function(){return c}),e.d(t,"m",function(){return a}),e.d(t,"i",function(){return d}),e.d(t,"a",function(){return l}),e.d(t,"e",function(){return f}),e.d(t,"h",function(){return h}),e.d(t,"d",function(){return m}),e.d(t,"l",function(){return _}),e.d(t,"n",function(){return p}),e.d(t,"j",function(){return j}),e.d(t,"b",function(){return v}),e.d(t,"f",function(){return b});var o=e("./node_modules/d3-time/src/interval.js"),i=e("./node_modules/d3-time/src/duration.js"),s=r(0),u=r(1),c=r(2),a=r(3),d=r(4),l=r(5),f=r(6),h=s.range,m=u.range,_=c.range,p=a.range,j=d.range,v=l.range,b=f.range},"./node_modules/d3-time/src/year.js":function(n,t,e){"use strict";e.d(t,"b",function(){return i});var r=e("./node_modules/d3-time/src/interval.js"),o=Object(r.a)(function(n){n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,t){n.setFullYear(n.getFullYear()+t)},function(n,t){return t.getFullYear()-n.getFullYear()},function(n){return n.getFullYear()});o.every=function(n){return isFinite(n=Math.floor(n))&&n>0?Object(r.a)(function(t){t.setFullYear(Math.floor(t.getFullYear()/n)*n),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e*n)}):null},t.a=o;var i=o.range},"./node_modules/d3-timer/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-timer/src/timer.js");e.d(t,"b",function(){return r.b}),e.d(t,"d",function(){return r.c}),e.d(t,"e",function(){return r.d});var o=e("./node_modules/d3-timer/src/timeout.js");e.d(t,"c",function(){return o.a});var i=e("./node_modules/d3-timer/src/interval.js");e.d(t,"a",function(){return i.a})},"./node_modules/d3-timer/src/interval.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-timer/src/timer.js");t.a=function(n,t,e){var o=new r.a,i=t;return null==t?(o.restart(n,t,e),o):(t=+t,e=null==e?Object(r.b)():+e,o.restart(function r(s){s+=i,o.restart(r,i+=t,e),n(s)},t,e),o)}},"./node_modules/d3-timer/src/timeout.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-timer/src/timer.js");t.a=function(n,t,e){var o=new r.a;return t=null==t?0:+t,o.restart(function(e){o.stop(),n(e+t)},t,e),o}},"./node_modules/d3-timer/src/timer.js":function(n,t,e){"use strict";function r(){return b||(x(o),b=y.now()+g)}function o(){b=0}function i(){this._call=this._time=this._next=null}function s(n,t,e){var r=new i;return r.restart(n,t,e),r}function u(){r(),++m;for(var n,t=f;t;)(n=b-t._time)>=0&&t._call.call(null,n),t=t._next;--m}function c(){b=(v=y.now())+g,m=_=0;try{u()}finally{m=0,d(),b=0}}function a(){var n=y.now(),t=n-v;t>j&&(g-=t,v=n)}function d(){for(var n,t,e=f,r=1/0;e;)e._call?(r>e._time&&(r=e._time),n=e,e=e._next):(t=e._next,e._next=null,e=n?n._next=t:f=t);h=n,l(r)}function l(n){if(!m){_&&(_=clearTimeout(_));n-b>24?(n<1/0&&(_=setTimeout(c,n-y.now()-g)),p&&(p=clearInterval(p))):(p||(v=y.now(),p=setInterval(a,j)),m=1,x(c))}}t.b=r,t.a=i,t.c=s,t.d=u;var f,h,m=0,_=0,p=0,j=1e3,v=0,b=0,g=0,y="object"==typeof performance&&performance.now?performance:Date,x="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(n){setTimeout(n,17)};i.prototype=s.prototype={constructor:i,restart:function(n,t,e){if("function"!=typeof n)throw new TypeError("callback is not a function");e=(null==e?r():+e)+(null==t?0:+t),this._next||h===this||(h?h._next=this:f=this,h=this),this._call=n,this._time=e,l()},stop:function(){this._call&&(this._call=null,this._time=1/0,l())}}},"./node_modules/d3-transition/index.js":function(n,t,e){"use strict";var r=(e("./node_modules/d3-transition/src/selection/index.js"),e("./node_modules/d3-transition/src/transition/index.js"));e.d(t,"c",function(){return r.b});var o=e("./node_modules/d3-transition/src/active.js");e.d(t,"a",function(){return o.a});var i=e("./node_modules/d3-transition/src/interrupt.js");e.d(t,"b",function(){return i.a})},"./node_modules/d3-transition/src/active.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-transition/src/transition/index.js"),o=e("./node_modules/d3-transition/src/transition/schedule.js"),i=[null];t.a=function(n,t){var e,s,u=n.__transition;if(u){t=null==t?null:t+"";for(s in u)if((e=u[s]).state>o.c&&e.name===t)return new r.a([[n]],i,t,+s)}return null}},"./node_modules/d3-transition/src/interrupt.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-transition/src/transition/schedule.js");t.a=function(n,t){var e,o,i,s=n.__transition,u=!0;if(s){t=null==t?null:t+"";for(i in s)(e=s[i]).name===t?(o=e.state>r.d&&e.state<r.b,e.state=r.a,e.timer.stop(),o&&e.on.call("interrupt",n,n.__data__,e.index,e.group),delete s[i]):u=!1;u&&delete n.__transition}}},"./node_modules/d3-transition/src/selection/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/index.js"),o=e("./node_modules/d3-transition/src/selection/interrupt.js"),i=e("./node_modules/d3-transition/src/selection/transition.js");r.l.prototype.interrupt=o.a,r.l.prototype.transition=i.a},"./node_modules/d3-transition/src/selection/interrupt.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-transition/src/interrupt.js");t.a=function(n){return this.each(function(){Object(r.a)(this,n)})}},"./node_modules/d3-transition/src/selection/transition.js":function(n,t,e){"use strict";function r(n,t){for(var e;!(e=n.__transition)||!(e=e[t]);)if(!(n=n.parentNode))return c.time=Object(u.b)(),c;return e}var o=e("./node_modules/d3-transition/src/transition/index.js"),i=e("./node_modules/d3-transition/src/transition/schedule.js"),s=e("./node_modules/d3-ease/index.js"),u=e("./node_modules/d3-timer/index.js"),c={time:null,delay:0,duration:250,ease:s.o};t.a=function(n){var t,e;n instanceof o.a?(t=n._id,n=n._name):(t=Object(o.c)(),(e=c).time=Object(u.b)(),n=null==n?null:n+"");for(var s=this._groups,a=s.length,d=0;d<a;++d)for(var l,f=s[d],h=f.length,m=0;m<h;++m)(l=f[m])&&Object(i.e)(l,n,t,m,f,e||r(l,t));return new o.a(s,this._parents,n,t)}},"./node_modules/d3-transition/src/transition/attr.js":function(n,t,e){"use strict";function r(n){return function(){this.removeAttribute(n)}}function o(n){return function(){this.removeAttributeNS(n.space,n.local)}}function i(n,t,e){var r,o;return function(){var i=this.getAttribute(n);return i===e?null:i===r?o:o=t(r=i,e)}}function s(n,t,e){var r,o;return function(){var i=this.getAttributeNS(n.space,n.local);return i===e?null:i===r?o:o=t(r=i,e)}}function u(n,t,e){var r,o,i;return function(){var s,u=e(this);return null==u?void this.removeAttribute(n):(s=this.getAttribute(n),s===u?null:s===r&&u===o?i:i=t(r=s,o=u))}}function c(n,t,e){var r,o,i;return function(){var s,u=e(this);return null==u?void this.removeAttributeNS(n.space,n.local):(s=this.getAttributeNS(n.space,n.local),s===u?null:s===r&&u===o?i:i=t(r=s,o=u))}}var a=e("./node_modules/d3-interpolate/index.js"),d=e("./node_modules/d3-selection/index.js"),l=e("./node_modules/d3-transition/src/transition/tween.js"),f=e("./node_modules/d3-transition/src/transition/interpolate.js");t.a=function(n,t){var e=Object(d.h)(n),h="transform"===e?a.u:f.a;return this.attrTween(n,"function"==typeof t?(e.local?c:u)(e,h,Object(l.b)(this,"attr."+n,t)):null==t?(e.local?o:r)(e):(e.local?s:i)(e,h,t+""))}},"./node_modules/d3-transition/src/transition/attrTween.js":function(n,t,e){"use strict";function r(n,t){function e(){var e=this,r=t.apply(e,arguments);return r&&function(t){e.setAttributeNS(n.space,n.local,r(t))}}return e._value=t,e}function o(n,t){function e(){var e=this,r=t.apply(e,arguments);return r&&function(t){e.setAttribute(n,r(t))}}return e._value=t,e}var i=e("./node_modules/d3-selection/index.js");t.a=function(n,t){var e="attr."+n;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;var s=Object(i.h)(n);return this.tween(e,(s.local?r:o)(s,t))}},"./node_modules/d3-transition/src/transition/delay.js":function(n,t,e){"use strict";function r(n,t){return function(){Object(i.g)(this,n).delay=+t.apply(this,arguments)}}function o(n,t){return t=+t,function(){Object(i.g)(this,n).delay=t}}var i=e("./node_modules/d3-transition/src/transition/schedule.js");t.a=function(n){var t=this._id;return arguments.length?this.each(("function"==typeof n?r:o)(t,n)):Object(i.f)(this.node(),t).delay}},"./node_modules/d3-transition/src/transition/duration.js":function(n,t,e){"use strict";function r(n,t){return function(){Object(i.h)(this,n).duration=+t.apply(this,arguments)}}function o(n,t){return t=+t,function(){Object(i.h)(this,n).duration=t}}var i=e("./node_modules/d3-transition/src/transition/schedule.js");t.a=function(n){var t=this._id;return arguments.length?this.each(("function"==typeof n?r:o)(t,n)):Object(i.f)(this.node(),t).duration}},"./node_modules/d3-transition/src/transition/ease.js":function(n,t,e){"use strict";function r(n,t){if("function"!=typeof t)throw new Error;return function(){Object(o.h)(this,n).ease=t}}var o=e("./node_modules/d3-transition/src/transition/schedule.js");t.a=function(n){var t=this._id;return arguments.length?this.each(r(t,n)):Object(o.f)(this.node(),t).ease}},"./node_modules/d3-transition/src/transition/filter.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/index.js"),o=e("./node_modules/d3-transition/src/transition/index.js");t.a=function(n){"function"!=typeof n&&(n=Object(r.f)(n));for(var t=this._groups,e=t.length,i=new Array(e),s=0;s<e;++s)for(var u,c=t[s],a=c.length,d=i[s]=[],l=0;l<a;++l)(u=c[l])&&n.call(u,u.__data__,l,c)&&d.push(u);return new o.a(i,this._parents,this._name,this._id)}},"./node_modules/d3-transition/src/transition/index.js":function(n,t,e){"use strict";function r(n,t,e,r){this._groups=n,this._parents=t,this._name=e,this._id=r}function o(n){return Object(s.l)().transition(n)}function i(){return++w}t.a=r,t.b=o,t.c=i;var s=e("./node_modules/d3-selection/index.js"),u=e("./node_modules/d3-transition/src/transition/attr.js"),c=e("./node_modules/d3-transition/src/transition/attrTween.js"),a=e("./node_modules/d3-transition/src/transition/delay.js"),d=e("./node_modules/d3-transition/src/transition/duration.js"),l=e("./node_modules/d3-transition/src/transition/ease.js"),f=e("./node_modules/d3-transition/src/transition/filter.js"),h=e("./node_modules/d3-transition/src/transition/merge.js"),m=e("./node_modules/d3-transition/src/transition/on.js"),_=e("./node_modules/d3-transition/src/transition/remove.js"),p=e("./node_modules/d3-transition/src/transition/select.js"),j=e("./node_modules/d3-transition/src/transition/selectAll.js"),v=e("./node_modules/d3-transition/src/transition/selection.js"),b=e("./node_modules/d3-transition/src/transition/style.js"),g=e("./node_modules/d3-transition/src/transition/styleTween.js"),y=e("./node_modules/d3-transition/src/transition/text.js"),x=e("./node_modules/d3-transition/src/transition/transition.js"),O=e("./node_modules/d3-transition/src/transition/tween.js"),w=0,M=s.l.prototype;r.prototype=o.prototype={constructor:r,select:p.a,selectAll:j.a,filter:f.a,merge:h.a,selection:v.a,transition:x.a,call:M.call,nodes:M.nodes,node:M.node,size:M.size,empty:M.empty,each:M.each,on:m.a,attr:u.a,attrTween:c.a,style:b.a,styleTween:g.a,text:y.a,remove:_.a,tween:O.a,delay:a.a,duration:d.a,ease:l.a}},"./node_modules/d3-transition/src/transition/interpolate.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-color/index.js"),o=e("./node_modules/d3-interpolate/index.js");t.a=function(n,t){var e;return("number"==typeof t?o.m:t instanceof r.a?o.o:(e=Object(r.a)(t))?(t=e,o.o):o.s)(n,t)}},"./node_modules/d3-transition/src/transition/merge.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-transition/src/transition/index.js");t.a=function(n){if(n._id!==this._id)throw new Error;for(var t=this._groups,e=n._groups,o=t.length,i=e.length,s=Math.min(o,i),u=new Array(o),c=0;c<s;++c)for(var a,d=t[c],l=e[c],f=d.length,h=u[c]=new Array(f),m=0;m<f;++m)(a=d[m]||l[m])&&(h[m]=a);for(;c<o;++c)u[c]=t[c];return new r.a(u,this._parents,this._name,this._id)}},"./node_modules/d3-transition/src/transition/on.js":function(n,t,e){"use strict";function r(n){return(n+"").trim().split(/^|\s+/).every(function(n){var t=n.indexOf(".");return t>=0&&(n=n.slice(0,t)),!n||"start"===n})}function o(n,t,e){var o,s,u=r(t)?i.g:i.h;return function(){var r=u(this,n),i=r.on;i!==o&&(s=(o=i).copy()).on(t,e),r.on=s}}var i=e("./node_modules/d3-transition/src/transition/schedule.js");t.a=function(n,t){var e=this._id;return arguments.length<2?Object(i.f)(this.node(),e).on.on(n):this.each(o(e,n,t))}},"./node_modules/d3-transition/src/transition/remove.js":function(n,t,e){"use strict";function r(n){return function(){var t=this.parentNode;for(var e in this.__transition)if(+e!==n)return;t&&t.removeChild(this)}}t.a=function(){return this.on("end.remove",r(this._id))}},"./node_modules/d3-transition/src/transition/schedule.js":function(n,t,e){"use strict";function r(n,t){var e=i(n,t);if(e.state>l)throw new Error("too late; already scheduled");return e}function o(n,t){var e=i(n,t);if(e.state>h)throw new Error("too late; already started");return e}function i(n,t){var e=n.__transition;if(!e||!(e=e[t]))throw new Error("transition not found");return e}function s(n,t,e){function r(n){e.state=f,e.timer.restart(o,e.delay,e.time),e.delay<=n&&o(n-e.delay)}function o(r){var d,l,p,v;if(e.state!==f)return s();for(d in a)if(v=a[d],v.name===e.name){if(v.state===m)return Object(c.c)(o);v.state===_?(v.state=j,v.timer.stop(),v.on.call("interrupt",n,n.__data__,v.index,v.group),delete a[d]):+d<t&&(v.state=j,v.timer.stop(),delete a[d])}if(Object(c.c)(function(){e.state===m&&(e.state=_,e.timer.restart(i,e.delay,e.time),i(r))}),e.state=h,e.on.call("start",n,n.__data__,e.index,e.group),e.state===h){for(e.state=m,u=new Array(p=e.tween.length),d=0,l=-1;d<p;++d)(v=e.tween[d].value.call(n,n.__data__,e.index,e.group))&&(u[++l]=v);u.length=l+1}}function i(t){for(var r=t<e.duration?e.ease.call(null,t/e.duration):(e.timer.restart(s),e.state=p,1),o=-1,i=u.length;++o<i;)u[o].call(null,r);e.state===p&&(e.on.call("end",n,n.__data__,e.index,e.group),s())}function s(){e.state=j,e.timer.stop(),delete a[t];for(var r in a)return;delete n.__transition}var u,a=n.__transition;a[t]=e,e.timer=Object(c.d)(r,0,e.time)}e.d(t,"c",function(){return f}),e.d(t,"d",function(){return h}),e.d(t,"b",function(){return p}),e.d(t,"a",function(){return j}),t.g=r,t.h=o,t.f=i;var u=e("./node_modules/d3-dispatch/index.js"),c=e("./node_modules/d3-timer/index.js"),a=Object(u.a)("start","end","interrupt"),d=[],l=0,f=1,h=2,m=3,_=4,p=5,j=6;t.e=function(n,t,e,r,o,i){var u=n.__transition;if(u){if(e in u)return}else n.__transition={};s(n,e,{name:t,index:r,group:o,on:a,tween:d,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:l})}},"./node_modules/d3-transition/src/transition/select.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/index.js"),o=e("./node_modules/d3-transition/src/transition/index.js"),i=e("./node_modules/d3-transition/src/transition/schedule.js");t.a=function(n){var t=this._name,e=this._id;"function"!=typeof n&&(n=Object(r.m)(n));for(var s=this._groups,u=s.length,c=new Array(u),a=0;a<u;++a)for(var d,l,f=s[a],h=f.length,m=c[a]=new Array(h),_=0;_<h;++_)(d=f[_])&&(l=n.call(d,d.__data__,_,f))&&("__data__"in d&&(l.__data__=d.__data__),m[_]=l,Object(i.e)(m[_],t,e,_,m,Object(i.f)(d,e)));return new o.a(c,this._parents,t,e)}},"./node_modules/d3-transition/src/transition/selectAll.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/index.js"),o=e("./node_modules/d3-transition/src/transition/index.js"),i=e("./node_modules/d3-transition/src/transition/schedule.js");t.a=function(n){var t=this._name,e=this._id;"function"!=typeof n&&(n=Object(r.n)(n));for(var s=this._groups,u=s.length,c=[],a=[],d=0;d<u;++d)for(var l,f=s[d],h=f.length,m=0;m<h;++m)if(l=f[m]){for(var _,p=n.call(l,l.__data__,m,f),j=Object(i.f)(l,e),v=0,b=p.length;v<b;++v)(_=p[v])&&Object(i.e)(_,t,e,v,p,j);c.push(p),a.push(l)}return new o.a(c,a,t,e)}},"./node_modules/d3-transition/src/transition/selection.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-selection/index.js"),o=r.l.prototype.constructor;t.a=function(){return new o(this._groups,this._parents)}},"./node_modules/d3-transition/src/transition/style.js":function(n,t,e){"use strict";function r(n,t){var e,r,o;return function(){var i=Object(c.o)(this,n),s=(this.style.removeProperty(n),Object(c.o)(this,n));return i===s?null:i===e&&s===r?o:o=t(e=i,r=s)}}function o(n){return function(){this.style.removeProperty(n)}}function i(n,t,e){var r,o;return function(){var i=Object(c.o)(this,n);return i===e?null:i===r?o:o=t(r=i,e)}}function s(n,t,e){var r,o,i;return function(){var s=Object(c.o)(this,n),u=e(this);return null==u&&(this.style.removeProperty(n),u=Object(c.o)(this,n)),s===u?null:s===r&&u===o?i:i=t(r=s,o=u)}}var u=e("./node_modules/d3-interpolate/index.js"),c=e("./node_modules/d3-selection/index.js"),a=e("./node_modules/d3-transition/src/transition/tween.js"),d=e("./node_modules/d3-transition/src/transition/interpolate.js");t.a=function(n,t,e){var c="transform"==(n+="")?u.t:d.a;return null==t?this.styleTween(n,r(n,c)).on("end.style."+n,o(n)):this.styleTween(n,"function"==typeof t?s(n,c,Object(a.b)(this,"style."+n,t)):i(n,c,t+""),e)}},"./node_modules/d3-transition/src/transition/styleTween.js":function(n,t,e){"use strict";function r(n,t,e){function r(){var r=this,o=t.apply(r,arguments);return o&&function(t){r.style.setProperty(n,o(t),e)}}return r._value=t,r}t.a=function(n,t,e){var o="style."+(n+="");if(arguments.length<2)return(o=this.tween(o))&&o._value;if(null==t)return this.tween(o,null);if("function"!=typeof t)throw new Error;return this.tween(o,r(n,t,null==e?"":e))}},"./node_modules/d3-transition/src/transition/text.js":function(n,t,e){"use strict";function r(n){return function(){this.textContent=n}}function o(n){return function(){var t=n(this);this.textContent=null==t?"":t}}var i=e("./node_modules/d3-transition/src/transition/tween.js");t.a=function(n){return this.tween("text","function"==typeof n?o(Object(i.b)(this,"text",n)):r(null==n?"":n+""))}},"./node_modules/d3-transition/src/transition/transition.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-transition/src/transition/index.js"),o=e("./node_modules/d3-transition/src/transition/schedule.js");t.a=function(){for(var n=this._name,t=this._id,e=Object(r.c)(),i=this._groups,s=i.length,u=0;u<s;++u)for(var c,a=i[u],d=a.length,l=0;l<d;++l)if(c=a[l]){var f=Object(o.f)(c,t);Object(o.e)(c,n,e,l,a,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new r.a(i,this._parents,n,e)}},"./node_modules/d3-transition/src/transition/tween.js":function(n,t,e){"use strict";function r(n,t){var e,r;return function(){var o=Object(s.h)(this,n),i=o.tween;if(i!==e){r=e=i;for(var u=0,c=r.length;u<c;++u)if(r[u].name===t){r=r.slice(),r.splice(u,1);break}}o.tween=r}}function o(n,t,e){var r,o;if("function"!=typeof e)throw new Error;return function(){var i=Object(s.h)(this,n),u=i.tween;if(u!==r){o=(r=u).slice();for(var c={name:t,value:e},a=0,d=o.length;a<d;++a)if(o[a].name===t){o[a]=c;break}a===d&&o.push(c)}i.tween=o}}function i(n,t,e){var r=n._id;return n.each(function(){var n=Object(s.h)(this,r);(n.value||(n.value={}))[t]=e.apply(this,arguments)}),function(n){return Object(s.f)(n,r).value[t]}}t.b=i;var s=e("./node_modules/d3-transition/src/transition/schedule.js");t.a=function(n,t){var e=this._id;if(n+="",arguments.length<2){for(var i,u=Object(s.f)(this.node(),e).tween,c=0,a=u.length;c<a;++c)if((i=u[c]).name===n)return i.value;return null}return this.each((null==t?r:o)(e,n,t))}},"./node_modules/d3-voronoi/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-voronoi/src/voronoi.js");e.d(t,"a",function(){return r.a})},"./node_modules/d3-voronoi/src/Beach.js":function(n,t,e){"use strict";function r(){Object(d.a)(this),this.edge=this.site=this.circle=null}function o(n){var t=_.pop()||new r;return t.site=n,t}function i(n){Object(f.b)(n),m.a.remove(n),_.push(n),Object(d.a)(n)}function s(n){var t=n.circle,e=t.x,r=t.cy,o=[e,r],s=n.P,u=n.N,c=[n];i(n);for(var a=s;a.circle&&Math.abs(e-a.circle.x)<m.f&&Math.abs(r-a.circle.cy)<m.f;)s=a.P,c.unshift(a),i(a),a=s;c.unshift(a),Object(f.b)(a);for(var d=u;d.circle&&Math.abs(e-d.circle.x)<m.f&&Math.abs(r-d.circle.cy)<m.f;)u=d.N,c.push(d),i(d),d=u;c.push(d),Object(f.b)(d);var l,_=c.length;for(l=1;l<_;++l)d=c[l],a=c[l-1],Object(h.d)(d.edge,a.site,d.site,o);a=c[0],d=c[_-1],d.edge=Object(h.c)(a.site,d.site,null,o),Object(f.a)(a),Object(f.a)(d)}function u(n){for(var t,e,r,i,s=n[0],u=n[1],d=m.a._;d;)if((r=c(d,u)-s)>m.f)d=d.L;else{if(!((i=s-a(d,u))>m.f)){r>-m.f?(t=d.P,e=d):i>-m.f?(t=d,e=d.N):t=e=d;break}if(!d.R){t=d;break}d=d.R}Object(l.c)(n);var _=o(n);if(m.a.insert(t,_),t||e){if(t===e)return Object(f.b)(t),e=o(t.site),m.a.insert(_,e),_.edge=e.edge=Object(h.c)(t.site,_.site),Object(f.a)(t),void Object(f.a)(e);if(!e)return void(_.edge=Object(h.c)(t.site,_.site));Object(f.b)(t),Object(f.b)(e);var p=t.site,j=p[0],v=p[1],b=n[0]-j,g=n[1]-v,y=e.site,x=y[0]-j,O=y[1]-v,w=2*(b*O-g*x),M=b*b+g*g,k=x*x+O*O,T=[(O*M-g*k)/w+j,(b*k-x*M)/w+v];Object(h.d)(e.edge,p,y,T),_.edge=Object(h.c)(p,n,null,T),e.edge=Object(h.c)(n,y,null,T),Object(f.a)(t),Object(f.a)(e)}}function c(n,t){var e=n.site,r=e[0],o=e[1],i=o-t;if(!i)return r;var s=n.P;if(!s)return-1/0;e=s.site;var u=e[0],c=e[1],a=c-t;if(!a)return u;var d=u-r,l=1/i-1/a,f=d/a;return l?(-f+Math.sqrt(f*f-2*l*(d*d/(-2*a)-c+a/2+o-i/2)))/l+r:(r+u)/2}function a(n,t){var e=n.N;if(e)return c(e,t);var r=n.site;return r[1]===t?r[0]:1/0}t.b=s,t.a=u;var d=e("./node_modules/d3-voronoi/src/RedBlackTree.js"),l=e("./node_modules/d3-voronoi/src/Cell.js"),f=e("./node_modules/d3-voronoi/src/Circle.js"),h=e("./node_modules/d3-voronoi/src/Edge.js"),m=e("./node_modules/d3-voronoi/src/Diagram.js"),_=[]},"./node_modules/d3-voronoi/src/Cell.js":function(n,t,e){"use strict";function r(n){return d.b[n.index]={site:n,halfedges:[]}}function o(n,t){var e=n.site,r=t.left,o=t.right;return e===o&&(o=r,r=e),o?Math.atan2(o[1]-r[1],o[0]-r[0]):(e===r?(r=t[1],o=t[0]):(r=t[0],o=t[1]),Math.atan2(r[0]-o[0],o[1]-r[1]))}function i(n,t){return t[+(t.left!==n.site)]}function s(n,t){return t[+(t.left===n.site)]}function u(){for(var n,t,e,r,i=0,s=d.b.length;i<s;++i)if((n=d.b[i])&&(r=(t=n.halfedges).length)){var u=new Array(r),c=new Array(r);for(e=0;e<r;++e)u[e]=e,c[e]=o(n,d.e[t[e]]);for(u.sort(function(n,t){return c[t]-c[n]}),e=0;e<r;++e)c[e]=t[u[e]];for(e=0;e<r;++e)t[e]=c[e]}}function c(n,t,e,r){var o,u,c,l,f,h,m,_,p,j,v,b,g=d.b.length,y=!0;for(o=0;o<g;++o)if(u=d.b[o]){for(c=u.site,f=u.halfedges,l=f.length;l--;)d.e[f[l]]||f.splice(l,1);for(l=0,h=f.length;l<h;)j=s(u,d.e[f[l]]),v=j[0],b=j[1],m=i(u,d.e[f[++l%h]]),_=m[0],p=m[1],(Math.abs(v-_)>d.f||Math.abs(b-p)>d.f)&&(f.splice(l,0,d.e.push(Object(a.b)(c,j,Math.abs(v-n)<d.f&&r-b>d.f?[n,Math.abs(_-n)<d.f?p:r]:Math.abs(b-r)<d.f&&e-v>d.f?[Math.abs(p-r)<d.f?_:e,r]:Math.abs(v-e)<d.f&&b-t>d.f?[e,Math.abs(_-e)<d.f?p:t]:Math.abs(b-t)<d.f&&v-n>d.f?[Math.abs(p-t)<d.f?_:n,t]:null))-1),++h);h&&(y=!1)}if(y){var x,O,w,M=1/0;for(o=0,y=null;o<g;++o)(u=d.b[o])&&(c=u.site,x=c[0]-n,O=c[1]-t,(w=x*x+O*O)<M&&(M=w,y=u));if(y){var k=[n,t],T=[n,r],E=[e,r],N=[e,t];y.halfedges.push(d.e.push(Object(a.b)(c=y.site,k,T))-1,d.e.push(Object(a.b)(c,T,E))-1,d.e.push(Object(a.b)(c,E,N))-1,d.e.push(Object(a.b)(c,N,k))-1)}}for(o=0;o<g;++o)(u=d.b[o])&&(u.halfedges.length||delete d.b[o])}t.c=r,t.a=i,t.d=u,t.b=c;var a=e("./node_modules/d3-voronoi/src/Edge.js"),d=e("./node_modules/d3-voronoi/src/Diagram.js")},"./node_modules/d3-voronoi/src/Circle.js":function(n,t,e){"use strict";function r(){Object(u.a)(this),this.x=this.y=this.arc=this.site=this.cy=null}function o(n){var t=n.P,e=n.N;if(t&&e){var o=t.site,i=n.site,u=e.site;if(o!==u){var d=i[0],l=i[1],f=o[0]-d,h=o[1]-l,m=u[0]-d,_=u[1]-l,p=2*(f*_-h*m);if(!(p>=-c.g)){var j=f*f+h*h,v=m*m+_*_,b=(_*j-h*v)/p,g=(f*v-m*j)/p,y=a.pop()||new r;y.arc=n,y.site=i,y.x=b+d,y.y=(y.cy=g+l)+Math.sqrt(b*b+g*g),n.circle=y;for(var x=null,O=c.c._;O;)if(y.y<O.y||y.y===O.y&&y.x<=O.x){if(!O.L){x=O.P;break}O=O.L}else{if(!O.R){x=O;break}O=O.R}c.c.insert(x,y),x||(s=y)}}}}function i(n){var t=n.circle;t&&(t.P||(s=t.N),c.c.remove(t),a.push(t),Object(u.a)(t),n.circle=null)}e.d(t,"c",function(){return s}),t.a=o,t.b=i;var s,u=e("./node_modules/d3-voronoi/src/RedBlackTree.js"),c=e("./node_modules/d3-voronoi/src/Diagram.js"),a=[]},"./node_modules/d3-voronoi/src/Diagram.js":function(n,t,e){"use strict";function r(n,t,e){return(n[0]-e[0])*(t[1]-n[1])-(n[0]-t[0])*(e[1]-n[1])}function o(n,t){return t[1]-n[1]||t[0]-n[0]}function i(n,t){var e,r,i,_=n.sort(o).pop();for(a=[],u=new Array(n.length),s=new m.b,c=new m.b;;)if(i=f.c,_&&(!i||_[1]<i.y||_[1]===i.y&&_[0]<i.x))_[0]===e&&_[1]===r||(Object(d.a)(_),e=_[0],r=_[1]),_=n.pop();else{if(!i)break;Object(d.b)(i.arc)}if(Object(l.d)(),t){var p=+t[0][0],j=+t[0][1],v=+t[1][0],b=+t[1][1];Object(h.a)(p,j,v,b),Object(l.b)(p,j,v,b)}this.edges=a,this.cells=u,s=c=a=u=null}e.d(t,"f",function(){return _}),e.d(t,"g",function(){return p}),e.d(t,"a",function(){return s}),e.d(t,"b",function(){return u}),e.d(t,"c",function(){return c}),e.d(t,"e",function(){return a}),t.d=i;var s,u,c,a,d=e("./node_modules/d3-voronoi/src/Beach.js"),l=e("./node_modules/d3-voronoi/src/Cell.js"),f=e("./node_modules/d3-voronoi/src/Circle.js"),h=e("./node_modules/d3-voronoi/src/Edge.js"),m=e("./node_modules/d3-voronoi/src/RedBlackTree.js"),_=1e-6,p=1e-12;i.prototype={constructor:i,polygons:function(){var n=this.edges;return this.cells.map(function(t){var e=t.halfedges.map(function(e){return Object(l.a)(t,n[e])});return e.data=t.site.data,e})},triangles:function(){var n=[],t=this.edges;return this.cells.forEach(function(e,o){if(s=(i=e.halfedges).length)for(var i,s,u,c=e.site,a=-1,d=t[i[s-1]],l=d.left===c?d.right:d.left;++a<s;)u=l,d=t[i[a]],l=d.left===c?d.right:d.left,u&&l&&o<u.index&&o<l.index&&r(c,u,l)<0&&n.push([c.data,u.data,l.data])}),n},links:function(){return this.edges.filter(function(n){return n.right}).map(function(n){return{source:n.left.data,target:n.right.data}})},find:function(n,t,e){for(var r,o,i=this,s=i._found||0,u=i.cells.length;!(o=i.cells[s]);)if(++s>=u)return null;var c=n-o.site[0],a=t-o.site[1],d=c*c+a*a;do{o=i.cells[r=s],s=null,o.halfedges.forEach(function(e){var r=i.edges[e],u=r.left;if(u!==o.site&&u||(u=r.right)){var c=n-u[0],a=t-u[1],l=c*c+a*a;l<d&&(d=l,s=u.index)}})}while(null!==s);return i._found=r,null==e||d<=e*e?o.site:null}}},"./node_modules/d3-voronoi/src/Edge.js":function(n,t,e){"use strict";function r(n,t,e,r){var o=[null,null],s=a.e.push(o)-1;return o.left=n,o.right=t,e&&i(o,n,t,e),r&&i(o,t,n,r),a.b[n.index].halfedges.push(s),a.b[t.index].halfedges.push(s),o}function o(n,t,e){var r=[t,e];return r.left=n,r}function i(n,t,e,r){n[0]||n[1]?n.left===e?n[1]=r:n[0]=r:(n[0]=r,n.left=t,n.right=e)}function s(n,t,e,r,o){var i,s=n[0],u=n[1],c=s[0],a=s[1],d=u[0],l=u[1],f=0,h=1,m=d-c,_=l-a;if(i=t-c,m||!(i>0)){if(i/=m,m<0){if(i<f)return;i<h&&(h=i)}else if(m>0){if(i>h)return;i>f&&(f=i)}if(i=r-c,m||!(i<0)){if(i/=m,m<0){if(i>h)return;i>f&&(f=i)}else if(m>0){if(i<f)return;i<h&&(h=i)}if(i=e-a,_||!(i>0)){if(i/=_,_<0){if(i<f)return;i<h&&(h=i)}else if(_>0){if(i>h)return;i>f&&(f=i)}if(i=o-a,_||!(i<0)){if(i/=_,_<0){if(i>h)return;i>f&&(f=i)}else if(_>0){if(i<f)return;i<h&&(h=i)}return!(f>0||h<1)||(f>0&&(n[0]=[c+f*m,a+f*_]),h<1&&(n[1]=[c+h*m,a+h*_]),!0)}}}}}function u(n,t,e,r,o){var i=n[1];if(i)return!0;var s,u,c=n[0],a=n.left,d=n.right,l=a[0],f=a[1],h=d[0],m=d[1],_=(l+h)/2,p=(f+m)/2;if(m===f){if(_<t||_>=r)return;if(l>h){if(c){if(c[1]>=o)return}else c=[_,e];i=[_,o]}else{if(c){if(c[1]<e)return}else c=[_,o];i=[_,e]}}else if(s=(l-h)/(m-f),u=p-s*_,s<-1||s>1)if(l>h){if(c){if(c[1]>=o)return}else c=[(e-u)/s,e];i=[(o-u)/s,o]}else{if(c){if(c[1]<e)return}else c=[(o-u)/s,o];i=[(e-u)/s,e]}else if(f<m){if(c){if(c[0]>=r)return}else c=[t,s*t+u];i=[r,s*r+u]}else{if(c){if(c[0]<t)return}else c=[r,s*r+u];i=[t,s*t+u]}return n[0]=c,n[1]=i,!0}function c(n,t,e,r){for(var o,i=a.e.length;i--;)u(o=a.e[i],n,t,e,r)&&s(o,n,t,e,r)&&(Math.abs(o[0][0]-o[1][0])>a.f||Math.abs(o[0][1]-o[1][1])>a.f)||delete a.e[i]}t.c=r,t.b=o,t.d=i,t.a=c;var a=e("./node_modules/d3-voronoi/src/Diagram.js")},"./node_modules/d3-voronoi/src/RedBlackTree.js":function(n,t,e){"use strict";function r(){this._=null}function o(n){n.U=n.C=n.L=n.R=n.P=n.N=null}function i(n,t){var e=t,r=t.R,o=e.U;o?o.L===e?o.L=r:o.R=r:n._=r,r.U=o,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function s(n,t){var e=t,r=t.L,o=e.U;o?o.L===e?o.L=r:o.R=r:n._=r,r.U=o,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function u(n){for(;n.L;)n=n.L;return n}t.a=o,r.prototype={constructor:r,insert:function(n,t){var e,r,o;if(n){if(t.P=n,t.N=n.N,n.N&&(n.N.P=t),n.N=t,n.R){for(n=n.R;n.L;)n=n.L;n.L=t}else n.R=t;e=n}else this._?(n=u(this._),t.P=null,t.N=n,n.P=n.L=t,e=n):(t.P=t.N=null,this._=t,e=null);for(t.L=t.R=null,t.U=e,t.C=!0,n=t;e&&e.C;)r=e.U,e===r.L?(o=r.R,o&&o.C?(e.C=o.C=!1,r.C=!0,n=r):(n===e.R&&(i(this,e),n=e,e=n.U),e.C=!1,r.C=!0,s(this,r))):(o=r.L,o&&o.C?(e.C=o.C=!1,r.C=!0,n=r):(n===e.L&&(s(this,e),n=e,e=n.U),e.C=!1,r.C=!0,i(this,r))),e=n.U;this._.C=!1},remove:function(n){n.N&&(n.N.P=n.P),n.P&&(n.P.N=n.N),n.N=n.P=null;var t,e,r,o=n.U,c=n.L,a=n.R;if(e=c?a?u(a):c:a,o?o.L===n?o.L=e:o.R=e:this._=e,c&&a?(r=e.C,e.C=n.C,e.L=c,c.U=e,e!==a?(o=e.U,e.U=n.U,n=e.R,o.L=n,e.R=a,a.U=e):(e.U=o,o=e,n=e.R)):(r=n.C,n=e),n&&(n.U=o),!r){if(n&&n.C)return void(n.C=!1);do{if(n===this._)break;if(n===o.L){if(t=o.R,t.C&&(t.C=!1,o.C=!0,i(this,o),t=o.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,s(this,t),t=o.R),t.C=o.C,o.C=t.R.C=!1,i(this,o),n=this._;break}}else if(t=o.L,t.C&&(t.C=!1,o.C=!0,s(this,o),t=o.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,i(this,t),t=o.L),t.C=o.C,o.C=t.L.C=!1,s(this,o),n=this._;break}t.C=!0,n=o,o=o.U}while(!n.C);n&&(n.C=!1)}}},t.b=r},"./node_modules/d3-voronoi/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-voronoi/src/point.js":function(n,t,e){"use strict";function r(n){return n[0]}function o(n){return n[1]}t.a=r,t.b=o},"./node_modules/d3-voronoi/src/voronoi.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-voronoi/src/constant.js"),o=e("./node_modules/d3-voronoi/src/point.js"),i=e("./node_modules/d3-voronoi/src/Diagram.js");t.a=function(){function n(n){return new i.d(n.map(function(r,o){var s=[Math.round(t(r,o,n)/i.f)*i.f,Math.round(e(r,o,n)/i.f)*i.f];return s.index=o,s.data=r,s}),s)}var t=o.a,e=o.b,s=null;return n.polygons=function(t){return n(t).polygons()},n.links=function(t){return n(t).links()},n.triangles=function(t){return n(t).triangles()},n.x=function(e){return arguments.length?(t="function"==typeof e?e:Object(r.a)(+e),n):t},n.y=function(t){return arguments.length?(e="function"==typeof t?t:Object(r.a)(+t),n):e},n.extent=function(t){return arguments.length?(s=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],n):s&&[[s[0][0],s[0][1]],[s[1][0],s[1][1]]]},n.size=function(t){return arguments.length?(s=null==t?null:[[0,0],[+t[0],+t[1]]],n):s&&[s[1][0]-s[0][0],s[1][1]-s[0][1]]},n}},"./node_modules/d3-zoom/index.js":function(n,t,e){"use strict";var r=e("./node_modules/d3-zoom/src/zoom.js");e.d(t,"a",function(){return r.a});var o=e("./node_modules/d3-zoom/src/transform.js");e.d(t,"c",function(){return o.b}),e.d(t,"b",function(){return o.c})},"./node_modules/d3-zoom/src/constant.js":function(n,t,e){"use strict";t.a=function(n){return function(){return n}}},"./node_modules/d3-zoom/src/event.js":function(n,t,e){"use strict";function r(n,t,e){this.target=n,this.type=t,this.transform=e}t.a=r},"./node_modules/d3-zoom/src/noevent.js":function(n,t,e){"use strict";function r(){o.d.stopImmediatePropagation()}t.b=r;var o=e("./node_modules/d3-selection/index.js");t.a=function(){o.d.preventDefault(),o.d.stopImmediatePropagation()}},"./node_modules/d3-zoom/src/transform.js":function(n,t,e){"use strict";function r(n,t,e){this.k=n,this.x=t,this.y=e}function o(n){return n.__zoom||i}t.a=r,e.d(t,"c",function(){return i}),t.b=o,r.prototype={constructor:r,scale:function(n){return 1===n?this:new r(this.k*n,this.x,this.y)},translate:function(n,t){return 0===n&0===t?this:new r(this.k,this.x+this.k*n,this.y+this.k*t)},apply:function(n){return[n[0]*this.k+this.x,n[1]*this.k+this.y]},applyX:function(n){return n*this.k+this.x},applyY:function(n){return n*this.k+this.y},invert:function(n){return[(n[0]-this.x)/this.k,(n[1]-this.y)/this.k]},invertX:function(n){return(n-this.x)/this.k},invertY:function(n){return(n-this.y)/this.k},rescaleX:function(n){return n.copy().domain(n.range().map(this.invertX,this).map(n.invert,n))},rescaleY:function(n){return n.copy().domain(n.range().map(this.invertY,this).map(n.invert,n))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var i=new r(1,0,0);o.prototype=r.prototype},"./node_modules/d3-zoom/src/zoom.js":function(n,t,e){"use strict";function r(){return!f.d.button}function o(){var n,t,e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e,n=e.width.baseVal.value,t=e.height.baseVal.value):(n=e.clientWidth,t=e.clientHeight),[[0,0],[n,t]]}function i(){return this.__zoom||p.c}function s(){return-f.d.deltaY*(f.d.deltaMode?120:1)/500}function u(){return"ontouchstart"in this}function c(n,t,e){var r=n.invertX(t[0][0])-e[0][0],o=n.invertX(t[1][0])-e[1][0],i=n.invertY(t[0][1])-e[0][1],s=n.invertY(t[1][1])-e[1][1];return n.translate(o>r?(r+o)/2:Math.min(0,r)||Math.max(0,o),s>i?(i+s)/2:Math.min(0,i)||Math.max(0,s))}var a=e("./node_modules/d3-dispatch/index.js"),d=e("./node_modules/d3-drag/index.js"),l=e("./node_modules/d3-interpolate/index.js"),f=e("./node_modules/d3-selection/index.js"),h=e("./node_modules/d3-transition/index.js"),m=e("./node_modules/d3-zoom/src/constant.js"),_=e("./node_modules/d3-zoom/src/event.js"),p=e("./node_modules/d3-zoom/src/transform.js"),j=e("./node_modules/d3-zoom/src/noevent.js");t.a=function(){function n(n){n.property("__zoom",i).on("wheel.zoom",x).on("mousedown.zoom",O).on("dblclick.zoom",w).filter(z).on("touchstart.zoom",M).on("touchmove.zoom",k).on("touchend.zoom touchcancel.zoom",T).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function t(n,t){return t=Math.max(P[0],Math.min(P[1],t)),t===n.k?n:new p.a(t,n.x,n.y)}function e(n,t,e){var r=t[0]-e[0]*n.k,o=t[1]-e[1]*n.k;return r===n.x&&o===n.y?n:new p.a(n.k,r,o)}function v(n){return[(+n[0][0]+ +n[1][0])/2,(+n[0][1]+ +n[1][1])/2]}function b(n,t,e){n.on("start.zoom",function(){g(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){g(this,arguments).end()}).tween("zoom",function(){var n=this,r=arguments,o=g(n,r),i=C.apply(n,r),s=e||v(i),u=Math.max(i[1][0]-i[0][0],i[1][1]-i[0][1]),c=n.__zoom,a="function"==typeof t?t.apply(n,r):t,d=I(c.invert(s).concat(u/c.k),a.invert(s).concat(u/a.k));return function(n){if(1===n)n=a;else{var t=d(n),e=u/t[2];n=new p.a(e,s[0]-t[0]*e,s[1]-t[1]*e)}o.zoom(null,n)}})}function g(n,t){for(var e,r=0,o=L.length;r<o;++r)if((e=L[r]).that===n)return e;return new y(n,t)}function y(n,t){this.that=n,this.args=t,this.index=-1,this.active=0,this.extent=C.apply(n,t)}function x(){function n(){r.wheel=null,r.end()}if(A.apply(this,arguments)){var r=g(this,arguments),o=this.__zoom,i=Math.max(P[0],Math.min(P[1],o.k*Math.pow(2,q.apply(this,arguments)))),s=Object(f.g)(this);if(r.wheel)r.mouse[0][0]===s[0]&&r.mouse[0][1]===s[1]||(r.mouse[1]=o.invert(r.mouse[0]=s)),clearTimeout(r.wheel);else{if(o.k===i)return;r.mouse=[s,o.invert(s)],Object(h.b)(this),r.start()}Object(j.a)(),r.wheel=setTimeout(n,F),r.zoom("mouse",S(e(t(o,i),r.mouse[0],r.mouse[1]),r.extent,R))}}function O(){function n(){if(Object(j.a)(),!r.moved){var n=f.d.clientX-s,t=f.d.clientY-u;r.moved=n*n+t*t>B}r.zoom("mouse",S(e(r.that.__zoom,r.mouse[0]=Object(f.g)(r.that),r.mouse[1]),r.extent,R))}function t(){o.on("mousemove.zoom mouseup.zoom",null),Object(d.c)(f.d.view,r.moved),Object(j.a)(),r.end()}if(!N&&A.apply(this,arguments)){var r=g(this,arguments),o=Object(f.j)(f.d.view).on("mousemove.zoom",n,!0).on("mouseup.zoom",t,!0),i=Object(f.g)(this),s=f.d.clientX,u=f.d.clientY;Object(d.b)(f.d.view),Object(j.b)(),r.mouse=[i,this.__zoom.invert(i)],Object(h.b)(this),r.start()}}function w(){if(A.apply(this,arguments)){var r=this.__zoom,o=Object(f.g)(this),i=r.invert(o),s=r.k*(f.d.shiftKey?.5:2),u=S(e(t(r,s),o,i),C.apply(this,arguments),R);Object(j.a)(),D>0?Object(f.j)(this).transition().duration(D).call(b,u,o):Object(f.j)(this).call(n.transform,u)}}function M(){if(A.apply(this,arguments)){var n,t,e,r,o=g(this,arguments),i=f.d.changedTouches,s=i.length;for(Object(j.b)(),t=0;t<s;++t)e=i[t],r=Object(f.p)(this,i,e.identifier),r=[r,this.__zoom.invert(r),e.identifier],o.touch0?o.touch1||(o.touch1=r):(o.touch0=r,n=!0);if(E&&(E=clearTimeout(E),!o.touch1))return o.end(),void((r=Object(f.j)(this).on("dblclick.zoom"))&&r.apply(this,arguments));n&&(E=setTimeout(function(){E=null},U),Object(h.b)(this),o.start())}}function k(){var n,r,o,i,s=g(this,arguments),u=f.d.changedTouches,c=u.length;for(Object(j.a)(),E&&(E=clearTimeout(E)),n=0;n<c;++n)r=u[n],o=Object(f.p)(this,u,r.identifier),s.touch0&&s.touch0[2]===r.identifier?s.touch0[0]=o:s.touch1&&s.touch1[2]===r.identifier&&(s.touch1[0]=o);if(r=s.that.__zoom,s.touch1){var a=s.touch0[0],d=s.touch0[1],l=s.touch1[0],h=s.touch1[1],m=(m=l[0]-a[0])*m+(m=l[1]-a[1])*m,_=(_=h[0]-d[0])*_+(_=h[1]-d[1])*_;r=t(r,Math.sqrt(m/_)),o=[(a[0]+l[0])/2,(a[1]+l[1])/2],i=[(d[0]+h[0])/2,(d[1]+h[1])/2]}else{if(!s.touch0)return;o=s.touch0[0],i=s.touch0[1]}s.zoom("touch",S(e(r,o,i),s.extent,R))}function T(){var n,t,e=g(this,arguments),r=f.d.changedTouches,o=r.length;for(Object(j.b)(),N&&clearTimeout(N),N=setTimeout(function(){N=null},U),n=0;n<o;++n)t=r[n],e.touch0&&e.touch0[2]===t.identifier?delete e.touch0:e.touch1&&e.touch1[2]===t.identifier&&delete e.touch1;e.touch1&&!e.touch0&&(e.touch0=e.touch1,delete e.touch1),e.touch0?e.touch0[1]=this.__zoom.invert(e.touch0[0]):e.end()}var E,N,A=r,C=o,S=c,q=s,z=u,P=[0,1/0],R=[[-1/0,-1/0],[1/0,1/0]],D=250,I=l.v,L=[],H=Object(a.a)("start","zoom","end"),U=500,F=150,B=0;return n.transform=function(n,t){var e=n.selection?n.selection():n;e.property("__zoom",i),n!==e?b(n,t):e.interrupt().each(function(){g(this,arguments).start().zoom(null,"function"==typeof t?t.apply(this,arguments):t).end()})},n.scaleBy=function(t,e){n.scaleTo(t,function(){return this.__zoom.k*("function"==typeof e?e.apply(this,arguments):e)})},n.scaleTo=function(r,o){n.transform(r,function(){var n=C.apply(this,arguments),r=this.__zoom,i=v(n),s=r.invert(i),u="function"==typeof o?o.apply(this,arguments):o;return S(e(t(r,u),i,s),n,R)})},n.translateBy=function(t,e,r){n.transform(t,function(){return S(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof r?r.apply(this,arguments):r),C.apply(this,arguments),R)})},n.translateTo=function(t,e,r){n.transform(t,function(){var n=C.apply(this,arguments),t=this.__zoom,o=v(n);return S(p.c.translate(o[0],o[1]).scale(t.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof r?-r.apply(this,arguments):-r),n,R)})},y.prototype={start:function(){return 1==++this.active&&(this.index=L.push(this)-1,this.emit("start")),this},zoom:function(n,t){return this.mouse&&"mouse"!==n&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&"touch"!==n&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&"touch"!==n&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit("zoom"),this},end:function(){return 0==--this.active&&(L.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Object(f.c)(new _.a(n,t,this.that.__zoom),H.apply,H,[t,this.that,this.args])}},n.wheelDelta=function(t){return arguments.length?(q="function"==typeof t?t:Object(m.a)(+t),n):q},n.filter=function(t){return arguments.length?(A="function"==typeof t?t:Object(m.a)(!!t),n):A},n.touchable=function(t){return arguments.length?(z="function"==typeof t?t:Object(m.a)(!!t),n):z},n.extent=function(t){return arguments.length?(C="function"==typeof t?t:Object(m.a)([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),n):C},n.scaleExtent=function(t){return arguments.length?(P[0]=+t[0],P[1]=+t[1],n):[P[0],P[1]]},n.translateExtent=function(t){return arguments.length?(R[0][0]=+t[0][0],R[1][0]=+t[1][0],R[0][1]=+t[0][1],R[1][1]=+t[1][1],n):[[R[0][0],R[0][1]],[R[1][0],R[1][1]]]},n.constrain=function(t){return arguments.length?(S=t,n):S},n.duration=function(t){return arguments.length?(D=+t,n):D},n.interpolate=function(t){return arguments.length?(I=t,n):I},n.on=function(){var t=H.on.apply(H,arguments);return t===H?n:t},n.clickDistance=function(t){return arguments.length?(B=(t=+t)*t,n):Math.sqrt(B)},n}},"./node_modules/d3/build/package.js":function(n,t,e){"use strict";e.d(t,"a",function(){return r});var r="4.12.0"},"./node_modules/d3/index.js":function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=e("./node_modules/d3/build/package.js");e.d(t,"version",function(){return r.a});var o=e("./node_modules/d3-array/index.js");e.d(t,"bisect",function(){return o.b}),e.d(t,"bisectRight",function(){return o.d}),e.d(t,"bisectLeft",function(){return o.c}),e.d(t,"ascending",function(){return o.a}),e.d(t,"bisector",function(){return o.e}),e.d(t,"cross",function(){return o.f}),e.d(t,"descending",function(){return o.g}),e.d(t,"deviation",function(){return o.h}),e.d(t,"extent",function(){return o.i}),e.d(t,"histogram",function(){return o.j}),e.d(t,"thresholdFreedmanDiaconis",function(){return o.w}),e.d(t,"thresholdScott",function(){return o.x}),e.d(t,"thresholdSturges",function(){return o.y}),e.d(t,"max",function(){return o.k}),e.d(t,"mean",function(){return o.l}),e.d(t,"median",function(){return o.m}),e.d(t,"merge",function(){return o.n}),e.d(t,"min",function(){return o.o}),e.d(t,"pairs",function(){return o.p}),e.d(t,"permute",function(){return o.q}),e.d(t,"quantile",function(){return o.r}),e.d(t,"range",function(){return o.s}),e.d(t,"scan",function(){return o.t}),e.d(t,"shuffle",function(){return o.u}),e.d(t,"sum",function(){return o.v}),e.d(t,"ticks",function(){return o.B}),e.d(t,"tickIncrement",function(){return o.z}),e.d(t,"tickStep",function(){return o.A}),e.d(t,"transpose",function(){return o.C}),e.d(t,"variance",function(){return o.D}),e.d(t,"zip",function(){return o.E});var i=e("./node_modules/d3-axis/index.js");e.d(t,"axisTop",function(){return i.d}),e.d(t,"axisRight",function(){return i.c}),e.d(t,"axisBottom",function(){return i.a}),e.d(t,"axisLeft",function(){return i.b});var s=e("./node_modules/d3-brush/index.js");e.d(t,"brush",function(){return s.a}),e.d(t,"brushX",function(){return s.c}),e.d(t,"brushY",function(){return s.d}),e.d(t,"brushSelection",function(){return s.b});var u=e("./node_modules/d3-chord/index.js");e.d(t,"chord",function(){return u.a}),e.d(t,"ribbon",function(){return u.b});var c=e("./node_modules/d3-collection/index.js");e.d(t,"nest",function(){return c.d}),e.d(t,"set",function(){return c.e}),e.d(t,"map",function(){return c.c}),e.d(t,"keys",function(){return c.b}),e.d(t,"values",function(){return c.f}),e.d(t,"entries",function(){return c.a});var a=e("./node_modules/d3-color/index.js");e.d(t,"color",function(){return a.a}),e.d(t,"rgb",function(){return a.f}),e.d(t,"hsl",function(){return a.d}),e.d(t,"lab",function(){return a.e}),e.d(t,"hcl",function(){return a.c}),e.d(t,"cubehelix",function(){return a.b});var d=e("./node_modules/d3-dispatch/index.js");e.d(t,"dispatch",function(){return d.a});var l=e("./node_modules/d3-drag/index.js");e.d(t,"drag",function(){return l.a}),e.d(t,"dragDisable",function(){return l.b}),e.d(t,"dragEnable",function(){return l.c});var f=e("./node_modules/d3-dsv/index.js");e.d(t,"dsvFormat",function(){return f.e}),e.d(t,"csvParse",function(){return f.c}),e.d(t,"csvParseRows",function(){return f.d}),e.d(t,"csvFormat",function(){return f.a}),e.d(t,"csvFormatRows",function(){return f.b}),e.d(t,"tsvParse",function(){return f.h}),e.d(t,"tsvParseRows",function(){return f.i}),e.d(t,"tsvFormat",function(){return f.f}),e.d(t,"tsvFormatRows",function(){return f.g});var h=e("./node_modules/d3-ease/index.js");e.d(t,"easeLinear",function(){return h.y}),e.d(t,"easeQuad",function(){return h.D}),e.d(t,"easeQuadIn",function(){return h.E}),e.d(t,"easeQuadOut",function(){return h.G}),e.d(t,"easeQuadInOut",function(){return h.F}),e.d(t,"easeCubic",function(){return h.m}),e.d(t,"easeCubicIn",function(){return h.n}),e.d(t,"easeCubicOut",function(){return h.p}),e.d(t,"easeCubicInOut",function(){return h.o}),e.d(t,"easePoly",function(){return h.z}),e.d(t,"easePolyIn",function(){return h.A}),e.d(t,"easePolyOut",function(){return h.C}),e.d(t,"easePolyInOut",function(){return h.B}),e.d(t,"easeSin",function(){return h.H}),e.d(t,"easeSinIn",function(){return h.I}),e.d(t,"easeSinOut",function(){return h.K}),e.d(t,"easeSinInOut",function(){return h.J}),e.d(t,"easeExp",function(){return h.u}),e.d(t,"easeExpIn",function(){return h.v}),e.d(t,"easeExpOut",function(){return h.x}),e.d(t,"easeExpInOut",function(){return h.w}),e.d(t,"easeCircle",function(){return h.i}),e.d(t,"easeCircleIn",function(){return h.j}),e.d(t,"easeCircleOut",function(){return h.l}),e.d(t,"easeCircleInOut",function(){return h.k}),e.d(t,"easeBounce",function(){return h.e}),e.d(t,"easeBounceIn",function(){return h.f}),e.d(t,"easeBounceOut",function(){return h.h}),e.d(t,"easeBounceInOut",function(){return h.g}),e.d(t,"easeBack",function(){return h.a}),e.d(t,"easeBackIn",function(){return h.b}),e.d(t,"easeBackOut",function(){return h.d}),e.d(t,"easeBackInOut",function(){return h.c}),e.d(t,"easeElastic",function(){return h.q}),e.d(t,"easeElasticIn",function(){return h.r}),e.d(t,"easeElasticOut",function(){return h.t}),e.d(t,"easeElasticInOut",function(){return h.s});var m=e("./node_modules/d3-force/index.js");e.d(t,"forceCenter",function(){return m.a}),e.d(t,"forceCollide",function(){return m.b}),e.d(t,"forceLink",function(){return m.c}),e.d(t,"forceManyBody",function(){return m.d}),e.d(t,"forceRadial",function(){return m.e}),e.d(t,"forceSimulation",function(){return m.f}),e.d(t,"forceX",function(){return m.g}),e.d(t,"forceY",function(){return m.h});var _=e("./node_modules/d3-format/index.js");e.d(t,"formatDefaultLocale",function(){return _.b}),e.d(t,"format",function(){return _.a}),e.d(t,"formatPrefix",function(){return _.d}),e.d(t,"formatLocale",function(){return _.c}),e.d(t,"formatSpecifier",function(){return _.e}),e.d(t,"precisionFixed",function(){return _.f}),e.d(t,"precisionPrefix",function(){return _.g}),e.d(t,"precisionRound",function(){return _.h});var p=e("./node_modules/d3-geo/index.js");e.d(t,"geoArea",function(){return p.c}),e.d(t,"geoBounds",function(){return p.h}),e.d(t,"geoCentroid",function(){return p.i}),e.d(t,"geoCircle",function(){return p.j}),e.d(t,"geoClipAntimeridian",function(){return p.k}),e.d(t,"geoClipCircle",function(){return p.l}),e.d(t,"geoClipExtent",function(){return p.m}),e.d(t,"geoClipRectangle",function(){return p.n}),e.d(t,"geoContains",function(){return p.u}),e.d(t,"geoDistance",function(){return p.v}),e.d(t,"geoGraticule",function(){return p.A}),e.d(t,"geoGraticule10",function(){return p.B}),e.d(t,"geoInterpolate",function(){return p.D}),e.d(t,"geoLength",function(){return p.E}),e.d(t,"geoPath",function(){return p.L}),e.d(t,"geoAlbers",function(){return p.a}),e.d(t,"geoAlbersUsa",function(){return p.b}),e.d(t,"geoAzimuthalEqualArea",function(){return p.d}),e.d(t,"geoAzimuthalEqualAreaRaw",function(){return p.e}),e.d(t,"geoAzimuthalEquidistant",function(){return p.f}),e.d(t,"geoAzimuthalEquidistantRaw",function(){return p.g}),e.d(t,"geoConicConformal",function(){return p.o}),e.d(t,"geoConicConformalRaw",function(){return p.p}),e.d(t,"geoConicEqualArea",function(){return p.q}),e.d(t,"geoConicEqualAreaRaw",function(){return p.r}),e.d(t,"geoConicEquidistant",function(){return p.s}),e.d(t,"geoConicEquidistantRaw",function(){return p.t}),e.d(t,"geoEquirectangular",function(){return p.w}),e.d(t,"geoEquirectangularRaw",function(){return p.x}),e.d(t,"geoGnomonic",function(){return p.y}),e.d(t,"geoGnomonicRaw",function(){return p.z}),e.d(t,"geoIdentity",function(){return p.C}),e.d(t,"geoProjection",function(){return p.M}),e.d(t,"geoProjectionMutator",function(){return p.N}),e.d(t,"geoMercator",function(){return p.F}),e.d(t,"geoMercatorRaw",function(){return p.G}),e.d(t,"geoNaturalEarth1",function(){return p.H}),e.d(t,"geoNaturalEarth1Raw",function(){return p.I}),e.d(t,"geoOrthographic",function(){return p.J}),e.d(t,"geoOrthographicRaw",function(){return p.K}),e.d(t,"geoStereographic",function(){return p.P}),e.d(t,"geoStereographicRaw",function(){return p.Q}),e.d(t,"geoTransverseMercator",function(){return p.T}),e.d(t,"geoTransverseMercatorRaw",function(){return p.U}),e.d(t,"geoRotation",function(){return p.O}),e.d(t,"geoStream",function(){return p.R}),e.d(t,"geoTransform",function(){return p.S});var j=e("./node_modules/d3-hierarchy/index.js");e.d(t,"cluster",function(){return j.a}),e.d(t,"hierarchy",function(){return j.b}),e.d(t,"pack",function(){return j.c}),e.d(t,"packSiblings",function(){return j.e}),e.d(t,"packEnclose",function(){return j.d}),e.d(t,"partition",function(){return j.f}),e.d(t,"stratify",function(){return j.g}),e.d(t,"tree",function(){return j.h}),e.d(t,"treemap",function(){return j.i}),e.d(t,"treemapBinary",function(){return j.j}),e.d(t,"treemapDice",function(){return j.k}),e.d(t,"treemapSlice",function(){return j.m}),e.d(t,"treemapSliceDice",function(){return j.n}),e.d(t,"treemapSquarify",function(){return j.o}),e.d(t,"treemapResquarify",function(){return j.l});var v=e("./node_modules/d3-interpolate/index.js");e.d(t,"interpolate",function(){return v.a}),e.d(t,"interpolateArray",function(){return v.b}),e.d(t,"interpolateBasis",function(){return v.c}),e.d(t,"interpolateBasisClosed",function(){return v.d}),e.d(t,"interpolateDate",function(){return v.g}),e.d(t,"interpolateNumber",function(){return v.m}),e.d(t,"interpolateObject",function(){return v.n}),e.d(t,"interpolateRound",function(){return v.r}),e.d(t,"interpolateString",function(){return v.s}),e.d(t,"interpolateTransformCss",function(){return v.t}),e.d(t,"interpolateTransformSvg",function(){return v.u}),e.d(t,"interpolateZoom",function(){return v.v}),e.d(t,"interpolateRgb",function(){return v.o}),e.d(t,"interpolateRgbBasis",function(){return v.p}),e.d(t,"interpolateRgbBasisClosed",function(){return v.q}),e.d(t,"interpolateHsl",function(){return v.j}),e.d(t,"interpolateHslLong",function(){return v.k}),e.d(t,"interpolateLab",function(){return v.l}),e.d(t,"interpolateHcl",function(){return v.h}),e.d(t,"interpolateHclLong",function(){return v.i}),e.d(t,"interpolateCubehelix",function(){return v.e}),e.d(t,"interpolateCubehelixLong",function(){return v.f}),e.d(t,"quantize",function(){return v.w});var b=e("./node_modules/d3-path/index.js");e.d(t,"path",function(){return b.a});var g=e("./node_modules/d3-polygon/index.js");e.d(t,"polygonArea",function(){return g.a}),e.d(t,"polygonCentroid",function(){return g.b}),e.d(t,"polygonHull",function(){return g.d}),e.d(t,"polygonContains",function(){return g.c}),e.d(t,"polygonLength",function(){return g.e});var y=e("./node_modules/d3-quadtree/index.js");e.d(t,"quadtree",function(){return y.a});var x=e("./node_modules/d3-queue/index.js");e.d(t,"queue",function(){return x.a});var O=e("./node_modules/d3-random/index.js");e.d(t,"randomUniform",function(){return O.f}),e.d(t,"randomNormal",function(){return O.e}),e.d(t,"randomLogNormal",function(){return O.d}),e.d(t,"randomBates",function(){return O.a}),e.d(t,"randomIrwinHall",function(){return O.c}),e.d(t,"randomExponential",function(){return O.b});var w=e("./node_modules/d3-request/index.js");e.d(t,"request",function(){return w.d}),e.d(t,"html",function(){return w.b}),e.d(t,"json",function(){return w.c}),e.d(t,"text",function(){return w.e}),e.d(t,"xml",function(){return w.g}),e.d(t,"csv",function(){return w.a}),e.d(t,"tsv",function(){return w.f});var M=e("./node_modules/d3-scale/index.js");e.d(t,"scaleBand",function(){return M.i}),e.d(t,"scalePoint",function(){return M.o}),e.d(t,"scaleIdentity",function(){return M.j}),e.d(t,"scaleLinear",function(){return M.l}),e.d(t,"scaleLog",function(){return M.m}),e.d(t,"scaleOrdinal",function(){return M.n}),e.d(t,"scaleImplicit",function(){return M.k}),e.d(t,"scalePow",function(){return M.p}),e.d(t,"scaleSqrt",function(){return M.t}),e.d(t,"scaleQuantile",function(){return M.q}),e.d(t,"scaleQuantize",function(){return M.r}),e.d(t,"scaleThreshold",function(){return M.u}),e.d(t,"scaleTime",function(){return M.v}),e.d(t,"scaleUtc",function(){return M.w}),e.d(t,"schemeCategory10",function(){return M.x}),e.d(t,"schemeCategory20b",function(){return M.z}),e.d(t,"schemeCategory20c",function(){return M.A}),e.d(t,"schemeCategory20",function(){return M.y}),e.d(t,"interpolateCubehelixDefault",function(){return M.b}),e.d(t,"interpolateRainbow",function(){return M.f}),e.d(t,"interpolateWarm",function(){return M.h}),e.d(t,"interpolateCool",function(){return M.a}),e.d(t,"interpolateViridis",function(){return M.g}),e.d(t,"interpolateMagma",function(){return M.d}),e.d(t,"interpolateInferno",function(){return M.c}),e.d(t,"interpolatePlasma",function(){return M.e}),e.d(t,"scaleSequential",function(){return M.s});var k=e("./node_modules/d3-selection/index.js");e.d(t,"creator",function(){return k.b}),e.d(t,"local",function(){return k.e}),e.d(t,"matcher",function(){return k.f}),e.d(t,"mouse",function(){return k.g}),e.d(t,"namespace",function(){return k.h}),e.d(t,"namespaces",function(){return k.i}),e.d(t,"clientPoint",function(){return k.a}),e.d(t,"select",function(){return k.j}),e.d(t,"selectAll",function(){return k.k}),e.d(t,"selection",function(){return k.l}),e.d(t,"selector",function(){return k.m}),e.d(t,"selectorAll",function(){return k.n}),e.d(t,"style",function(){return k.o}),e.d(t,"touch",function(){return k.p}),e.d(t,"touches",function(){return k.q}),e.d(t,"window",function(){return k.r}),e.d(t,"event",function(){return k.d}),e.d(t,"customEvent",function(){return k.c});var T=e("./node_modules/d3-shape/index.js");e.d(t,"arc",function(){return T.a}),e.d(t,"area",function(){return T.b}),e.d(t,"line",function(){return T.v}),e.d(t,"pie",function(){return T.A}),e.d(t,"areaRadial",function(){return T.c}),e.d(t,"radialArea",function(){return T.C}),e.d(t,"lineRadial",function(){return T.w}),e.d(t,"radialLine",function(){return T.D}),e.d(t,"pointRadial",function(){return T.B}),e.d(t,"linkHorizontal",function(){return T.x}),e.d(t,"linkVertical",function(){return T.z}),e.d(t,"linkRadial",function(){return T.y}),e.d(t,"symbol",function(){return T.P}),e.d(t,"symbols",function(){return T.X}),e.d(t,"symbolCircle",function(){return T.Q}),e.d(t,"symbolCross",function(){return T.R}),e.d(t,"symbolDiamond",function(){return T.S}),e.d(t,"symbolSquare",function(){return T.T}),e.d(t,"symbolStar",function(){return T.U}),e.d(t,"symbolTriangle",function(){return T.V}),e.d(t,"symbolWye",function(){return T.W}),e.d(t,"curveBasisClosed",function(){return T.e}),e.d(t,"curveBasisOpen",function(){return T.f}),e.d(t,"curveBasis",function(){return T.d}),e.d(t,"curveBundle",function(){return T.g}),e.d(t,"curveCardinalClosed",function(){return T.i}),e.d(t,"curveCardinalOpen",function(){return T.j}),e.d(t,"curveCardinal",function(){return T.h}),e.d(t,"curveCatmullRomClosed",function(){return T.l}),e.d(t,"curveCatmullRomOpen",function(){return T.m}),e.d(t,"curveCatmullRom",function(){return T.k}),e.d(t,"curveLinearClosed",function(){return T.o}),e.d(t,"curveLinear",function(){return T.n}),e.d(t,"curveMonotoneX",function(){return T.p}),e.d(t,"curveMonotoneY",function(){return T.q}),e.d(t,"curveNatural",function(){return T.r}),e.d(t,"curveStep",function(){return T.s}),e.d(t,"curveStepAfter",function(){return T.t}),e.d(t,"curveStepBefore",function(){return T.u}),e.d(t,"stack",function(){return T.E}),e.d(t,"stackOffsetExpand",function(){return T.G}),e.d(t,"stackOffsetDiverging",function(){return T.F}),e.d(t,"stackOffsetNone",function(){return T.H}),e.d(t,"stackOffsetSilhouette",function(){return T.I}),e.d(t,"stackOffsetWiggle",function(){return T.J}),e.d(t,"stackOrderAscending",function(){return T.K}),e.d(t,"stackOrderDescending",function(){return T.L}),e.d(t,"stackOrderInsideOut",function(){return T.M}),e.d(t,"stackOrderNone",function(){return T.N}),e.d(t,"stackOrderReverse",function(){return T.O});var E=e("./node_modules/d3-time/index.js");e.d(t,"timeInterval",function(){return E.g}),e.d(t,"timeMillisecond",function(){return E.h}),e.d(t,"timeMilliseconds",function(){return E.i}),e.d(t,"utcMillisecond",function(){return E.L}),e.d(t,"utcMilliseconds",function(){return E.M}),e.d(t,"timeSecond",function(){return E.r}),e.d(t,"timeSeconds",function(){return E.s}),e.d(t,"utcSecond",function(){return E.V}),e.d(t,"utcSeconds",function(){return E.W}),e.d(t,"timeMinute",function(){return E.j}),e.d(t,"timeMinutes",function(){return E.k}),e.d(t,"timeHour",function(){return E.e}),e.d(t,"timeHours",function(){return E.f}),e.d(t,"timeDay",function(){return E.a}),e.d(t,"timeDays",function(){return E.b}),e.d(t,"timeWeek",function(){return E.B}),e.d(t,"timeWeeks",function(){return E.C}),e.d(t,"timeSunday",function(){return E.t}),e.d(t,"timeSundays",function(){return E.u}),e.d(t,"timeMonday",function(){return E.l}),e.d(t,"timeMondays",function(){return E.m}),e.d(t,"timeTuesday",function(){return E.x}),e.d(t,"timeTuesdays",function(){return E.y}),e.d(t,"timeWednesday",function(){return E.z}),e.d(t,"timeWednesdays",function(){return E.A}),e.d(t,"timeThursday",function(){return E.v}),e.d(t,"timeThursdays",function(){return E.w}),e.d(t,"timeFriday",function(){return E.c}),e.d(t,"timeFridays",function(){return E.d}),e.d(t,"timeSaturday",function(){return E.p}),e.d(t,"timeSaturdays",function(){return E.q}),e.d(t,"timeMonth",function(){return E.n}),e.d(t,"timeMonths",function(){return E.o}),e.d(t,"timeYear",function(){return E.D}),e.d(t,"timeYears",function(){return E.E}),e.d(t,"utcMinute",function(){return E.N}),e.d(t,"utcMinutes",function(){return E.O}),e.d(t,"utcHour",function(){return E.J}),e.d(t,"utcHours",function(){return E.K}),e.d(t,"utcDay",function(){return E.F}),e.d(t,"utcDays",function(){return E.G}),e.d(t,"utcWeek",function(){return E._5}),e.d(t,"utcWeeks",function(){return E._6}),e.d(t,"utcSunday",function(){return E.X}),e.d(t,"utcSundays",function(){return E.Y}),e.d(t,"utcMonday",function(){return E.P}),e.d(t,"utcMondays",function(){return E.Q}),e.d(t,"utcTuesday",function(){return E._1}),e.d(t,"utcTuesdays",function(){return E._2}),e.d(t,"utcWednesday",function(){return E._3}),e.d(t,"utcWednesdays",function(){return E._4}),e.d(t,"utcThursday",function(){return E.Z}),e.d(t,"utcThursdays",function(){return E._0}),e.d(t,"utcFriday",function(){return E.H}),e.d(t,"utcFridays",function(){return E.I}),e.d(t,"utcSaturday",function(){return E.T}),e.d(t,"utcSaturdays",function(){return E.U}),e.d(t,"utcMonth",function(){return E.R}),e.d(t,"utcMonths",function(){return E.S}),e.d(t,"utcYear",function(){return E._7}),e.d(t,"utcYears",function(){return E._8});var N=e("./node_modules/d3-time-format/index.js");e.d(t,"timeFormatDefaultLocale",function(){return N.d}),e.d(t,"timeFormat",function(){return N.c}),e.d(t,"timeParse",function(){return N.f}),e.d(t,"utcFormat",function(){return N.g}),e.d(t,"utcParse",function(){return N.h}),e.d(t,"timeFormatLocale",function(){return N.e}),e.d(t,"isoFormat",function(){return N.a}),e.d(t,"isoParse",function(){return N.b});var A=e("./node_modules/d3-timer/index.js");e.d(t,"now",function(){return A.b}),e.d(t,"timer",function(){return A.d}),e.d(t,"timerFlush",function(){return A.e}),e.d(t,"timeout",function(){return A.c}),e.d(t,"interval",function(){return A.a});var C=e("./node_modules/d3-transition/index.js");e.d(t,"transition",function(){return C.c}),e.d(t,"active",function(){return C.a}),e.d(t,"interrupt",function(){return C.b});var S=e("./node_modules/d3-voronoi/index.js");e.d(t,"voronoi",function(){return S.a});var q=e("./node_modules/d3-zoom/index.js");e.d(t,"zoom",function(){return q.a}),e.d(t,"zoomTransform",function(){return q.c}),e.d(t,"zoomIdentity",function(){return q.b})},"./public/noise.csv":function(n,t){n.exports="./publicassets/noise.csv"},"./src/components/app/index.js":function(n,t,e){"use strict";function r(n){return n&&n.__esModule?n:{default:n}}function o(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),s=e("./src/components/nav/index.js"),u=r(s),c=e("./src/components/scratchpad/index.js"),a=r(c),d=e("./src/components/caption/index.js"),l=r(d),f=e("./src/constants/index.js"),h=function(){function n(t){var e=this;if(o(this,n),this.onHashChange=function(){var n=window.location.hash.substr(1).trim();e.pages.find(function(t){return t.key===n})?(e.nav.update(n),e.pad.update(n),e.caption.update(n)):window.location="#"+e.pages[0].key},this.pages=t,this.el=document.querySelector("main"),!this.el)throw new Error('No "main" element found!');this.render(),this.route()}return i(n,[{key:"render",value:function(){this.el.style.width=f.CONTAINER_WIDTH+"px",this.el.style.height=f.CONTAINER_HEIGHT+"px",this.nav=new u.default(this.pages),this.pad=new a.default,this.caption=new l.default(this.pages)}},{key:"route",value:function(){window.addEventListener("hashchange",this.onHashChange),this.onHashChange()}}]),n}();t.default=h},"./src/components/caption/index.css":function(n,t){},"./src/components/caption/index.js":function(n,t,e){"use strict";function r(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e("./src/constants/index.js");e("./src/components/caption/index.css");var s=function(){function n(t){if(r(this,n),this.pages=t,this.el=document.querySelector(".caption"),!this.el)throw new Error('No element with class "caption" found!');this.el.style.width=i.CONTAINER_WIDTH+"px"}return o(n,[{key:"update",value:function(n){this.render(n)}},{key:"render",value:function(n){var t=this.pages.find(function(t){return t.key===n});this.el.textContent=t?t.caption:""}}]),n}();t.default=s},"./src/components/nav/index.css":function(n,t){},"./src/components/nav/index.js":function(n,t,e){"use strict";function r(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e("./src/constants/index.js");e("./src/components/nav/index.css");var s=function(){function n(t){if(r(this,n),this.onChange=function(n){window.location="#"+n.target.value},this.el=document.querySelector(".nav"),!this.el)throw new Error('No element with class "nav" found!');this.el.style.width=i.CONTAINER_WIDTH+"px",this.render(t)}return o(n,[{key:"update",value:function(n){this.select&&(this.select.value=n)}},{key:"render",value:function(n){var t=n.map(function(n){return"<option>"+n.key+"</option>"}).join("");this.el.innerHTML="<select>"+t+"</select>",this.addEvents()}},{key:"addEvents",value:function(){this.select=this.el.querySelector("select"),this.select.addEventListener("change",this.onChange)}}]),n}();t.default=s},"./src/components/scratchpad/index.css":function(n,t){},"./src/components/scratchpad/index.js":function(n,t,e){"use strict";function r(n){return n&&n.__esModule?n:{default:n}}function o(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}();e("./src/components/scratchpad/index.css");var s=e("./src/d3/tests/test1.js"),u=r(s),c=e("./src/d3/tests/test2.js"),a=r(c),d=e("./src/d3/histogram/index.js"),l=r(d),f=e("./src/d3/pack/index.js"),h=r(f),m=e("./src/d3/treemap/index.js"),_=r(m),p=function(){function n(){if(o(this,n),this.el=document.querySelector(".d3-scratchpad"),!this.el)throw new Error('No element with class "d3-scratchpad" found!')}return i(n,[{key:"update",value:function(n){switch(this.content&&this.content.destroy(),this.content=null,n){case"test1":this.content=new u.default;break;case"test2":this.content=new a.default;break;case"histogram":this.content=new l.default;break;case"pack":this.content=new h.default;break;case"treemap":this.content=new _.default}}}]),n}();t.default=p},"./src/constants/index.js":function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CONTAINER=".d3-scratchpad",t.CONTAINER_WIDTH=640,t.CONTAINER_HEIGHT=480},"./src/d3/histogram/index.css":function(n,t){},"./src/d3/histogram/index.js":function(n,t,e){"use strict";function r(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e("./node_modules/d3/index.js"),s=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(i),u=e("./src/constants/index.js"),c=e("./src/d3/util/noise.js"),a=function(n){return n&&n.__esModule?n:{default:n}}(c);e("./src/d3/histogram/index.css");var d=function(){function n(){r(this,n),a.default.fetch().then(function(n){return a.default.hours(n)}).then(this.render.bind(this))}return o(n,[{key:"onBinOver",value:function(n,t){s.select(this).style("fill","blue")}},{key:"onBinOut",value:function(n,t){var e=s.select(this);e.transition().duration(2e3).ease(s.easeCubicOut).style("fill",e.attr("data-fill"))}},{key:"render",value:function(n){var t=s.select(u.CONTAINER).append("svg").attr("width",u.CONTAINER_WIDTH).attr("height",u.CONTAINER_HEIGHT);this.renderBins(t,n),this.renderLabels(t)}},{key:"renderBins",value:function(n,t){var e=u.CONTAINER_WIDTH-20,r=u.CONTAINER_HEIGHT-30,o=e/24,i=r,c=s.scaleLinear().domain([0,23]).range([0,e-30]),a=s.histogram().thresholds(c.ticks(24))(t),d=a.map(function(n){return n.length}),l=s.max(d),f=n.append("g").attr("transform","translate(10, 10)"),h=s.interpolateRgb("#9cf","#f00");f.selectAll("rect").data(d).enter().append("rect").classed("histogram__rect",!0).style("fill",function(n){return h(n/l)}).attr("data-fill",function(n){return h(n/l)}).attr("x",function(n,t){return t*o}).attr("y",function(n){return i-n/l*i}).attr("width",o-1).attr("height",function(n){return n/l*i}).on("mouseover",this.onBinOver).on("mouseout",this.onBinOut)}},{key:"renderLabels",value:function(n){var t=n.append("g").attr("transform","translate(10, "+(u.CONTAINER_HEIGHT-4)+")"),e=["midnight","noon"];t.selectAll("text").data(e).enter().append("text").classed("histogram__label",!0).text(function(n){return n}).attr("x",function(n,t){return 3+t*(u.CONTAINER_WIDTH/2-10)}).attr("y",0).attr("text-anchor","left");var r=[1,u.CONTAINER_WIDTH/2-9];t.selectAll("path.histogram_label-line").data(r).enter().append("path").classed("histogram_label-line",!0).attr("d",function(n){return"M "+n+" 0 L "+n+" -16 Z"}).attr("stroke","#000").attr("stroke-width","1px")}},{key:"destroy",value:function(){a.default.cancel(),s.select(""+u.CONTAINER).selectAll(".histogram__rect").on("mouseover",null).on("mouseout",null),s.select(""+u.CONTAINER).selectAll("*").remove()}}]),n}();t.default=d},"./src/d3/pack/index.css":function(n,t){},"./src/d3/pack/index.js":function(n,t,e){"use strict";function r(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function o(n){var t={name:"0",children:[]};n.forEach(function(n){var e=t.children.find(function(t){return t.name===n.zip});if(e)e.value+=1;else if(n.zip){var r={name:n.zip,value:1};t.children.push(r)}});var e=t.children.map(function(n){return+n.name}),r=u.min(e),o=u.max(e)-r;return u.hierarchy(t).sum(function(n){return n.value}).each(function(n){n.color=u.interpolateRgb("#069","#0cf")((+n.data.name-r)/o)})}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),s=e("./node_modules/d3/index.js"),u=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(s),c=e("./src/constants/index.js"),a=e("./src/d3/util/noise.js"),d=function(n){return n&&n.__esModule?n:{default:n}}(a);e("./src/d3/pack/index.css");var l=function(){function n(){r(this,n),d.default.fetch().then(this.render.bind(this))}return i(n,[{key:"render",value:function(n){var t=u.select(c.CONTAINER).append("svg").attr("width",c.CONTAINER_WIDTH).attr("height",c.CONTAINER_HEIGHT),e=o(n),r=u.pack().size([c.CONTAINER_WIDTH,c.CONTAINER_HEIGHT]).padding(2),i=t.selectAll(".pack__node").data(r(e).leaves()).enter().append("g").attr("class","pack__node").attr("transform",function(n){return"translate("+n.x+", "+n.y+")"});i.append("circle").attr("r",function(n){return n.r}).style("fill",function(n){return n.color}),i.append("text").text(function(n){return n.data.name}).attr("class","pack__node-text").attr("text-anchor","middle").attr("y",5)}},{key:"destroy",value:function(){d.default.cancel(),u.selectAll(c.CONTAINER+" *").remove()}}]),n}();t.default=l},"./src/d3/tests/test1.js":function(n,t,e){"use strict";function r(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e("./node_modules/d3/index.js"),s=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(i),u=e("./src/constants/index.js");e("./src/d3/tests/tests.css");var c=function(){function n(){r(this,n),this.render()}return o(n,[{key:"render",value:function(){s.select(u.CONTAINER).append("div").classed("tests",!0).selectAll("p").data([0,1,2,3,4]).enter().append("p").classed("tests__item",!0).text(function(n){return n})}},{key:"destroy",value:function(){s.select(u.CONTAINER+" > div").remove()}}]),n}();t.default=c},"./src/d3/tests/test2.js":function(n,t,e){"use strict";function r(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),i=e("./node_modules/d3/index.js"),s=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(i),u=e("./src/constants/index.js");e("./src/d3/tests/tests.css");var c=function(){function n(){r(this,n),this.render()}return o(n,[{key:"render",value:function(){s.select(u.CONTAINER).append("div").classed("tests",!0).selectAll("p").data(["A","B","C","D","E"]).enter().append("p").classed("tests__item",!0).text(function(n){return n})}},{key:"destroy",value:function(){s.select(u.CONTAINER+" > div").remove()}}]),n}();t.default=c},"./src/d3/tests/tests.css":function(n,t){},"./src/d3/treemap/index.css":function(n,t){},"./src/d3/treemap/index.js":function(n,t,e){"use strict";function r(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function o(n){var t={name:"0",children:[]};n.forEach(function(n){var e=t.children.find(function(t){return t.name===n.zip});if(e)e.value+=1;else if(n.zip){var r={name:n.zip,value:1};t.children.push(r)}});var e=t.children.map(function(n){return+n.name}),r=u.min(e),o=u.max(e)-r;return u.hierarchy(t).sum(function(n){return n.value}).each(function(n){n.color=u.interpolateRgb("#0fc","#fff")((+n.data.name-r)/o)})}Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function n(n,t){for(var e=0;e<t.length;e++){var r=t[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}}(),s=e("./node_modules/d3/index.js"),u=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(s),c=e("./src/constants/index.js"),a=e("./src/d3/util/noise.js"),d=function(n){return n&&n.__esModule?n:{default:n}}(a);e("./src/d3/treemap/index.css");var l=function(){function n(){r(this,n),d.default.fetch().then(this.render.bind(this))}return i(n,[{key:"render",value:function(n){var t=u.select(c.CONTAINER).append("svg").attr("width",c.CONTAINER_WIDTH).attr("height",c.CONTAINER_HEIGHT),e=o(n),r=u.treemap().size([c.CONTAINER_WIDTH,c.CONTAINER_HEIGHT]).padding(0);console.log(r(e).leaves());var i=t.selectAll(".treemap__node").data(r(e).leaves()).enter().append("g").attr("class","pack__node").attr("transform",function(n){return"translate("+n.x0+", "+n.y0+")"});i.append("rect").attr("x",0).attr("y",0).attr("width",function(n){return n.x1-n.x0}).attr("height",function(n){return n.y1-n.y0}).style("fill",function(n){return n.color}),i.append("text").text(function(n){return n.data.name}).attr("class","pack__node-text").attr("text-anchor","middle").attr("x",function(n){return(n.x1-n.x0)/2}).attr("y",function(n){return(n.y1-n.y0)/2+5})}},{key:"destroy",value:function(){d.default.cancel(),u.selectAll(c.CONTAINER+" *").remove()}}]),n}();t.default=l},"./src/d3/util/noise.js":function(n,t,e){"use strict";function r(n){var t=n["Created Date"].split(/\s/),e=t[1].split(":").map(function(n){return+n});return"AM"===t[2]&&12===e[0]?e[0]=0:"PM"===t[2]&&e[0]<12&&(e[0]+=12),{key:n["Unique Key"],time:e,agency:n.Agency,borough:n.Borough,type:n["Complaint Type"],description:n.Descriptor,zip:n["Incident Zip"],latitude:n.Latitude,longitude:n.Longitude}}function o(){return new Promise(function(n){a=c.csv("assets/noise.csv",r,function(t){a=null,n(t)})})}function i(){a&&(a.abort(),a=null)}function s(n){return n.map(function(n){return n.time[0]})}Object.defineProperty(t,"__esModule",{value:!0});var u=e("./node_modules/d3/index.js"),c=function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);return t.default=n,t}(u);e("./public/noise.csv");var a=void 0;t.default={fetch:o,cancel:i,hours:s}},"./src/index.css":function(n,t){},"./src/index.js":function(n,t,e){"use strict";function r(n){return n&&n.__esModule?n:{default:n}}Object.defineProperty(t,"__esModule",{value:!0}),e("./src/index.css");var o=e("./src/components/app/index.js"),i=r(o),s=e("./src/pages.json"),u=r(s),c=new i.default(u.default);t.default={app:c}},"./src/pages.json":function(n,t){n.exports=[{key:"treemap",caption:"Hierarchy/treemap: noise complaints by zip code for Jan 1 2015"},{key:"pack",caption:"Hierarchy/pack: noise complaints by zip code for Jan 1 2015"},{key:"histogram",caption:"Historgram: noise complaints by hour for Jan 1 2015"},{key:"test1",caption:"Test 1"},{key:"test2",caption:"Test 2"}]}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,